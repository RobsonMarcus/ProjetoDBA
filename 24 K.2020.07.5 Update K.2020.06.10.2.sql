GO

IF (SELECT OBJECT_ID('tempdb..#tmpErrors')) IS NOT NULL DROP TABLE #tmpErrors
GO
CREATE TABLE #tmpErrors (Error int)
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL READ COMMITTED
GO
BEGIN TRANSACTION
GO
PRINT N'Altering [dbo].[agenda_consulta]...';


GO
ALTER TABLE [dbo].[agenda_consulta]
    ADD [agd_tpagendamento] INT           DEFAULT ((0)) NOT NULL,
        [UrlTeleConsulta]   VARCHAR (250) NULL,
        [SenhaTeleConsulta] VARCHAR (250) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[Atendimento_Enfermagem]...';


GO
ALTER TABLE [dbo].[Atendimento_Enfermagem]
    ADD [prof_codigo]    CHAR (4) NULL,
        [atenf_data_fim] DATETIME NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[EvolucaoUtiDiurna]...';


GO
ALTER TABLE [dbo].[EvolucaoUtiDiurna] ALTER COLUMN [Acessos] VARCHAR (200) NULL;

ALTER TABLE [dbo].[EvolucaoUtiDiurna] ALTER COLUMN [Antibioticos] VARCHAR (200) NULL;

ALTER TABLE [dbo].[EvolucaoUtiDiurna] ALTER COLUMN [Condutas] VARCHAR (2000) NULL;

ALTER TABLE [dbo].[EvolucaoUtiDiurna] ALTER COLUMN [Diagnosticos] VARCHAR (8000) NULL;

ALTER TABLE [dbo].[EvolucaoUtiDiurna] ALTER COLUMN [ExameFisico] VARCHAR (2000) NULL;


GO
ALTER TABLE [dbo].[EvolucaoUtiDiurna]
    ADD [Cultura]     VARCHAR (200) NULL,
        [Covid]       VARCHAR (200) NULL,
        [Modelo]      VARCHAR (30)  NULL,
        [SatO2ParVet] VARCHAR (30)  NULL,
        [PF]          VARCHAR (30)  NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[paciente]...';


GO
ALTER TABLE [dbo].[paciente]
    ADD [ContatoIdSinc] VARCHAR (10) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[procedimento_internacao_real]...';


GO
ALTER TABLE [dbo].[procedimento_internacao_real]
    ADD [IdNefro] INT NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[SER2ParametroIntegracao]...';


GO
ALTER TABLE [dbo].[SER2ParametroIntegracao]
    ADD [AliasProvedorDestino] VARCHAR (100) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[setor_clinica]...';


GO
ALTER TABLE [dbo].[setor_clinica]
    ADD [procamb_codigo_consulta_enfermagem]        CHAR (10) NULL,
        [cbo_codigo_consulta_enfermagem]            CHAR (6)  NULL,
        [cbo_codigo_consulta_multiprofissional]     CHAR (6)  NULL,
        [procamb_codigo_consulta_multiprofissional] CHAR (10) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[unidade]...';


GO
ALTER TABLE [dbo].[unidade]
    ADD [ProtocoloCovid] BIT NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[UPA_Atendimento_Medico]...';


GO
ALTER TABLE [dbo].[UPA_Atendimento_Medico]
    ADD [upaatemed_resumoalta]          VARCHAR (2000) NULL,
        [upaatemed_condutaorientacao]   VARCHAR (2000) NULL,
        [upaatemed_sugestaoreavaliacao] CHAR (1)       NULL,
        [upaatemed_temporeavaliacao]    CHAR (2)       NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[UPA_Evolucao]...';


GO
ALTER TABLE [dbo].[UPA_Evolucao] ALTER COLUMN [upaevo_descricao] VARCHAR (8000) NULL;


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[Atendimento_MultiProfissional]...';


GO
CREATE TABLE [dbo].[Atendimento_MultiProfissional] (
    [atenm_codigo]      UNIQUEIDENTIFIER NOT NULL,
    [atenm_data_final]  DATETIME         NULL,
    [agd_sequencial]    CHAR (12)        NULL,
    [atenm_consulta]    VARCHAR (2000)   NULL,
    [prof_codigo]       CHAR (4)         NULL,
    [atenm_data_inicio] DATETIME         NULL,
    CONSTRAINT [PK_Atendimento_MultiProfissional] PRIMARY KEY CLUSTERED ([atenm_codigo] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[Atendimento_MultiProfissional_Procedimento]...';


GO
CREATE TABLE [dbo].[Atendimento_MultiProfissional_Procedimento] (
    [atenm_codigo] UNIQUEIDENTIFIER NULL,
    [proc_codigo]  CHAR (10)        NULL,
    [quantidade]   INT              NULL,
    [prof_codigo]  CHAR (4)         NULL
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[AtendimentoEnfermagem_Medicamento]...';


GO
CREATE TABLE [dbo].[AtendimentoEnfermagem_Medicamento] (
    [insu_codigo]    VARCHAR (20)     NOT NULL,
    [atenf_codigo]   UNIQUEIDENTIFIER NOT NULL,
    [insu_descricao] VARCHAR (600)    NULL
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ConsultaEnfermagem_Medicamento]...';


GO
CREATE TABLE [dbo].[ConsultaEnfermagem_Medicamento] (
    [insu_codigo]  VARCHAR (20)     NOT NULL,
    [atenf_codigo] UNIQUEIDENTIFIER NOT NULL
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[DrippingEvolucaoDiurna]...';


GO
CREATE TABLE [dbo].[DrippingEvolucaoDiurna] (
    [DrippingId]         INT            IDENTITY (1, 1) NOT NULL,
    [CodigoUtiDiurno]    INT            NULL,
    [InterCodigo]        VARCHAR (12)   NULL,
    [ProfCodigo]         VARCHAR (4)    NULL,
    [DrippingCodigoStok] VARCHAR (50)   NULL,
    [DrippingDescricao]  VARCHAR (2000) NULL,
    [mlh]                VARCHAR (10)   NULL
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[EvolucaoUtiIntercorrencia]...';


GO
CREATE TABLE [dbo].[EvolucaoUtiIntercorrencia] (
    [evouti_codigo]         INT            IDENTITY (1, 1) NOT NULL,
    [DataInclusao]          DATETIME       NULL,
    [inter_codigo]          VARCHAR (12)   NULL,
    [prof_codigo]           VARCHAR (4)    NULL,
    [locatend_codigo]       VARCHAR (4)    NULL,
    [Intercorrencia]        VARCHAR (8000) NULL,
    [Rascunho]              BIT            NULL,
    [DataUltimaAlteracao]   SMALLDATETIME  NULL,
    [FECHAMENTO_AUTOMATICO] CHAR (1)       NULL,
    [OrigemCopiaID]         INT            NULL,
    PRIMARY KEY CLUSTERED ([evouti_codigo] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[Hemodialise]...';


GO
CREATE TABLE [dbo].[Hemodialise] (
    [id_nefro]       INT          IDENTITY (1, 1) NOT NULL,
    [inter_codigo]   VARCHAR (12) NULL,
    [pac_codigo]     VARCHAR (12) NULL,
    [prof_codigo]    VARCHAR (4)  NULL,
    [dialisa]        VARCHAR (1)  NULL,
    [justificativa]  TEXT         NULL,
    [modalidade]     VARCHAR (3)  NULL,
    [tempo_hd]       VARCHAR (2)  NULL,
    [uf_efetiva]     VARCHAR (4)  NULL,
    [data_nefro]     DATETIME     NULL,
    [rv_atualizacao] ROWVERSION   NOT NULL,
    PRIMARY KEY CLUSTERED ([id_nefro] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[Parametro_Nefro]...';


GO
CREATE TABLE [dbo].[Parametro_Nefro] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [Modalidade]      VARCHAR (3)   NULL,
    [CodigoUnidade]   VARCHAR (4)   NULL,
    [rv_atualizacao]  ROWVERSION    NOT NULL,
    [co_procedimento] VARCHAR (10)  NULL,
    [procedimento]    VARCHAR (250) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating unnamed constraint on [dbo].[EvolucaoUtiIntercorrencia]...';


GO
ALTER TABLE [dbo].[EvolucaoUtiIntercorrencia]
    ADD DEFAULT ((0)) FOR [Rascunho];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating unnamed constraint on [dbo].[EvolucaoUtiIntercorrencia]...';


GO
ALTER TABLE [dbo].[EvolucaoUtiIntercorrencia]
    ADD DEFAULT (getdate()) FOR [DataUltimaAlteracao];


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[FK_Atendimento_MultiProfissional_agenda_consulta]...';


GO
ALTER TABLE [dbo].[Atendimento_MultiProfissional] WITH NOCHECK
    ADD CONSTRAINT [FK_Atendimento_MultiProfissional_agenda_consulta] FOREIGN KEY ([agd_sequencial]) REFERENCES [dbo].[agenda_consulta] ([agd_sequencial]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[FK_Atendimento_MultiProfissional_PROFISSIONAL_REDE]...';


GO
ALTER TABLE [dbo].[Atendimento_MultiProfissional] WITH NOCHECK
    ADD CONSTRAINT [FK_Atendimento_MultiProfissional_PROFISSIONAL_REDE] FOREIGN KEY ([prof_codigo]) REFERENCES [dbo].[PROFISSIONAL_REDE] ([prof_codigo]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[FK_Atendimento_MultiProfissional_Atendimento_MultiProfissional]...';


GO
ALTER TABLE [dbo].[Atendimento_MultiProfissional] WITH NOCHECK
    ADD CONSTRAINT [FK_Atendimento_MultiProfissional_Atendimento_MultiProfissional] FOREIGN KEY ([atenm_codigo]) REFERENCES [dbo].[Atendimento_MultiProfissional] ([atenm_codigo]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[FK_Atendimento_MultiProfissional_Procedimento_Atendimento_MultiProfissional]...';


GO
ALTER TABLE [dbo].[Atendimento_MultiProfissional_Procedimento] WITH NOCHECK
    ADD CONSTRAINT [FK_Atendimento_MultiProfissional_Procedimento_Atendimento_MultiProfissional] FOREIGN KEY ([atenm_codigo]) REFERENCES [dbo].[Atendimento_MultiProfissional] ([atenm_codigo]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[FK_ConsultaEnfermagem_Medicamento_Atendimento_Enfermagem]...';


GO
ALTER TABLE [dbo].[ConsultaEnfermagem_Medicamento] WITH NOCHECK
    ADD CONSTRAINT [FK_ConsultaEnfermagem_Medicamento_Atendimento_Enfermagem] FOREIGN KEY ([atenf_codigo]) REFERENCES [dbo].[Atendimento_Enfermagem] ([atenf_codigo]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[FK_Atendimento_Enfermagem_PROFISSIONAL_REDE]...';


GO
ALTER TABLE [dbo].[Atendimento_Enfermagem] WITH NOCHECK
    ADD CONSTRAINT [FK_Atendimento_Enfermagem_PROFISSIONAL_REDE] FOREIGN KEY ([prof_codigo]) REFERENCES [dbo].[PROFISSIONAL_REDE] ([prof_codigo]);


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[FCN_INTERVALO_DATA]...';


GO
ALTER FUNCTION FCN_INTERVALO_DATA (@DATA DATETIME,@INTERVALO INT)     
RETURNS @resultado1 table(DATA_FORMATADA datetime)    
as    
begin    
 declare @datameianoite datetime    
 set @datameianoite = dateadd(day, 1, @data)    
    WHILE (@data)<@datameianoite    
 BEGIN    
    INSERT INTO  @resultado1    
  SELECT @DATA --CONVERT(VARCHAR(50),@DATA,103) + ' ' + CONVERT(VARCHAR(5),@DATA,108)    
    
  SET @DATA=  DATEADD(HOUR, (@INTERVALO/60), @DATA)    
      
    
 END    
    
    RETURN        
end
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[FCN_INTERVALO_DATA_APRAZAMENTO]...';


GO
ALTER FUNCTION FCN_INTERVALO_DATA_APRAZAMENTO (@DATA DATETIME,@INTERVALO INT, @item_prescricao_id uniqueidentifier)     
RETURNS @resultado1 table(DATA_FORMATADA datetime, item_prescricao_id uniqueidentifier)    
as    
begin    
 declare @datameianoite datetime    
 set @datameianoite = dateadd(day, 1, @data)    
    WHILE (@data)<@datameianoite    
 BEGIN    
    INSERT INTO  @resultado1    
  SELECT @DATA, @item_prescricao_id  --CONVERT(VARCHAR(50),@DATA,103) + ' ' + CONVERT(VARCHAR(5),@DATA,108)    
    
  SET @DATA=  DATEADD(HOUR, (@INTERVALO/60), @DATA)    
      
    
 END    
    
    RETURN        
end
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[knvwAgendaConsultaExame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[knvwAgendaConsultaExame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwAgendaConsultaOpcao4]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwAgendaConsultaOpcao4]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwAgendaConsultaSMS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwAgendaConsultaSMS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwUPA_Painel]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwUPA_Painel]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[PACANAT]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[PACANAT]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_FATURAMENTO_CUSTO_AIH]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_FATURAMENTO_CUSTO_AIH]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CADASTRO_PACIENTE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CADASTRO_PACIENTE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CIRURGIA_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CIRURGIA_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_DADOS_COMPLEMENTARES]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_DADOS_COMPLEMENTARES]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_MITRA_FOTO_PACIENTE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_MITRA_FOTO_PACIENTE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_CID_E_PROCEDIMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_CID_E_PROCEDIMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_MITRA_INTERNACAO_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_MITRA_INTERNACAO_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_PEDIDO_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_PEDIDO_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_PACIENTE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_PACIENTE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwAgendaExameSMS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwAgendaExameSMS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwCegonha]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwCegonha]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwInternacaoOpcao0]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwInternacaoOpcao0]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwLaboratorioRequisicaoOpcao0]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwLaboratorioRequisicaoOpcao0]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VWPACIENTESINTERNADOS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VWPACIENTESINTERNADOS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ACOLHIMENTO_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ACOLHIMENTO_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PARECER_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PARECER_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PARECER_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PARECER_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PEDIDO_PARECER_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PEDIDO_PARECER_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PEDIDO_PARECER_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ITEM_PEDIDO_PARECER_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VWCLINICA_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VWCLINICA_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwClinica_Internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwClinica_Internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VWCLINICA_LEITO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VWCLINICA_LEITO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwClinica_LeitoInternacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwClinica_LeitoInternacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwClinica_Spa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwClinica_Spa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwClinicaSolicitaCirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwClinicaSolicitaCirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwClinicaSolicitaInternacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwClinicaSolicitaInternacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VWENFERMARIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VWENFERMARIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwleito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwleito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VWLEITO_COMPLETO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VWLEITO_COMPLETO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwLocal_Atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwLocal_Atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwLocal_Emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwLocal_Emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwLocal_Todos_Atendimentos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwLocal_Todos_Atendimentos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwLocal_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwLocal_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_ITEM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_ITEM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_PROCEDIMENTOS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_PROCEDIMENTOS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ACOLHIMENTO_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ACOLHIMENTO_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ACOLHIMENTO_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ACOLHIMENTO_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_BI_Leitos_Ope_Atu]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_BI_Leitos_Ope_Atu]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_BI_Leitos_Operaci]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_BI_Leitos_Operaci]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_DETALHE_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_DETALHE_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_DETALHE_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_DETALHE_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EVOL_DETALHE_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EVOL_DETALHE_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EVOL_DETALHE_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EVOL_DETALHE_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_SVITAL_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_SVITAL_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_SVITAL_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_SVITAL_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_LABORATORIO_PEDIDO_EXAME_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_LABORATORIO_PEDIDO_EXAME_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_MITRA_PROCEDIMENTOS_REALIZADOS_ENTIDADE_ITEM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_MITRA_PROCEDIMENTOS_REALIZADOS_ENTIDADE_ITEM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_RADIOLOGIA_EXAME_FILME]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_RADIOLOGIA_EXAME_FILME]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_RADIOLOGIA_EXAME_LAUDO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_RADIOLOGIA_EXAME_LAUDO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_RADIOLOGIA_EXAME_SOLICITADO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_RADIOLOGIA_EXAME_SOLICITADO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_RADIOLOGIA_PEDIDO_EXAME_ATEND]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_RADIOLOGIA_PEDIDO_EXAME_ATEND]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_RADIOLOGIA_PEDIDO_EXAME_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_RADIOLOGIA_PEDIDO_EXAME_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_RADIOLOGIA_PEDIDO_EXAME_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_RADIOLOGIA_PEDIDO_EXAME_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwUPA_Fila_Historico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwUPA_Fila_Historico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KNVW_UNIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KNVW_UNIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ACOLHIMENTO_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ACOLHIMENTO_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MED_PRESCR_OXI_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MED_PRESCR_OXI_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MED_PRESCR_OXI_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MED_PRESCR_OXI_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_PROC_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_PROC_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_PROC_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_PROC_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_E_TERAP_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_DIA_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_DIA_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_DIA_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_DIA_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_IMA_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_IMA_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_IMA_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_IMA_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_LAB_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_LAB_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_LAB_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXA_LAB_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXAMES_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXAMES_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXAMES_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_EXAMES_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_PROC_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_PROC_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_PROC_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_PROC_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_SV_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_SV_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_SV_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_SV_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_APOIO_DIAG_PROCED_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EVOL_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EVOL_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EVOL_SV_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EVOL_SV_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EVOL_SV_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EVOL_SV_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_EVOL_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_EVOL_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_OBITO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_OBITO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_OBITO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_OBITO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_ANAMNESE_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_ANAMNESE_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_ANAMNESE_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_ANAMNESE_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_DECIDUA_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_DECIDUA_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_DECIDUA_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_DECIDUA_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_PERMANENTE_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_PERMANENTE_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_PERMANENTE_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_PERMANENTE_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_REGISTRO_CLINICO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_REGISTRO_CLINICO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_REGISTRO_CLINICO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_REGISTRO_CLINICO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_ODONTO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PARECER_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PARECER_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PARECER_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PARECER_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_MED_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_MED_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_MED_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_MED_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_CE_emer]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_CE_emer]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_CE_urge]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_CE_urge]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_DIE_emer]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_DIE_emer]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_DIE_urge]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_DIE_urge]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_OXI_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_OXI_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_OXI_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_OXI_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_SV_emer]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_SV_emer]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_SV_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_OXI_SV_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_PROC_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_PROC_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRES_PROC_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRES_PROC_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_PRES_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_PRES_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_PRES_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_PRES_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PRESCR_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PROCEDIMENTO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PROCEDIMENTO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_PROCEDIMENTO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_PROCEDIMENTO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_REC_MED_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_REC_MED_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_REC_MED_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_REC_MED_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_REC_REC_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_REC_REC_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_REC_REC_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_REC_REC_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_RECEITA_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_RECEITA_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_RECEITA_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_RECEITA_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_REMOCAO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_REMOCAO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_REMOCAO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_REMOCAO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_SAIDA_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_SAIDA_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_SAIDA_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_SAIDA_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_ATEND_MEDICO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_ATEND_MEDICO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_AVALIACAO_ACOLHIMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_AVALIACAO_ACOLHIMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_AVALIACAO_SVITAIS_ACOLH]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_AVALIACAO_SVITAIS_ACOLH]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CADASTRO_PACIENTE_EXTERNO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CADASTRO_PACIENTE_EXTERNO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CIRURGIA_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CIRURGIA_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CIRURGIA_ENTIDADE_SOLICITACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CIRURGIA_ENTIDADE_SOLICITACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CIRURGIA_PROCEDIMENTOS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CIRURGIA_PROCEDIMENTOS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_ACOLHIMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_ACOLHIMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_ITEM_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_ITEM_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_ITEM_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_ITEM_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_URGE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_AVALIACAO_URGE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_DOENCAS_EMER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_DOENCAS_EMER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_DOENCAS_URGEM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_DOENCAS_URGEM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_CLASS_RISCO_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_CLASS_RISCO_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_EQUIPAMENTO_CIRURGIA_ENTIDADE_ITEM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_EQUIPAMENTO_CIRURGIA_ENTIDADE_ITEM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_EQUIPE_CIRURGIA_ENTIDADE_ITEM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_EQUIPE_CIRURGIA_ENTIDADE_ITEM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INFORMANTE_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INFORMANTE_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INFORMANTE_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INFORMANTE_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_LABORATORIO_EXAME_LAUDO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_LABORATORIO_EXAME_LAUDO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_LABORATORIO_EXAME_SOLICITADO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_LABORATORIO_EXAME_SOLICITADO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_LABORATORIO_PEDIDO_EXAME_ATEND]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_LABORATORIO_PEDIDO_EXAME_ATEND]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_LABORATORIO_PEDIDO_EXAME_ATO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_LABORATORIO_PEDIDO_EXAME_ATO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_MATERIAL_CIRURGIA_ENTIDADE_ITEM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_MATERIAL_CIRURGIA_ENTIDADE_ITEM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_AGENDAMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_AGENDAMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_SOLICITACAO_CIRURGIA_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_MITRA_UNIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_MITRA_UNIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_URGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_URGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwFila_Registro_Urgencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwFila_Registro_Urgencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwRisco_Gravidade_Espera]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwRisco_Gravidade_Espera]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwUPA_Fila_Acolhimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwUPA_Fila_Acolhimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwAtendimentoAmbulatorialOpcao0]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwAtendimentoAmbulatorialOpcao0]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VW_BI_Internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VW_BI_Internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_E_ALTA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_E_ALTA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_PEDIDO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_PEDIDO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_PEDIDO_ENTIDADE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_PEDIDO_ENTIDADE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_INTERNACAO_SAIDA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_INTERNACAO_SAIDA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vw_MITRA_OBSERVACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vw_MITRA_OBSERVACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwAgendaCirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwAgendaCirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwEmergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwEmergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwEmergenciaOpcao0]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwEmergenciaOpcao0]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwPacienteOpcao0]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwPacienteOpcao0]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwPRESCRICAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwPRESCRICAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwPRESCRICAO_MEDICA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwPRESCRICAO_MEDICA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwProntoAtendimentoOpcao0]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwProntoAtendimentoOpcao0]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwSolicitacaoCirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwSolicitacaoCirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[vwSPA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[vwSPA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[VWUrgencia_Emergencia_Internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[VWUrgencia_Emergencia_Internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_UPA_FILA]...';


GO

ALTER PROCEDURE [dbo].[ksp_UPA_FILA]                        
@UNID_CODIGO CHAR (4), @LOCATEND_CODIGO CHAR (4), @PROF_CODIGO CHAR (4), @SPA_CODIGO VARCHAR (12)                        
, @EMER_CODIGO VARCHAR (12)=null, @ACO_CODIGO VARCHAR (12), @DESTINO VARCHAR (100), @ORIGEM CHAR (1)                        
, @RISCO INT, @OPCAO INT, @DATA_INICIAL VARCHAR (20)=NULL, @DATA_FINAL VARCHAR (20)=NULL                        
, @CANCELADOS CHAR (1)='S', @DATA_CANCELAMENTO VARCHAR (20)=NULL                        
, @USUARIO_CODIGO CHAR (4)=NULL, @TP_PESQ INT=NULL, @SPA_NOME VARCHAR (50)=NULL                        
, @PAC_CODIGO CHAR (12)=null, @periodo INT=1, @ATENDAMB_CODIGO CHAR (12)=NULL                        
, @PST_CODIGO CHAR (4)=NULL, @ID_EVENTO INT=11, @ENF_CODIGO CHAR (4)=NULL                        
, @ATEND_CODIGO VARCHAR (12)=NULL, @AGD_SEQUENCIAL CHAR (12)=NULL, @FILTRODIAS INT=null                        
,  @JUSTIFICATIVA VARCHAR (500)=NULL, @NOMESOCIAL VARCHAR(70) = NULL, @PacNomeProntuario varchar(100) = null                        
AS                        
if @periodo = 0  OR @periodo = 365                                                                         
  set @periodo = 30                                                                         
                                                           
 DECLARE @SEQUENCIAL_SEMRISCO INT                                                                                
 DECLARE @PRIMEIRO_SEQUENCIAL_COM_RISCO_1_2_3 INT                                                                                
 DECLARE @PROXIMO_SEQUENCIAL_MESMO_RISCO INT                                                                                        
 DECLARE @RISCO_ATUAL CHAR(1)                                                                                        
 DECLARE @LOCAL_DESTINO VARCHAR(50)                                                                                        
 DECLARE @ESPECIALIDADE_CODIGO VARCHAR(4)                                                                                        
 DECLARE @WSPA_CODIGO          VARCHAR(12)                                                                                        
 DECLARE @FLUXO_ATENDIMENTO CHAR(1)                                                                              
 DECLARE @USA_ACOLHIMENTO CHAR(1)                                                                              
 DECLARE @ETAPA_CLASSIFICACAO CHAR(1)                                                                              
                                                                               
 SELECT @FLUXO_ATENDIMENTO = FLUXO_ATENDIMENTO                                                                               
 FROM UNIDADE WHERE UNID_CODIGO = @UNID_CODIGO                                                                              
                                                                               
 SELECT @USA_ACOLHIMENTO = UNID_USA_ACOLHIMENTO                                                                               
 FROM UNIDADE WHERE UNID_CODIGO = @UNID_CODIGO                                                                              
                                                                               
 SELECT @ETAPA_CLASSIFICACAO = UNID_ETAPA_CLASSIFICACAO                                                                               
 FROM UNIDADE WHERE UNID_CODIGO = @UNID_CODIGO                                                                              
                                                                                         
 -- LOCAL ONDE O PACIENTE ESTÃƒÆ’Ã‚Â SENDO CHAMADO, RECEBIDO OU ATENDIDO                                                                                        
 SELECT @LOCAL_DESTINO=DESTINO                                                                                        
 FROM UPA_FILA                                                                         
 WHERE ACO_CODIGO = @ACO_CODIGO                                        
 IF (@LOCAL_DESTINO IS NULL)                                                                          
 BEGIN                                                                                  
  SET @LOCAL_DESTINO = SUBSTRING(@DESTINO, 1, 30)                                        
 END                                    
                        
 -- ESPECIALIDADE MEDICA                                 
 IF (@ACO_CODIGO IS NOT NULL)                                         
 BEGIN                                                                                        
                                           
   SELECT @WSPA_CODIGO=SPA_CODIGO                                       
   FROM UPA_ACOLHIMENTO                                                                                        
   WHERE ACO_CODIGO = @ACO_CODIGO                                                                                        
                                                                        
   IF (@WSPA_CODIGO IS NOT NULL)                                   
   BEGIN                                                                                        
                                                                       
   SELECT @ESPECIALIDADE_CODIGO=L.LOCATEND_CODIGO                                                                                  
   FROM PRONTO_ATENDIMENTO A                                            
    INNER JOIN VWLOCAL_UNIDADE L ON (A.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                                                                             
   WHERE A.SPA_CODIGO = @WSPA_CODIGO                                                                           
   END                                                                                        
   ELSE                                                                                  
   BEGIN                                                                                        
  SELECT @ESPECIALIDADE_CODIGO=L.LOCATEND_CODIGO                                                             
  FROM UPA_ACOLHIMENTO A                                                                                        
   INNER JOIN VWLOCAL_UNIDADE L ON (A.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                                                                                        
  WHERE A.ACO_CODIGO = @ACO_CODIGO                                                                                    
   END                                                                                        
 END                                                                   
 ELSE                                                                                        
 BEGIN                            SET @ESPECIALIDADE_CODIGO = NULL                                                                                        
 END                                                                                        
                                                                                         
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 -- SELECIONA TODA A FILA                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 IF @OPCAO = 0                                                                                   
 BEGIN                                                                                        
    SELECT FA.ACO_CODIGO,        
    case when fa.nomesocial is null then FA.NOME                        
 else FA.NOMESOCIAL + '[' + FA.NOME + ']'  end as "NOME",                                                                  
    FA.RISCO,                                                     
    LA.SET_DESCRICAO  AS LOC_DESCRICAO,                            
    FA.ACO_DATAHORA AS DATAHORA,                                                                                
    FA.SEQUENCIAL           FROM VWUPA_FILA_ACOLHIMENTO FA                                                                                         
  INNER JOIN VWLOCAL_ATENDIMENTO LA   ON FA.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                                                                                
  WHERE LA.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LA.LOCATEND_CODIGO)                                                                                
    AND LA.UNID_CODIGO = @Unid_Codigo                                                                                 
  ORDER BY FA.RISCO DESC, FA.ACO_IDOSO DESC, FA.PRIORIDADE DESC, FA.ACO_CODIGO ASC                            
 END                                                                                        
                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                         
 -- SALVAR                                                               
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 IF @OPCAO = 1                                                                                        
 BEGIN                                                                                  
 -- RECUPERA O PROXIMO SEQUENCIAL DA FILA DOS MESMO RISCO                                                  
 SELECT  @PROXIMO_SEQUENCIAL_MESMO_RISCO=(ISNULL(MAX(SEQUENCIAL), 0) + 1)                                                                                        
 FROM  VWUPA_FILA                                                                                        
 WHERE  RISCO = @RISCO                                                                                        
                                                                               
 -- CORRIGE O PROXIMO SEQUENCIAL DA FILA DOS MESMO RISCO, CASO NAO EXISTA NINGUEM                                                                                      
 -- COM O MESMO RISCO, PEGANDO UM RISCO SUPERIOR                                          
 IF (@PROXIMO_SEQUENCIAL_MESMO_RISCO = 1)                                                                                      
 BEGIN                                                                                      
  SELECT  @PROXIMO_SEQUENCIAL_MESMO_RISCO=(ISNULL(MAX(SEQUENCIAL), 0) + 1)                                                                                      
  FROM  VWUPA_FILA                                                                                      
  WHERE  RISCO > @RISCO                                                                                      
 END                                                                                      
                                                                                 
  IF (@ACO_CODIGO IS NOT NULL)                                                                                      
  BEGIN                                                                                      
                                                                                
    SELECT @WSPA_CODIGO=SPA_CODIGO                                                                  
    FROM UPA_ACOLHIMENTO                                                                                      
    WHERE ACO_CODIGO = @ACO_CODIGO                                                                                      
                                                               
    IF (@WSPA_CODIGO IS NOT NULL)                                                              
    BEGIN                                                                                    
SELECT @RISCO_ATUAL=RISCO                                                                                      
   FROM UPA_FILA                                      
   WHERE ACO_CODIGO = @ACO_CODIGO                                                                              
    END                                                                                      
  ELSE                                                                              
    BEGIN                                                                                     
   SELECT @RISCO_ATUAL=ACO_RISCO                          
   FROM UPA_FILA F                                                                                  
   INNER JOIN UPA_ACOLHIMENTO A ON F.ACO_CODIGO = A.ACO_CODIGO                                       
   WHERE A.ACO_CODIGO = @ACO_CODIGO                                                                                      
    END                 
  END                                                                    
                                                                                        
  -- NAO ENCONTROU O PACIENTE NA FILA                                                         
  IF (@RISCO_ATUAL IS NULL)                                                                                      
  BEGIN                                                                                 
    -- INCLUI O PACIENTE NA ULTIMA POSICAO DA FILA                          
                                                                                  
  INSERT INTO UPA_FILA (ACO_CODIGO,NOME,NOMESOCIAL,ACO_DATAHORA,ACO_IDOSO,RISCO,SPA_CODIGO,NUM_CHAMADAS,                                                                              
  LOCATEND_CODIGO,DESTINO,DATA_CONFIRMACAO,DATA_CANCELAMENTO,ATENDAMB_CODIGO)                                                        
  SELECT ACO_CODIGO,ACO_NOME,isnull(isnull(@NOMESOCIAL, ACO_NOME_SOCIAL), pa.spa_nome_social),ACO_DATAHORA,ACO_IDOSO,ACO_RISCO,UPA_ACOLHIMENTO.SPA_CODIGO,0,                                                                              
   UPA_ACOLHIMENTO.LOCATEND_CODIGO,NULL,NULL,NULL, @ATENDAMB_CODIGO                                                                        
  FROM UPA_ACOLHIMENTO with(nolock)                        
  left join Pronto_Atendimento pa with(nolock) on UPA_ACOLHIMENTO.spa_codigo = pa.spa_codigo                        
  WHERE ACO_CODIGO = @ACO_CODIGO                                                
                                                                                       
    INSERT INTO UPA_FILA_SEQUENCIAL (ACO_CODIGO, SEQUENCIAL, PRIORIDADE) VALUES (@ACO_CODIGO, @PROXIMO_SEQUENCIAL_MESMO_RISCO, 0)                                                                                       
                                                                                        
    -- INCLUI O REGISTRO NO HISTORICO                                                                                      
    IF (@ACO_CODIGO IS NOT NULL)                                                                                      
    BEGIN                                                           
   INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                      
   VALUES (@ACO_CODIGO, GETDATE(), 1, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                      
    END                 
                                                                                         
  END                                                                 
  ELSE -- ENCONTROU O PACIENTE NA FILA                                     
  BEGIN                                                                        
                                                                                       
   -- ALTERACAO                                                                      
   IF (@RISCO <> @RISCO_ATUAL) -- ALTEROU O RISCO                                                                                      
   BEGIN                                                                                      
  -- ATUALIZA O REGISTRO NA TABELA DE FILA, MUDANDO A SUA POSICAO                                                                                      
   IF (@RISCO_ATUAL = 0 OR @RISCO_ATUAL = 1)                                        
    BEGIN                                                                                     
     UPDATE UPA_FILA SET                                                                                      
     SPA_CODIGO = ISNULL(@SPA_CODIGO, SPA_CODIGO),                                                                                
     EMER_CODIGO = ISNULL(@EMER_CODIGO, EMER_CODIGO),                                                                                    
     DATA_CONFIRMACAO = NULL,                                                          
     RISCO = @RISCO,                                                                              
     LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO,  LOCATEND_CODIGO),                                             
     NOME = ISNULL(@SPA_NOME,  NOME),                        
     NOMESOCIAL = ISNULL(@NOMESOCIAL, NOMESOCIAL),                                                                  
     ATENDAMB_CODIGO = ISNULL(@ATENDAMB_CODIGO, ATENDAMB_CODIGO),                              
     ORIGEM  = ISNULL(@ORIGEM, ORIGEM)                                      
     WHERE  ACO_CODIGO = @ACO_CODIGO                                                                                      
    END                                             ELSE                                                                              
    BEGIN                                                                              
     UPDATE UPA_FILA SET                                                   
    SPA_CODIGO = ISNULL(@SPA_CODIGO, SPA_CODIGO),                                                                              
    EMER_CODIGO = ISNULL(@EMER_CODIGO, EMER_CODIGO),                                                                                      
    DATA_CONFIRMACAO = NULL,                         
    RISCO = @RISCO,                                 
    LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO,  LOCATEND_CODIGO),                                                                                
    NOME = ISNULL(@SPA_NOME,  NOME),                        
    NOMESOCIAL = ISNULL(@NOMESOCIAL, NOMESOCIAL),                                                                    
    ATENDAMB_CODIGO = ISNULL(@ATENDAMB_CODIGO, ATENDAMB_CODIGO),                                      
    ORIGEM  = ISNULL(@ORIGEM, ORIGEM)                                        
   WHERE  ACO_CODIGO = @ACO_CODIGO                                                                                        
    END                                                                              
  -- INCLUI O REGISTRO NO HISTORICO                                                                                      
  IF (@ACO_CODIGO IS NOT NULL)                                                                                      
  BEGIN                                         
   INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                         
   VALUES (@ACO_CODIGO, GETDATE(), 2, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                  
  END               
                                                                             
  END                                                                                      
   ELSE                                                                                      
   BEGIN                                                                      
    -- ATUALIZA O REGISTRO NA TABELA DE FILA                                                              
    UPDATE UPA_FILA SET                                                                                      
    SPA_CODIGO = ISNULL(@SPA_CODIGO, SPA_CODIGO),                                                                               
    EMER_CODIGO = ISNULL(@EMER_CODIGO, EMER_CODIGO),                                                                   
    DATA_CONFIRMACAO = NULL,                                                   
    LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO,  LOCATEND_CODIGO),                                                                              
    NOME = ISNULL(@SPA_NOME,  NOME),                        
    NOMESOCIAL = ISNULL(@NOMESOCIAL, NOMESOCIAL),                                                                    
    ATENDAMB_CODIGO = ISNULL(@ATENDAMB_CODIGO, ATENDAMB_CODIGO),                                      
    ORIGEM  = ISNULL(@ORIGEM, ORIGEM)                                                       
    WHERE ACO_CODIGO = @ACO_CODIGO                                                                              
                                                                                  
    -- INCLUI O REGISTRO NO HISTORICO                                        
    IF (@ACO_CODIGO IS NOT NULL)                                                                                      
    BEGIN                                                        
  INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                      
  VALUES (@ACO_CODIGO, GETDATE(), 3, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                      
    END                                                                                      
   END                                                                               
  END                                                                                      
                                                                                       
 END                                                                                           
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 -- ALTERACAO / CANCELAMENTO                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 IF @OPCAO = 2                                                                                        
 BEGIN                                                                                        
  IF (@ACO_CODIGO IS NOT NULL)                                   
  BEGIN                                                
   DECLARE @WDATA SMALLDATETIME                                                                                        
                                                                                           
   SET @WDATA = CONVERT(SMALLDATETIME, @DATA_CANCELAMENTO, 103)                                                                                        
                        
   -- ATUALIZA A DATA DE CANCELAMENTO                                                 
   UPDATE UPA_FILA                                                           
   SET DATA_CANCELAMENTO = @WDATA,                                                                                        
   DATA_CONFIRMACAO = NULL,                                                                                        
   NUM_CHAMADAS = 0                                                                                        
   WHERE  ACO_CODIGO = @ACO_CODIGO                                      
                                         
   DELETE FROM UPA_PAINEL WHERE ACO_CODIGO = @ACO_CODIGO                                      
                                               
   -- INCLUI O REGISTRO NO HISTÃƒÆ’Ã¢â‚¬Å“RICO                                                                                        
   IF (@WDATA IS NOT NULL)                                                                                        
   BEGIN                                                       
    IF (@ACO_CODIGO IS NOT NULL)                                                                                        
    BEGIN                                                                                          
  INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                      
  VALUES (@ACO_CODIGO, GETDATE(), 4, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                        
    END                                                                                       
   END                                                                                        
   ELSE                                                                                 
   BEGIN                                                                                        
    IF (@ACO_CODIGO IS NOT NULL)                                                                                        
    BEGIN                                                                            
  INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                        
  VALUES (@ACO_CODIGO, GETDATE(), 5, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                        
    END                                                             
   END                                            
  END                                                            
 END                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 -- SELECAO DOS ACOLHIDOS SEM REGISTRO DE SPA - FILA DO REGISTRO                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @OPCAO = 3                                                                  
 BEGIN                                               
 IF (@USA_ACOLHIMENTO = 'S')                                                                              
  BEGIN                                                                                
   IF (@ETAPA_CLASSIFICACAO = 0) -- USA ETAPA DE CLASSIFCACAO                        
   BEGIN                                                 
    IF (@FLUXO_ATENDIMENTO = 0)  -- REGISTRA/CLASSIFICA                                                                       
    BEGIN                                                                              
    SELECT FR.ACO_CODIGO,                           
    FR.SPA_CODIGO,                                                         
    FR.EMER_CODIGO,                                                                                  
    case when pd.id is null then                         
  case when FR.NOMESOCIAL IS NOT NULL THEN                         
   FR.NOMESOCIAL + '[' + FR.NOME + ']'                        
  ELSE                        
   FR.NOME                         
 END                        
 ELSE                        
  case when FR.NOMESOCIAL IS NOT NULL THEN                         
   'DENGUE - ' + FR.NOMESOCIAL + '[' + FR.NOME + ']'                        
  ELSE                        
   'DENGUE - ' + FR.NOME                         
  END                        
 END AS NOME,                            
    FR.RISCO,                                                                                  
    vwLU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                       
    FR.ACO_DATAHORA AS DATAHORA,                                                                               
    FR.SEQUENCIAL,                                                        
    FR.CHAMADA_ATIVA,                                        
    FR.DESTINO,                                                                                  
    FR.IDOSO,                                                                
   FR.CHAMADA_ATIVA2,                                                                
FR.DESTINO2,                        
   '' as TEMPOESPERAMINUTOS,                        
   '' as TEMPOESPERAATENDIMENTO,                        
   '' AS DATAULTIMOATENDIMENTO                                                                
    FROM vwUPA_Fila_Registro_UPA FR                            
    LEFT JOIN PROTOCOLO_DENGUE PD ON PD.ACO_CODIGO = FR.ACO_CODIGO                                                         
    INNER JOIN VWLOCAL_UNIDADE vwLU                                                         
      ON FR.LOCATEND_CODIGO = vwLU.LOCATEND_CODIGO                                                          
  WHERE                         
 vwLU.UNID_CODIGO = @UNID_CODIGO                              
 and DATEDIFF(d,FR.ACO_DATAHORA,GETDATE()) <= isnull(@FiltroDias,1)                        
    ORDER BY FR.RISCO DESC, FR.IDOSO DESC, FR.PRIORIDADE DESC, FR.ACO_CODIGO ASC                                                                                        
   END                                  
   IF (@FLUXO_ATENDIMENTO = 1)  -- CLASSIFICA/REGISTRA                                                           
    /* BEGIN                                             
    SELECT FR.ACO_CODIGO,                                                                                   
    FR.SPA_CODIGO,                                                                                  
    FR.EMER_CODIGO,                                                                                  
    FR.NOME,                                                                                   
    FR.RISCO,                                                                                  
    vwLU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                                  
    FR.ACO_DATAHORA AS DATAHORA,                                                                       
    FR.SEQUENCIAL,                                                 
    FR.CHAMADA_ATIVA,                                                                                  
    FR.DESTINO,           
    FR.IDOSO                                                        
    FROM vwUPA_Fila_Registro FR                                                                                  
    INNER JOIN VWLOCAL_UNIDADE vwLU                                                                                  
    ON FR.LOCATEND_CODIGO = vwLU.LOCATEND_CODIGO                
    ORDER BY FR.RISCO DESC, FR.IDOSO DESC, FR.PRIORIDADE DESC, FR.ACO_CODIGO ASC                            
    END*/                                                                              
   BEGIN                                                                              
    SELECT FR.ACO_CODIGO,                                                                                   
  FR.SPA_CODIGO,                                                                                  
    FR.EMER_CODIGO,                                                       
    CASE WHEN FR.NOMESOCIAL IS NOT NULL THEN                         
  FR.NOMESOCIAL + '[' + FR.NOME + ']'                        
 ELSE                         
  FR.NOME                        
 END AS NOME,                                                                      
    FR.RISCO,                                                                                  
    vwLU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                                  
    FR.ACO_DATAHORA AS DATAHORA,                                                                                  
    FR.SEQUENCIAL,                                                                                  
    FR.CHAMADA_ATIVA,                             
    FR.DESTINO,                                                                                  
 FR.IDOSO,                                                                
   FR.CHAMADA_ATIVA2,                                                                
   FR.DESTINO2,                        
   '' as TEMPOESPERAMINUTOS,                        
   '' as TEMPOESPERAATENDIMENTO,                        
   '' AS DATAULTIMOATENDIMENTO                                                                      
    FROM vwFila_Registro_Urgencia FR INNER JOIN VWLOCAL_UNIDADE vwLU ON FR.LOCATEND_CODIGO = vwLU.LOCATEND_CODIGO                                                                                  
 WHERE vwLU.UNID_CODIGO = @UNID_CODIGO                         
 and DATEDIFF(d,FR.ACO_DATAHORA,GETDATE()) <= isnull(@FiltroDias,1)                           
    ORDER BY FR.RISCO DESC, FR.IDOSO DESC, FR.PRIORIDADE DESC, FR.ACO_CODIGO ASC                                                                            
   END                                                                         
END                                                                              
   IF (@ETAPA_CLASSIFICACAO = 1 OR @ETAPA_CLASSIFICACAO = 2) -- CLASSIFICA NO REGISTRO OU NAO USA ETAPA DE CLASSIFICACAO                                                                              
   BEGIN                                                                              
   SELECT FR.ACO_CODIGO,                                                                                   
   FR.SPA_CODIGO,                                                                           
   FR.EMER_CODIGO,                                                                        
   CASE WHEN FR.NOMESOCIAL IS NOT NULL THEN                        
  FR.NOMESOCIAL + '[' + FR.NOME + ']'                        
   ELSE                        
  FR.NOME                        
   END AS NOME,                                                                                   
   FR.RISCO,                                                                                  
   vwLU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                                  
   FR.ACO_DATAHORA AS DATAHORA,                     
   FR.SEQUENCIAL,                                                                                  
   FR.CHAMADA_ATIVA,                                                                                  
   FR.DESTINO,                                                                                  
   FR.IDOSO,                                                                
   FR.CHAMADA_ATIVA2,                                                                
   FR.DESTINO2,                        
   '' as TEMPOESPERAMINUTOS,                        
   '' as TEMPOESPERAATENDIMENTO,                        
   '' AS DATAULTIMOATENDIMENTO                                                                 
   FROM vwUPA_Fila_Registro_UPA FR INNER JOIN VWLOCAL_UNIDADE vwLU                                                                                  
   ON FR.LOCATEND_CODIGO = vwLU.LOCATEND_CODIGO                                                        
 WHERE vwLU.UNID_CODIGO = @UNID_CODIGO                            
   ORDER BY FR.RISCO DESC, FR.IDOSO DESC, FR.PRIORIDADE DESC, FR.ACO_CODIGO ASC                                                                                        
  END                                                                              
  END                                                                                       
  ELSE                                                                 
  /*                                                                              
  NA0 USA ACOLHIMENTO. O FLUXO INICIA NA URGENCIA OU PELA CLASSIFICACAO DE RISCO                                                                              
  NA FILA DO REGISTRO APARECERAO OS PACIENTES QUE ENTRAM PELA CLASSIFICACAO E AINDA NAO FORAM REGISTRADOS                                                                            
  NA FILA DA CLASSIFICACAO APARECERAO OS PACIENTES QUE FORAM REGISTRADOS COM RISCO                         
  */                                                                              
  IF (@ETAPA_CLASSIFICACAO = 0) -- USA ETAPA DE CLASSIFICACAO                                                                              
  BEGIN                                                                              
   SELECT FR.ACO_CODIGO,                                                                                   
   FR.SPA_CODIGO,                                                                                  
   FR.EMER_CODIGO,                                                  
   CASE WHEN FR.NOMESOCIAL IS NOT NULL THEN                        
  FR.NOMESOCIAL + '[' + FR.NOME + ']'                        
   ELSE                        
  FR.NOME                        
   END AS NOME,                               
   FR.RISCO,                                                                                  
   vwLU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                                  
   FR.ACO_DATAHORA AS DATAHORA,                                                                                  
   FR.SEQUENCIAL,                                                                                  
   FR.CHAMADA_ATIVA,                               
   FR.DESTINO,                                                                                  
   FR.IDOSO,                                                                
  FR.CHAMADA_ATIVA2,                                  FR.DESTINO2                                                                 
   FROM vwFila_Registro_Urgencia FR INNER JOIN VWLOCAL_UNIDADE vwLU ON FR.LOCATEND_CODIGO = vwLU.LOCATEND_CODIGO                                                                               
 WHERE vwLU.UNID_CODIGO = @UNID_CODIGO                             
 and DATEDIFF(d,FR.ACO_DATAHORA,GETDATE()) <= isnull(@FiltroDias,1)                          
   ORDER BY FR.RISCO DESC, FR.IDOSO DESC, FR.PRIORIDADE DESC, FR.ACO_CODIGO ASC                                  
  END                                                                              
  ELSE                                                                              
  BEGIN                                                                              
   SELECT FR.ACO_CODIGO,                                                                                   
   FR.SPA_CODIGO,                                                                                  
   FR.EMER_CODIGO,                                                     
   CASE WHEN FR.NOMESOCIAL IS NOT NULL THEN                        
  FR.NOMESOCIAL + '[' + FR.NOME + ']'                        
   ELSE                         
  FR.NOME                        
   END AS NOME,                                                                                   
   FR.RISCO,                                                                                  
   vwLU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                                  
   FR.ACO_DATAHORA AS DATAHORA,                                                                           
   FR.SEQUENCIAL,                                                
   FR.CHAMADA_ATIVA,                                                                                  
   FR.DESTINO,                                 
   FR.IDOSO,                                                                
  FR.CHAMADA_ATIVA2,                                                                
  FR.DESTINO2,                        
   '' as TEMPOESPERAMINUTOS,                        
   '' as TEMPOESPERAATENDIMENTO,                        
   '' AS DATAULTIMOATENDIMENTO                                                                      
   FROM vwUPA_Fila_Registro FR                                                                                  
   INNER JOIN VWLOCAL_UNIDADE vwLU ON FR.LOCATEND_CODIGO = vwLU.LOCATEND_CODIGO                                                                                  
 WHERE vwLU.UNID_CODIGO = @UNID_CODIGO                         
 and DATEDIFF(d,FR.ACO_DATAHORA,GETDATE()) <= isnull(@FiltroDias,1)                            
   ORDER BY FR.RISCO DESC, FR.IDOSO DESC, FR.PRIORIDADE DESC, FR.ACO_CODIGO ASC                                                                              
  END                                        
 END                                                      
                                                                                         
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 -- PULAR FILA                                                               
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 IF @OPCAO = 4                                                                                        
 BEGIN                                                                                        
                                                                                       
 -- RECUPERA O PRIMEIRO SEQUENCIAL DA FILA DOS COM RISCO 1 E 2                                                                                        
  SELECT  @PRIMEIRO_SEQUENCIAL_COM_RISCO_1_2_3=ISNULL(MIN(SEQUENCIAL), 1)                                                    
  FROM  VWUPA_FILA                                 
  WHERE  convert(int,RISCO) <= (select risaco_gravidade from vwRisco_Gravidade_Espera)                               
                                                                                       
  DECLARE @SEQUENCIAL INT                                                                                
  DECLARE @PRIORIDADE INT                                                                                
                                                                                          
  -- RECUPERA O RISCO E O SEQUENCIAL                                                                                        
  SELECT  @RISCO=RISCO, @SEQUENCIAL=SEQUENCIAL                                
  FROM VWUPA_FILA                                                                                        
  WHERE ACO_CODIGO=@ACO_CODIGO                                                                                  
                                                                         
                                                                                         
  IF (@RISCO >= 1)                                                                    
  BEGIN                                                                                        
   -- COLOCA O REGISTRO COMO PRIMEIRO DA FILA DOS COM RISCO                                                                                        
                          
   SELECT @PRIORIDADE = (ISNULL(MAX(PRIORIDADE), 0))                                                                                        
   FROM VWUPA_FILA                                                          
   WHERE convert(int,RISCO) <= (select risaco_gravidade from vwRisco_Gravidade_Espera)                                                                              
                                                                                         
   -- COLOCA O REGISTRO COMO PRIMEIRO DA FILA DOS SEM RISCO                                                                                        
   UPDATE  UPA_FILA_SEQUENCIAL SET                                          
  PRIORIDADE = @PRIORIDADE + 1                                                                                
   WHERE  ACO_CODIGO = @ACO_CODIGO                                                                                    
                                                                                   
   -- INCLUI O REGISTRO NO HISTÃƒÆ’Ã¢â‚¬Å“RICO                                         
   IF (@ACO_CODIGO IS NOT NULL)                                                                                        
   BEGIN                                                                                          
    INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                        
 VALUES (@ACO_CODIGO, GETDATE(), 6, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                     
   END                                                  
  END                                                                                        
  ELSE                                                                                        
  BEGIN                                                     
   SELECT @PRIORIDADE = (ISNULL(MAX(PRIORIDADE), 0))                                                                                        
   FROM VWUPA_FILA                                                                    
   WHERE RISCO = '0' OR IDOSO = 1                                                                                      
                                                                                         
   -- COLOCA O REGISTRO COMO PRIMEIRO DA FILA DOS SEM RISCO                                                                                        
   UPDATE  UPA_FILA_SEQUENCIAL SET                                                                                        
  PRIORIDADE = @PRIORIDADE + 1                                                                                
   WHERE  ACO_CODIGO = @ACO_CODIGO         
                                                                                         
   -- INCLUI O REGISTRO NO HISTÃƒÆ’Ã¢â‚¬Å“RICO                                                          
   IF (@ACO_CODIGO IS NOT NULL)                                                                                        
   BEGIN                                                                                          
    INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                             
    VALUES (@ACO_CODIGO, GETDATE(), 7, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                          
   END                                                          
  END                                                                                        
 END                                                                                        
                                                                                      
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 -- CHAMAR O PACIENTE                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                 
 IF @OPCAO = 5                                                   
 BEGIN                                     
                                                                 
  DECLARE @DESTINO_CHAMADO VARCHAR(50)                                                                
                                                                 
  IF ( @ATENDAMB_CODIGO IS NULL )                                                                
  BEGIN                                                                 
    SELECT @DESTINO_CHAMADO = DESTINO                                                                 
    FROM VWUPA_FILA                                                                 
    WHERE ACO_CODIGO = @ACO_CODIGO                                                                
  AND  ((CHAMADA_ATIVA = 1 OR DATA_CONFIRMACAO IS NOT NULL)                            
  OR (@ORIGEM = 'R' AND SPA_CODIGO IS NOT NULL)                      
  OR (@ORIGEM = 'C' AND SPA_CODIGO IS NOT NULL AND ORIGEM = 'C')                            
  )                            
  END                                                                 
                                       
  ELSE                                                                
  BEGIN                                                                  
    SELECT @DESTINO_CHAMADO = DESTINO                                                            
    FROM UPA_FILA f                                                                
   INNER JOIN UPA_FILA_SEQUENCIAL fs ON f.ACO_CODIGO = fs.ACO_CODIGO                                                                
   LEFT OUTER JOIN UPA_PAINEL pn ON pn.ACO_CODIGO = fs.ACO_CODIGO                                                                
    WHERE f.ACO_CODIGO = @ACO_CODIGO                                                                
   AND f.DATA_CANCELAMENTO IS NULL                                  
   AND f.ATENDAMB_CODIGO IS NOT NULL                                                
   AND ((pn.ACO_CODIGO IS NOT NULL AND f.NUM_CHAMADAS > 0) OR (f.DATA_CONFIRMACAO IS NOT NULL))                                                
  END                                      
                                                                 
                                                                 
  IF (@@ROWCOUNT = 0)    
  BEGIN                                                                 
   -- ***************************************                                                                                        
   -- SELECIONA OS PARAMETROS DE CONFIGURACAO                                                                                        
   -- ***************************************                                                          
   DECLARE @NUM_CHAMADAS INT                             
   DECLARE @NUM_REPETICOES INT                                                                                        
                                                                                           
   SELECT TOP 1                                                             
    @NUM_REPETICOES = ISNULL(NUMERO_REPETICOES, 1)                                                                      
   FROM UPA_FILA_CONFIG                                                                                        
                                                                                           
   SELECT @NUM_CHAMADAS = NUM_CHAMADAS                                                                                        
   FROM UPA_FILA                                            
   WHERE ACO_CODIGO = @ACO_CODIGO                                                                                        
                                          
   IF (@NUM_CHAMADAS < @NUM_REPETICOES)                                                                                        
   BEGIN                                                                 
    -- INSERE O PACIENTE PARA CHAMA-LO AO PAINEL                                                                                        
                                                                                         
   DELETE FROM UPA_PAINEL WHERE ACO_CODIGO = @ACO_CODIGO                                                                                
                                               
   INSERT INTO UPA_PAINEL                                                                                        
   (ACO_CODIGO, ORIGEM, DATA_CHAMADA, DATA_PRIMEIRA_EXIBICAO)                                                                              
   VALUES                          (@ACO_CODIGO, @ORIGEM, GETDATE(), NULL)                                                                                
                                                                       
   -- ATUALIZA O NUMERO DE CHAMADAS                            
   UPDATE UPA_FILA SET                                                                           
   NUM_CHAMADAS = NUM_CHAMADAS + 1,                                                                                        
   DATA_CONFIRMACAO = NULL,                                                                                
   DESTINO = @DESTINO                                                                                        
   WHERE ACO_CODIGO = @ACO_CODIGO                                                           
                         
  -- INCLUI O REGISTRO NO HISTORICO                                                                                        
  IF (@ACO_CODIGO IS NOT NULL)                                                                          
  BEGIN                                                                                          
   INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                  
   VALUES (@ACO_CODIGO, GETDATE(), 8, @DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                        
  END                                                                      
                                                                                            
    -- RETORNO                                                                                      
    SELECT ''                                                
   END                               
                                                                             
   ELSE                                 
  BEGIN                                                                                        
    -- NUMERO DE CHAMADAS NO PAINEL ESGOTADAS                                                                                        
    -- ATUALIZA O NUMERO DE CHAMADAS                                                                                   
 UPDATE UPA_FILA SET                                                                              
 DATA_CANCELAMENTO = GETDATE()                                                        
 WHERE ACO_CODIGO = @ACO_CODIGO                                                                  
                                                                                    
    -- INCLUI O REGISTRO NO HISTORICO                                                                                        
    IF (@ACO_CODIGO IS NOT NULL)                                                                                        
  BEGIN                                                                  
   INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                        
   VALUES (@ACO_CODIGO, GETDATE(), 9, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                  
  END                                                                                
                                                                                          
  -- RETORNO                                                                                        
  SELECT 'ESTE PACIENTE FOI RETIRADO DA FILA POIS ATINGIU O NUMERO MAXIMO DE ' + CONVERT(VARCHAR, @NUM_CHAMADAS) + ' CHAMADAS NO PAINEL. UTILIZE A FUNÃƒâ€¡ÃƒÆ’O DE ADMINISTRAÃƒâ€¡ÃƒÆ’O DA FILA PARA RETORNA-LO.'                                            
  
                          
                                                
 END                                                                                        
                                       
  END                                                                                        
  ELSE                                                                                        
 BEGIN                                                 
  SELECT 'ESTE PACIENTE JA ESTA SENDO CHAMADO POR ' + @DESTINO_CHAMADO + '.'                                                    
 END                                                
  END                                                                             
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                  -- ENCERRAR PACIENTE NA FILA                                                       
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                              
 IF @OPCAO = 6                                                                                        
 BEGIN                                                                                        
                                    
  DELETE FROM UPA_PAINEL                                                                                        
  WHERE ACO_CODIGO = @ACO_CODIGO                                          
                                                                                  
  DELETE FROM UPA_FILA_SEQUENCIAL                                              
  WHERE ACO_CODIGO = @ACO_CODIGO                                                                                        
                                                                                  
  DELETE FROM UPA_FILA                                                                                        
  WHERE ACO_CODIGO = @ACO_CODIGO                                                                                
                                                                                  
  -- INCLUI O REGISTRO NO HISTORICO                                                                                        
  IF (@ACO_CODIGO IS NOT NULL)                                               
  BEGIN                                                                                        
   INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                         
   VALUES (@ACO_CODIGO, GETDATE(), 10, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                        
                        
   IF(@ORIGEM IS NOT NULL AND UPPER(@ORIGEM) = 'D')                        
   BEGIN                        
                          
  DECLARE @WDATA_AUX SMALLDATETIME                        
  SET @WDATA_AUX = CONVERT(SMALLDATETIME, @DATA_CANCELAMENTO, 103)                        
                        
  INSERT INTO FILA_CANCELAMENTO(USU_CODIGO, ACO_CODIGO, JUSTIFICATIVA, DATA_HORA, LOCAL_ORIGEM_EXCLUSAO,EXT_CANCELAMENTO_CODIGO)                        
  VALUES(@USUARIO_CODIGO, @ACO_CODIGO, @JUSTIFICATIVA, @WDATA_AUX, 'ADMINISTRACAO DE FILA','0015')                        
                        
   END                        
                          
  END                                                             
                                  
 END                                                               
                                                                                         
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 -- FILA PARA CLASSIFICACAO DE RISCO                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 IF @OPCAO = 7                                                                             
 BEGIN                                                            
 SELECT FC.ACO_CODIGO,                                                                                         
  FC.SPA_CODIGO,                                                                                 
  FC.EMER_CODIGO,                                                 
  case when pd.id is null then                         
   case when fc.nomesocial is not null then fc.nomesocial + '['+ FC.NOME + ']' else FC.NOME end                        
  ELSE 'DENGUE - ' + case when fc.nomesocial is not null then fc.nomesocial + '['+ FC.NOME + ']' else FC.NOME end                        
  END AS NOME,                        
  FC.RISCO,                                                                                 
  CASE WHEN (LAPA.LOCATEND_CODIGO IS NOT NULL)                                                                                        
    THEN LAPA.SET_DESCRICAO                                                                                        
    ELSE LAAC.SET_DESCRICAO                                                                                        
  END AS LOC_DESCRICAO,                                                                                        
  AC.ACO_DATAHORA AS DATAHORA,                                                                                        
  FC.SEQUENCIAL,                                         
  FC.CHAMADA_ATIVA,                                                                                        
  FC.DESTINO,                                       
  FC.IDOSO,                                                          
  FC.CHAMADA_ATIVA2,                                                          
  FC.DESTINO2,                        
  '' as TEMPOESPERAMINUTOS,                        
  '' as TEMPOESPERAATENDIMENTO,                        
  '' AS DATAULTIMOATENDIMENTO                                     
 FROM VWUPA_FILA_CLASSIFICACAO_RISCO FC                                 
  LEFT OUTER JOIN PRONTO_ATENDIMENTO PA ON ( FC.SPA_CODIGO = PA.SPA_CODIGO and pa.spa_chegada > dateadd(d, -@periodo, getdate()) )                                                                             
INNER JOIN UPA_ACOLHIMENTO AC ON ( FC.ACO_CODIGO = AC.ACO_CODIGO  and ac.aco_datahora > dateadd(d, -@periodo, getdate()) )                                                                                              
  LEFT JOIN PROTOCOLO_DENGUE PD ON PD.ACO_CODIGO = AC.ACO_CODIGO                            
  INNER JOIN VWCLINICA_SPA LAAC ON AC.LOCATEND_CODIGO = LAAC.LOCATEND_CODIGO                                                      
  LEFT OUTER JOIN VWCLINICA_SPA LAPA ON PA.LOCATEND_CODIGO = LAPA.LOCATEND_CODIGO                        
  LEFT JOIN UNIDADE U ON U.UNID_CODIGO = @UNID_CODIGO                        
 WHERE (                        
   (LAAC.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LAAC.LOCATEND_CODIGO) AND LAPA.LOCATEND_CODIGO IS NULL)                         
    OR                        
   (LAPA.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LAPA.LOCATEND_CODIGO) AND LAPA.LOCATEND_CODIGO IS NOT NULL)                        
  )                        
  AND  AC.UNID_CODIGO=@UNID_CODIGO                        
  --AND (                        
   --(U.Fluxo_Atendimento = 0 AND PA.spa_codigo IS NOT NULL) --Registra e Classifica                        
  --OR (U.Fluxo_Atendimento = 1 AND PA.spa_codigo IS NULL) --Classifica e Registra                        
  --)                        
 ORDER BY FC.PRIORIDADE DESC, FC.ACO_CODIGO ASC                                                                                
                                                                                  
 END                                                                                        
                                                       
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                    
 -- PACIENTES EM OBSERVACAO E AGUARDANDO LEITO --                                                                                        
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- Atender o Paciente                                             
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @opcao = 9                                                                     BEGIN                                                                                  
                                                                                 
  -- Remove o paciente do painel            
  DELETE FROM UPA_Painel                                                                                   
  WHERE ACO_CODIGO = @ACO_CODIGO                                                
                                                                                 
  -- Atualiza o numero de chamadas                                                                                  
  UPDATE UPA_FILA SET                                     
   NUM_CHAMADAS = 0,                                                                                  
   DATA_CONFIRMACAO = GETDATE()                                                                                  
  WHERE ACO_CODIGO = @ACO_CODIGO                                                                                
                                         
 -- Inclui o registro no historico                               
  IF (@ACO_CODIGO IS NOT NULL)                                                                                  
  BEGIN                                                             
  IF (@ID_EVENTO IS NULL)                                                      
   SET @ID_EVENTO = 11                                                      
   INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                  
   VALUES (@ACO_CODIGO, GETDATE(), @ID_EVENTO, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                               
  END                                                                                  
                                                                   
 END                              
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- PROFISSIONAL/ESPECIALIDADE COM ATENDIMENTOS EM ABERTO                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @opcao = 10                                                                                  
 BEGIN                                                                                  
 SELECT X.SPA_CODIGO, X.NOME, X.LOC_DESCRICAO,                                                                                  
   X.PROF_NOME, X.LOCATEND_CODIGO, X.PROF_CODIGO,                                                                                   
   Y.TOTALSEMRETORNO, Z.TOTALCOMRETORNO, W.UPAENC_PRIORIDADE, W.UPAENC_DATAENCAMINHADO, '0' AS TIPO,                             
   X.ATENDAMB_CODIGO,                                  
   xpto.TOTALPRESCRICAO,                                                                                   
   xpt.TOTALPRESCFECHADA,                                          
   x.LaudoLiberado,                        
   X.LAUDOLIBERADO_R as TotalLaudoLiberadoRadiologia,                        
   X.LAUDOLIBERADO_D AS TotalLaudoLiberadoDiagnose--,                        
   --kl.TOTALLAUDOLABORATORIO AS TotalLaudoLaboratorio                                          
                                           
 FROM                                                                                   
   (SELECT  PA.SPA_CODIGO AS [SPA_CODIGO],                                                                                   
   case when pd.id is null then                         
  case when pac.pac_nome_social is not null or pa.spa_nome_social is not null then isnull(pac.pac_nome_social, pa.spa_nome_social) + '[' + ISNULL(PAC.PAC_NOME, PA.SPA_NOME) + ']'                        
  else ISNULL(PAC.PAC_NOME, PA.SPA_NOME) end                        
 else                        
  'DENGUE - ' + case when pac.pac_codigo is not null or pa.spa_nome_social is not null then isnull(pac.pac_nome_social, pa.spa_nome_social) + '[' + ISNULL(PAC.PAC_NOME, PA.SPA_NOME) + ']'                        
  else ISNULL(PAC.PAC_NOME, PA.SPA_NOME) end                        
 END AS NOME,                            
   LA.SET_DESCRICAO AS LOC_DESCRICAO,                                                                                  
   PROF.PROF_NOME,                                                            
   AA.LOCATEND_CODIGO,                                                                                  
   AA.PROF_CODIGO,                               
   AA.atendamb_codigo,                                          
   LaudoLab.TotalLaudoLiberado as LaudoLiberado,                        
   LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia AS LAUDOLIBERADO_R,                        
   LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose AS LAUDOLIBERADO_D                                      
                                                              
  FROM  PRONTO_ATENDIMENTO PA                                                          
   INNER JOIN ATENDIMENTO_AMBULATORIAL AA ON PA.SPA_CODIGO = AA.SPA_CODIGO                                                                                  
   INNER JOIN UPA_Atendimento_Medico AM on AA.atendamb_CODIGO = AM.atendamb_CODIGO                                                  
   INNER JOIN PROFISSIONAL prof on (prof.prof_codigo = AA.prof_codigo and prof.locatend_codigo = AA.locatend_codigo)                                                                                  
   INNER JOIN VWCLINICA_SPA LA ON PA.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                                                                                    
   LEFT JOIN PROTOCOLO_DENGUE PD ON PD.SPA_CODIGO = PA.SPA_CODIGO                            
   LEFT JOIN (                            
  SELECT DISTINCT solped_CodigoOrigem, count(*) as TotalLaudoLiberado                             
  from vwsolicitacao_pedido vsp2                             
   left join Exame_solicitado_laboratorio esl on esl.pedexalab_codigo = vsp2.solped_codigopedido                           
  where (esl.exasollab_status  in ('LA','LI')) and vsp2.oripac_codigo = 5                             
  group by solped_CodigoOrigem                            
   ) LaudoLab on pa.spa_codigo = LaudoLab.solped_CodigoOrigem                                      
   left join paciente pac on pac.pac_codigo = pa.pac_codigo                         
                           
   LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoRadiologia                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 AND VSP.solped_TipoSolicitacao = '8'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_RADIOLOGIA ON PA.SPA_CODIGO = LAUDOLAB_RADIOLOGIA.SOLPED_CODIGOORIGEM                        
                        
   LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoDiagnose                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 and VSP.solped_TipoSolicitacao = '9'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_DIAGNOSE ON PA.SPA_CODIGO = LAUDOLAB_DIAGNOSE.SOLPED_CODIGOORIGEM                                 
                                         
 WHERE AA.ATENDAMB_DATAFINAL IS NULL                                                                                  
   AND (AM.TIPSAI_CODIGO <> 5 OR AM.TIPSAI_CODIGO IS NULL) --AM.TIPSAI_CODIGO NOT IN (5)                                                                                  
   AND (AM.TIPSAI_CODIGOENCAMINHAMENTO <> 5 OR AM.TIPSAI_CODIGOENCAMINHAMENTO  IS NULL)--AM.TIPSAI_CODIGOENCAMINHAMENTO NOT IN (5)                                                                           
   AND AA.PROF_CODIGO = @PROF_CODIGO                        
   AND PA.unid_codigo = @UNID_CODIGO                                                                                                                  
   AND NOT EXISTS (SELECT 1 FROM INTERNACAO I                                                         
  WHERE I.SPA_CODIGO = PA.SPA_CODIGO)) X                          
                          
 -- LEFT JOIN                        
                        
 --(SELECT DISTINCT SOLPED_CODIGOORIGEM, ORIPAC_CODIGO, COUNT(*) AS TOTALLAUDOLABORATORIO                        
 --  FROM SOLICITACAO_PEDIDO_EXAME SPE with (nolock)                        
 --  INNER JOIN VWSOLICITACAO_PEDIDO SP ON SPE.PED_CODIGO = SP.PED_CODIGO                        
 --  INNER JOIN EXAME_SOLICITADO_LABORATORIO EL ON SPE.SOLPEDEXA_CODIGO_EXAME = EL.EXALAB_CODIGO                        
 --  AND SP.SOLPED_CODIGOPEDIDO = EL.PEDEXALAB_CODIGO AND SP.SOLPED_TIPOSOLICITACAO = 7 AND (EL.EXASOLLAB_STATUS = 'LA' OR EL.EXASOLLAB_STATUS  = 'LI')                        
 --  GROUP BY SOLPED_CODIGOORIGEM, ORIPAC_CODIGO) KL                        
 --  ON (KL.SOLPED_CODIGOORIGEM = X.SPA_CODIGO AND KL.ORIPAC_CODIGO = 5)                                                                                
                                                                                 
 LEFT JOIN                                                                                  
                                                                                 
 (SELECT SPA_CODIGO, UPAENC_PRIORIDADE, UPAENC_DATAENCAMINHADO                                                                
 FROM UPA_ENCAMINHAMENTO                                                                                  
 WHERE UPATIPENC_CODIGO = 3                                                                                  
 AND UPAENC_DATARETORNO IS NULL) W                                                                                  
                                     
 ON W.SPA_CODIGO = X.SPA_CODIGO                                                                                  
                                           
 LEFT JOIN                                                                                  
                                                                                 
 (SELECT SPA_CODIGO, COUNT(*) AS TOTALSEMRETORNO                                                                                  
 FROM UPA_ENCAMINHAMENTO                                   
 WHERE UPAENC_DATARETORNO IS NULL                                                                                  
 GROUP BY SPA_CODIGO) Y                                            
                                                                                 
 ON X.SPA_CODIGO = Y.SPA_CODIGO                                                                                  
                                                                                 
 LEFT JOIN (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALCOMRETORNO                                                                          
 FROM UPA_ENCAMINHAMENTO                                                                                  
 WHERE UPAENC_DATARETORNO IS NOT NULL                                                                                  
 GROUP BY SPA_CODIGO) Z ON X.SPA_CODIGO = Z.SPA_CODIGO                                                                                  
                                                               
   LEFT JOIN                                                            
                                                                                 
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCRICAO                                       
   FROM PRESCRICAO                                  
   WHERE PRESC_TIPO = 'P'                                 
GROUP BY SPA_CODIGO) XPTO ON X.SPA_CODIGO = XPTO.SPA_CODIGO                                                                                  
                                                               
   LEFT JOIN                                                                                   
                                                                                 
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCFECHADA                                                                                   
   FROM PRESCRICAO                                                                                   
   WHERE idt_fechada = 'S'                                     
   and PRESC_TIPO = 'P'                                                                
   GROUP BY SPA_CODIGO) XPT ON X.SPA_CODIGO = XPT.SPA_CODIGO                                                                                  
                                                               
                                                               
                                                                                 
 UNION                                                                                  
                           
 SELECT X.SPA_CODIGO, X.NOME, X.LOC_DESCRICAO,                                                                 
   X.PROF_NOME, X.LOCATEND_CODIGO, X.PROF_CODIGO,                                                                                   
   NULL, NULL, W.UPAENC_PRIORIDADE, W.UPAENC_DATAENCAMINHADO, '1' AS TIPO,                                                                    
   X.ATENDAMB_CODIGO,                                                                       
   xpto.TOTALPRESCRICAO,                                                              
   xpt.TOTALPRESCFECHADA,                                          
   x.LaudoLiberado,                        
   X.LAUDOLIBERADO_R as TotalLaudoLiberadoRadiologia,                        
   X.LAUDOLIBERADO_D AS TotalLaudoLiberadoDiagnose--,                        
   --kl.TOTALLAUDOLABORATORIO AS TotalLaudoLaboratorio                                          
                              
  FROM                                                                                   
 (                                                                                  
 SELECT  PA.SPA_CODIGO AS [SPA_CODIGO],                                                        
   case when pd.id is null then ISNULL(PAC.PAC_NOME, PA.SPA_NOME) ELSE                              
   'DENGUE - ' + ISNULL(PAC.PAC_NOME, PA.SPA_NOME) END AS NOME,                                                               
   LA.SET_DESCRICAO AS LOC_DESCRICAO,                                                                           
   PROF.PROF_NOME,                                                                                  
   AA.LOCATEND_CODIGO,                                                          
   AA.PROF_CODIGO,                                                 
   AA.ATENDAMB_CODIGO,                                          
   LaudoLab.TotalLaudoLiberado as LaudoLiberado,                        
   LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia AS LAUDOLIBERADO_R,                        
   LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose AS LAUDOLIBERADO_D                                      
                                                                                 
  FROM  PRONTO_ATENDIMENTO PA                                                
   INNER JOIN ATENDIMENTO_AMBULATORIAL AA ON PA.SPA_CODIGO = AA.SPA_CODIGO                                                                                  
   INNER JOIN UPA_Atendimento_Medico AM on AA.atendamb_CODIGO = AM.atendamb_codigo                                                                                  
   INNER JOIN PROFISSIONAL prof on (prof.prof_codigo = AA.prof_codigo and prof.locatend_codigo = AA.locatend_codigo)                                                      
   INNER JOIN VWCLINICA_SPA LA ON PA.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                                                                                    
   LEFT JOIN PROTOCOLO_DENGUE PD ON PD.SPA_CODIGO = PA.SPA_CODIGO                            
   LEFT JOIN (                            
  SELECT DISTINCT solped_CodigoOrigem, count(*) as TotalLaudoLiberado                             
  from vwsolicitacao_pedido vsp2                        
   left join Exame_solicitado_laboratorio esl on esl.pedexalab_codigo = vsp2.solped_codigopedido and esl.exasollab_status  in ('LA','LI')                            
  where (vsp2.laudoliberado = 'L' or esl.exalab_codigo is not null) and vsp2.oripac_codigo = 5                             
  group by solped_CodigoOrigem                            
   ) LaudoLab on pa.spa_codigo = LaudoLab.solped_CodigoOrigem                                     
   left join paciente pac on pac.pac_codigo = pa.pac_codigo                           
                           
   LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoRadiologia                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 AND VSP.solped_TipoSolicitacao = '8'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_RADIOLOGIA ON PA.SPA_CODIGO = LAUDOLAB_RADIOLOGIA.SOLPED_CODIGOORIGEM                        
                        
   LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoDiagnose                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 and VSP.solped_TipoSolicitacao = '9'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_DIAGNOSE ON PA.SPA_CODIGO = LAUDOLAB_DIAGNOSE.SOLPED_CODIGOORIGEM                               
                                                                                 
 WHERE AA.ATENDAMB_DATAFINAL IS NULL                                                                                  
   AND (AM.TIPSAI_CODIGO <> 5 OR AM.TIPSAI_CODIGO IS NULL) --AM.TIPSAI_CODIGO NOT IN (5)                                                     
   AND (AM.TIPSAI_CODIGOENCAMINHAMENTO <> 5 OR AM.TIPSAI_CODIGOENCAMINHAMENTO  IS NULL)--AM.TIPSAI_CODIGOENCAMINHAMENTO NOT IN (5)                                                                                  
   AND PA.unid_codigo = @UNID_CODIGO                                                                                  
   AND NOT EXISTS (SELECT 1 FROM INTERNACAO I                                                                                  
     WHERE I.SPA_CODIGO = PA.SPA_CODIGO)) X                                                                                  
                                                    
 INNER JOIN                                                     
                                                                                 
 (SELECT Y.SPA_CODIGO, Z.UPAENC_PRIORIDADE, Z.UPAENC_DATAENCAMINHADO                                                                                  
 FROM                                                                                   
 (SELECT DISTINCT SPA_CODIGO                                                                           
  FROM UPA_ENCAMINHAMENTO                                                                                  
  WHERE EXISTS (SELECT 1 FROM PROFISSIONAL_LOTACAO WHERE PROF_CODIGO = @PROF_CODIGO AND LOCATEND_CODIGO = LOCATEND_CODIGO_DESTINO)                                                                                    
   AND PROF_CODIGO_ORIGEM <> @PROF_CODIGO                                                                                  
  AND UPAENC_DATARETORNO IS NULL) Y                                                     
 LEFT JOIN                   
                                
 (SELECT SPA_CODIGO, UPAENC_PRIORIDADE, UPAENC_DATAENCAMINHADO                                                                                  
 FROM UPA_ENCAMINHAMENTO                                                                                  
 WHERE UPATIPENC_CODIGO = 3                                                             
 AND EXISTS (SELECT 1 FROM PROFISSIONAL_LOTACAO WHERE PROF_CODIGO = @PROF_CODIGO AND LOCATEND_CODIGO = LOCATEND_CODIGO_DESTINO)                                  
 AND PROF_CODIGO_ORIGEM <> @PROF_CODIGO                                                                                  
 AND UPAENC_DATARETORNO IS NULL) Z                                                                                  
                                                                                 
 ON Y.SPA_CODIGO = Z.SPA_CODIGO) W ON X.SPA_CODIGO = W.SPA_CODIGO                                                                
                                                               
   LEFT JOIN                                                                                   
                                                                                 
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCRICAO      
   FROM PRESCRICAO                                                   
   GROUP BY SPA_CODIGO) XPTO ON X.SPA_CODIGO = XPTO.SPA_CODIGO                                                                  
                                                               
   LEFT JOIN                                                                                   
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCFECHADA                                                                                   
   FROM PRESCRICAO                                                                                   
   WHERE idt_fechada = 'S'                                   
   GROUP BY SPA_CODIGO) XPT ON X.SPA_CODIGO = XPT.SPA_CODIGO                                                                                  
                                                               
                                                                                 
 ORDER BY UPAENC_PRIORIDADE DESC, UPAENC_DATAENCAMINHADO, X.SPA_CODIGO DESC                                                                                 
                                                                                 
 END                                                                                  
                                    
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                           
 -- Pegar o proximo da fila                                                                                  
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- Seleciona os pacientes da fila para Atendimento                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                       
 if @opcao = 12                                
 BEGIN                                                                                  
                                                                                 
 SELECT  F.SPA_CODIGO,                                                                                    
  NULL AS EMER_CODIGO,                            
  F.ACO_CODIGO,                                     
  case when pd.id is null                         
   THEN ISNULL(PAC.PAC_NOME, F.NOME)                         
   ELSE 'DENGUE - ' + F.NOME END AS NOME,                        
  ISNULL(UCR.upaclaris_risco,'0') AS RISCO,                        
  LA.LOCATEND_CODIGO AS LOC_CODIGO,                        
  LA.SET_DESCRICAO AS LOC_DESCRICAO,                        
  F.ACO_DATAHORA AS DATAHORA,                        
  F.SEQUENCIAL,                        
  F.CHAMADA_ATIVA,                        
  F.DESTINO,                        
  UE.SPA_CODIGO_DESTINO,                        
  CASE WHEN (ISNULL(SPA.SPA_IDADE,0) >= 60) THEN '1' ELSE F.IDOSO END AS IDOSO,                        
  F.CHAMADA_ATIVA2,                        
  F.DESTINO2,                        
  DATEDIFF(MINUTE,F.ACO_DATAHORA,GETDATE()) as TEMPOESPERAMINUTOS, --'' as TEMPOESPERAMINUTOS,                        
  CASE                        
  when  F.ACO_DATAHORA IS NOT NULL THEN                        
   CASE                         
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) <> 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) <> 0                        
    THEN                         
     convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) + ' Dia(s): ' +                         
     convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) + ' Hora(s): '+                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
                        
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) = 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) <> 0                        
    THEN                        
     convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) + ' Hora(s): '+                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
                        
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) <> 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) = 0                        
    THEN                        
     convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) + ' Dia(s): ' +                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
                        
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) = 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) = 0                        
    THEN                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
   END                        
  End AS TEMPOESPERAATENDIMENTO,--'' as TEMPOESPERAATENDIMENTO,                        
  FPU.DATA_ULTIMO_ATENDIMENTO AS DATAULTIMOATENDIMENTO --'' AS DATAULTIMOATENDIMENTO                         
    FROM PRONTO_ATENDIMENTO SPA                        
  INNER JOIN VWLOCAL_ATENDIMENTO LA ON SPA.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                        
  INNER JOIN vwUPA_FILA_atendimento F ON F.SPA_CODIGO=SPA.SPA_CODIGO                        
  LEFT JOIN UPA_CLASSIFICACAO_RISCO UCR ON F.ACO_CODIGO= CONVERT(INT,UCR.ACO_CODIGO)                        
  LEFT JOIN UPA_ENCAMINHAMENTO UE ON UE.LOCATEND_CODIGO_DESTINO = SPA.LOCATEND_CODIGO                        
  AND UE.SPA_CODIGO_DESTINO = SPA.SPA_CODIGO                        
  left join paciente pac on spa.pac_codigo = pac.pac_codigo                          
  left join protocolo_dengue pd on pd.spa_codigo = spa.spa_codigo or pd.aco_codigo = f.aco_codigo                        
  LEFT JOIN FILA_PACIENTE_ULTIMOATENDIMENTO FPU ON FPU.PAC_CODIGO = PAC.PAC_CODIGO AND FPU.LOCATEND_CODIGO = SPA.LOCATEND_CODIGO                                    
    WHERE LA.UNID_CODIGO = @UNID_CODIGO AND                                    
  EXISTS (SELECT 1 FROM PROFISSIONAL_LOTACAO WHERE LOCATEND_CODIGO = LA.LOCATEND_CODIGO AND PROF_CODIGO = @PROF_CODIGO AND PROF_ATIVO = 'S')                            
  AND DATEDIFF(d,F.ACO_DATAHORA,GETDATE()) <= isnull(@FiltroDias,1)                        
  ORDER BY RISCO DESC, IDOSO DESC, PRIORIDADE DESC, F.ACO_CODIGO ASC                                                                             
                                      
 END                                                                                
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- Seleciona os pacientes da fila sem risco                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @OPCAO = 13                                                                
 BEGIN                                                                                 
 SELECT  F.SPA_CODIGO,                                                                   
  F.EMER_CODIGO,                                                                          
  F.ACO_CODIGO,                                                                                        
  case when pd.id is null then                         
  --existe isnull nos apelidos pac(paciente), pacE(paciente), f(VWUPA_FILA)                        
   isnull(case when pac.pac_nome_social is not null then pac.pac_nome_social + '[' + pac.pac_nome + ']' else pac.pac_nome end, -- verificar na pac(paciente)                        
     (isnull(case when pacE.pac_nome_social is not null then pacE.pac_nome_social + '[' + pacE.pac_nome + ']' else pacE.pac_nome end, -- verificar na pacE(paciente)                         
        case when f.nomesocial is not null then f.nomesocial + '[' + f.nome + ']' else F.NOME end))) -- verificar na f(VWUPA_FILA)                        
   ELSE 'DENGUE - ' + isnull(case when pac.pac_nome_social is not null then pac.pac_nome_social + '[' + pac.pac_nome + ']' else pac.pac_nome end, -- verificar na pac(paciente)                        
     (isnull(case when pacE.pac_nome_social is not null then pacE.pac_nome_social + '[' + pacE.pac_nome + ']' else pacE.pac_nome end, -- verificar na pacE(paciente)                        
        case when f.nomesocial is not null then f.nomesocial + '[' + f.nome + ']' else F.NOME end))) -- verificar na f(VWUPA_FILA)                        
  END AS NOME,                                   
  LA.SET_DESCRICAO AS LOC_DESCRICAO,                                                              
  A.ACO_DATAHORA AS DATAHORA,                                                                   
  F.RISCO,                                                                                        
  F.SEQUENCIAL,                                                                            
  F.CHAMADA_ATIVA,                                                                
  F.DESTINO,                                                                                        
  F.IDOSO,                                                          
  NULL AS CHAMADA_ATIVA2,                            
  NULL AS DESTINO2,                        
  DATEDIFF(MINUTE,F.ACO_DATAHORA,GETDATE()) as TEMPOESPERAMINUTOS, --'' as TEMPOESPERAMINUTOS,                        
  CASE                        
  when  F.ACO_DATAHORA IS NOT NULL THEN                        
   CASE                         
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) <> 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) <> 0                        
    THEN                         
     convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) + ' Dia(s): ' +                         
     convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) + ' Hora(s): '+                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
                        
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) = 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) <> 0                        
    THEN                        
     convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) + ' Hora(s): '+                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
                        
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) <> 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) = 0      
    THEN                        
     convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) + ' Dia(s): ' +                        
convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
                        
    WHEN convert(varchar(10), ((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))/86400)) = 0                        
    AND  convert(varchar(10), (((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)/3600)) = 0                        
    THEN                        
     convert(varchar(10), ((((DATEDIFF(SECOND,F.ACO_DATAHORA,GETDATE()))%86400)%3600)/60)) + ' Min'                        
   END                        
  End AS TEMPOESPERAATENDIMENTO,--'' as TEMPOESPERAATENDIMENTO,                        
     FPU.DATA_ULTIMO_ATENDIMENTO AS DATAULTIMOATENDIMENTO --'' AS DATAULTIMOATENDIMENTO                                                                          
 from    upa_acolhimento A                                                                                  
  INNER JOIN VWLOCAL_UNIDADE LA ON (A.LOCATEND_CODIGO = LA.LOCATEND_CODIGO)                                                                                 
  INNER JOIN VWUPA_FILA F ON F.ACO_CODIGO = A.ACO_CODIGO                                        
  left join pronto_atendimento pa on a.spa_codigo = pa.spa_codigo                                  
  left join emergencia emer on a.emer_codigo = emer.emer_codigo                        
  left join paciente pac on pac.pac_codigo = pa.pac_codigo                                  
  left join paciente pacE on pacE.pac_codigo = emer.pac_codigo                            
  left join protocolo_dengue pd on pd.aco_codigo = a.aco_codigo                                                                              
  LEFT JOIN UNIDADE U ON U.UNID_CODIGO = @UNID_CODIGO                        
  LEFT JOIN FILA_PACIENTE_ULTIMOATENDIMENTO FPU ON FPU.PAC_CODIGO = PAC.PAC_CODIGO AND FPU.LOCATEND_CODIGO = A.LOCATEND_CODIGO                         
 where  A.LOCATEND_CODIGO = ISNULL(null, A.LOCATEND_CODIGO)                                                             
  AND  NOT EXISTS (SELECT 1 FROM UPA_CLASSIFICACAO_RISCO CR                                                                                  
      WHERE CR.ACO_CODIGO = A.ACO_CODIGO)                                                                                
  AND  NOT EXISTS (SELECT 1 FROM ATENDIMENTO_AMBULATORIAL AA                                                                                  
      WHERE AA.SPA_CODIGO = A.SPA_CODIGO)                                                                                
  AND RISCO = 0                        
  AND A.UNID_CODIGO=@UNID_CODIGO                        
  and a.aco_datahora > dateadd(d, -@periodo, getdate())                        
  AND (                        
   (U.Fluxo_Atendimento = 0 AND (PA.spa_codigo IS NOT NULL OR EMER.emer_codigo IS NOT NULL))                        
   OR (U.Fluxo_Atendimento = 1 AND (PA.spa_codigo IS NULL AND EMER.emer_codigo IS NULL))                        
  )                        
 ORDER BY IDOSO DESC, PRIORIDADE DESC, F.ACO_CODIGO ASC                        
                                                                             
 END                                                                                  
                                                                      
 -- PACIENTES AGUARDANDO REMOCAO                                                             
 if @opcao = 14                                                         
 BEGIN                                                                                  
                                                                                 
  select                                                                        
  a.atendamb_codigo,                                                                       
  a.spa_codigo as codigo,                                                                                   
  nome = case when pac.pac_nome_social is not null or p.spa_nome_social is not null then isnull(pac.pac_nome_social, p.spa_nome_social) + '[' + isnull(pac.pac_nome, p.spa_nome) + ']' else isnull(pac.pac_nome, p.spa_nome) end,                        
  u.set_descricao,                                                                                  
  NULL as leito,                                                       
  NULL AS inter_codigo,                                                                                  
  prof.prof_nome,                                                                                  
  case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco                                      
  from                                                                                    
  pronto_atendimento p                                                                             
  inner join upa_acolhimento ua on  p.spa_codigo = ua.spa_codigo                                                 
  left join upa_classificacao_risco cr on  cr.aco_codigo = ua.aco_codigo                                                    
  left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                          
  left join risco_acolhimento rap on rap.risaco_codigo = p.risaco_codigo                                                                            
  inner join vwlocal_unidade u on  u.locatend_codigo = p.locatend_codigo                             
inner join atendimento_ambulatorial a on  a.spa_codigo = p.spa_codigo                             
                            
  left join  upa_atendimento_medico am on ( a.atendamb_codigo = am.atendamb_codigo   and  am.tipsai_codigo = 5 )                               
  left join  atendimento_clinico ac  on    ( a.atendamb_codigo   = ac.atendamb_codigo )                            
                            
  inner join  profissional prof on (prof.prof_codigo = a.prof_codigo and prof.locatend_codigo = a.locatend_codigo)                                             
  left join paciente pac on pac.pac_codigo = p.pac_codigo                                  
                            
  where  a.atendamb_datafinal is null                                                                                  
  and not exists (SELECT 1 FROM INTERNACAO I WHERE I.SPA_CODIGO = P.SPA_CODIGO)                                
  and (ac.atendamb_encaminhamento = 5 or tipsai_codigoAmbulatorio = 5)                            
  and convert(smalldatetime,@DATA_INICIAL, 103) <= am.upaatemed_DataSaida                              
  and  DATEADD(DAY,1,convert(smalldatetime,@DATA_FINAL, 103)) > am.upaatemed_DataSaida                             
                               
                                                                                 
 union all                                                                                  
                                                                                 
   -- INTERNADOS                                            
  select                                                                                   
  a.atendamb_codigo,                                                                                  
  a.spa_codigo as codigo,                                                                                   
  nome = case when pac.pac_nome_social is not null or p.spa_nome_social is not null then isnull(pac.pac_nome_social, p.spa_nome_social) + '[' + isnull(pac.pac_nome, p.spa_nome) + ']' else isnull(pac.pac_nome, p.spa_nome) end,                             
  
    
      
        
          
            
              
                
                  
                    
                      
                        
                                                   
  u.set_descricao,                                               
  LocInt_Descricao as leito,                                                                                  
  i.inter_codigo,                            
  prof.prof_nome,                                                                     
  case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco                                                                              
  from                                                                                    
  pronto_atendimento p                                                                                  
  inner join  upa_acolhimento ua on  p.spa_codigo = ua.spa_codigo                                                                                               
  left join upa_classificacao_risco cr on cr.aco_codigo = ua.aco_codigo                                                                                           
  left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                                                        
  left join risco_acolhimento rap on rap.risaco_codigo = p.risaco_codigo                                                                              
  inner join  vwlocal_unidade u on  u.locatend_codigo = p.locatend_codigo                                                                           
  inner join Atendimento_Ambulatorial a on a.spa_Codigo = p.spa_Codigo                                                                   
  inner join upa_atendimento_medico am on am.atendamb_codigo = a.atendamb_codigo                                                                   
  inner join  internacao i on  i.spa_codigo = p.spa_codigo                                                                                                      
  left join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo                                     
  inner join  profissional prof on (prof.prof_codigo = i.prof_codigo and prof.locatend_codigo = i.locatend_codigo)                                                  
  left join paciente pac on pac.pac_codigo = p.pac_codigo                          
  where                                                                    
  tipsai_codigo = 5                                                                                  
  and i.inter_dtalta is null                                
  and convert(smalldatetime,@DATA_INICIAL, 103) <= a.atendamb_datainicio                            
  and convert(smalldatetime,@DATA_FINAL, 103) >= a.atendamb_datainicio                                                                               
                                                                                 
  union all                                                                       
                                                                                 
-- EMERGENCIA                                                                                  
  select                                                                                   
  a.atendamb_codigo,                                                                        
  a.emer_codigo as codigo,                                                                                  
  nome = case when pac.pac_nome_social is not null or e.emer_nome_social is not null then isnull(pac.pac_nome_social, e.emer_nome_social) + '[' + isnull(pac.pac_nome, e.emer_nome) + ']' else isnull(pac.pac_nome, e.emer_nome) end,                          
 
    
      
        
  u.set_descricao,                                              
  NULL as leito,                                                  
  NULL AS inter_codigo,                                                                                  
  prof.prof_nome,                                                           
  case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco                                                                              
  from                                            
  emergencia e                                  
  left join upa_acolhimento ua on e.emer_codigo = ua.emer_codigo                                                        
  left join upa_classificacao_risco cr on  cr.aco_codigo = ua.aco_codigo                                                                                           
  left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                               
  left join risco_acolhimento rap on rap.risaco_codigo = e.risaco_codigo                                                                              
  inner join  vwlocal_unidade u on  u.locatend_codigo = e.locatend_codigo                                                      
  inner join  atendimento_ambulatorial a on  a.emer_codigo = e.emer_codigo                                                                                                      
                            
  left join  upa_atendimento_medico am on ( a.atendamb_codigo = am.atendamb_codigo   and  am.tipsai_codigo = 5 )                               
  left join  atendimento_clinico ac  on    ( a.atendamb_codigo   = ac.atendamb_codigo )                            
                            
  inner join  profissional prof on (prof.prof_codigo = a.prof_codigo and prof.locatend_codigo = a.locatend_codigo)                                                                             
  left join paciente pac on e.pac_codigo = pac.pac_codigo                                  
                            
  where  a.atendamb_datafinal  is null                                                                                  
  and not exists (SELECT 1 FROM INTERNACAO I WHERE I.EMER_CODIGO = E.EMER_CODIGO)                              
  and (ac.atendamb_encaminhamento = 5 or tipsai_codigoAmbulatorio = 5)                            
  and convert(smalldatetime,@DATA_INICIAL, 103) <= a.atendamb_datainicio                   
  and convert(smalldatetime,@DATA_FINAL, 103) >= a.atendamb_datainicio                             
                                                                                 
  union all                                
             
   -- INTERNADOS                                                                                  
  select                                                      
  a.atendamb_codigo,                                                                                  
  a.emer_codigo as codigo,                                                                      
  nome = case when pac.pac_nome_social is not null or e.emer_nome_social is not null then isnull(pac.pac_nome_social, e.emer_nome_social) + '[' + isnull(pac.pac_nome, e.emer_nome) + ']' else isnull(pac.pac_nome, e.emer_nome) end,                         
  
     
     
        
          
            
              
               
  u.set_descricao,                                                                                  
  LocInt_Descricao as leito,                                                                                  
  i.inter_codigo,                                                                                  
  prof.prof_nome,                                                                                  
  case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco                                                                              
  from                                                                                    
  emergencia e                                                         
  inner join  upa_acolhimento ua on e.emer_codigo = ua.emer_codigo                                                                                  
  left join upa_classificacao_risco cr on  cr.aco_codigo = ua.aco_codigo                                                                                     
  left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                                                                              
  left join risco_acolhimento rap on rap.risaco_codigo = e.risaco_codigo                                                                              
  inner join  vwlocal_unidade u on  u.locatend_codigo = e.locatend_codigo                
  inner join Atendimento_Ambulatorial a on a.emer_Codigo = e.emer_Codigo                                                                                  
  inner join upa_atendimento_medico am on am.atendamb_codigo = a.atendamb_codigo                                                                                  
  inner join  internacao i on i.emer_codigo = e.emer_codigo                                                                                                      
  left join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo                                                                                  
  inner join  profissional prof on (prof.prof_codigo = i.prof_codigo and prof.locatend_codigo = i.locatend_codigo)                                                                            
  left join paciente pac on e.pac_codigo = pac.pac_codigo                                  
  where                                                                                    
  tipsai_codigo = 5                                                                                  
  and i.inter_dtalta is null                               
  and convert(smalldatetime,@DATA_INICIAL, 103) <= a.atendamb_datainicio                              
  and convert(smalldatetime,@DATA_FINAL, 103) >= a.atendamb_datainicio                                                                                
                                                                                 
  order by upaclaris_risco desc                                                                                  
                                                                                 
 END                                                           
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                        
 -- ESPECIALIDADE COM ATENDIMENTOS EM ABERTO                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @opcao = 15                                                                     
                                                                                 
 BEGIN                                                                                  
                                                                           
 SELECT X.SPA_CODIGO, X.NOME, X.NOME_SOCIAL, X.LOC_DESCRICAO,                        
    X.PROF_NOME, X.LOCATEND_CODIGO, X.PROF_CODIGO,                        
    Y.TOTALSEMRETORNO, Z.TOTALCOMRETORNO, W.UPAENC_PRIORIDADE, W.UPAENC_DATAENCAMINHADO, '0' AS TIPO,                        
    X.ATENDAMB_CODIGO,                        
    XPTO.TOTALPRESCRICAO,                        
    XPT.TOTALPRESCFECHADA,                        
 X.LAUDOLIBERADO_R as TotalLaudoLiberadoRadiologia,                        
    X.LAUDOLIBERADO_D AS TotalLaudoLiberadoDiagnose,                        
    kl.TOTALLAUDOLABORATORIO AS TotalLaudoLaboratorio,                        
    ISNULL (X.LAUDOLIBERADO_R,ISNULL(X.LAUDOLIBERADO_D, KL.TOTALLAUDOLABORATORIO)) AS LAUDOLIBERADO,                        
    --ISNULL(LAUDOLIBERADO, KL.TOTALLAUDOLABORATORIO) AS LAUDOLIBERADO,                        
    X.atendamb_datafinal AS ATENDAMB_DATAFINALIZADO,                        
 X.risaco_codigo                        
                        
  FROM                        
   -- MONTA TABELA COM PRONTO_ATENDIMENTO COM SAIDA DIFERENTE DE REMOCAO E OBITO OU SEM TIPO DE SAIDA                 
   -- QUE NAO POSSUEM INTERNACAO E ESTAO SEM DATA FINAL (ATENDIMENTO EM ABERTO)                        
   -- PODENDO LEVAR EM CONSIDERACAO O LOCAL DE ATENDIMENTO OU PACIENTE                        
   (SELECT TOP 100 PA.SPA_CODIGO AS [SPA_CODIGO],                        
  (CASE                                       
    WHEN ISNULL((ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social)), 'N') = 'N'                        
   THEN ''                        
   ELSE ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social) + ' ['                          
   END  +  ISNULL(PAC.PAC_NOME, PA.SPA_NOME)  +                         
   CASE                  
  WHEN ISNULL((ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social)), 'N') = 'N'                        
   THEN ''                        
   ELSE ']'                  
   END)                        
  AS NOME,                          
  ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social) AS NOME_SOCIAL,                        
  LA.SET_DESCRICAO AS LOC_DESCRICAO,                        
  PROF.PROF_NOME,                        
  AA.LOCATEND_CODIGO,                        
  AA.PROF_CODIGO,                        
  AA.ATENDAMB_CODIGO,                        
  LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia AS LAUDOLIBERADO_R,                        
  LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose AS LAUDOLIBERADO_D,                        
  AA.atendamb_datafinal,                        
  LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia,                        
  LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose,                        
  UCR.risaco_codigo                        
                        
  FROM  PRONTO_ATENDIMENTO PA WITH (NOLOCK)                        
  INNER JOIN PACIENTE PAC WITH (NOLOCK) ON PAC.PAC_CODIGO = PA.PAC_CODIGO                        
  INNER JOIN ATENDIMENTO_AMBULATORIAL AA WITH (NOLOCK) ON PA.SPA_CODIGO = AA.SPA_CODIGO                        
  INNER JOIN UPA_ATENDIMENTO_MEDICO AM WITH (NOLOCK) ON AA.ATENDAMB_CODIGO = AM.ATENDAMB_CODIGO                        
  INNER JOIN PROFISSIONAL PROF WITH (NOLOCK) ON (PROF.PROF_CODIGO = AA.PROF_CODIGO AND PROF.LOCATEND_CODIGO = AA.LOCATEND_CODIGO)                        
  INNER JOIN VWCLINICA_SPA LA WITH (NOLOCK) ON PA.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                        
  LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoRadiologia                        
  FROM VWSOLICITACAO_PEDIDO VSP WITH (NOLOCK)                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 AND VSP.solped_TipoSolicitacao = '8'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_RADIOLOGIA ON PA.SPA_CODIGO = LAUDOLAB_RADIOLOGIA.SOLPED_CODIGOORIGEM                        
                        
   LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoDiagnose                        
  FROM VWSOLICITACAO_PEDIDO VSP WITH (NOLOCK)                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 and VSP.solped_TipoSolicitacao = '9'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_DIAGNOSE ON PA.SPA_CODIGO = LAUDOLAB_DIAGNOSE.SOLPED_CODIGOORIGEM                        
                        
 LEFT JOIN UPA_ACOLHIMENTO UA WITH (NOLOCK) ON PA.spa_codigo = UA.spa_codigo                        
 LEFT JOIN UPA_Classificacao_Risco UCR WITH (NOLOCK) ON UA.ACO_CODIGO = UCR.aco_codigo                         
                        
  WHERE AA.ATENDAMB_DATAFINAL IS NULL                        
  AND (AM.TIPSAI_CODIGO <> 5 OR AM.TIPSAI_CODIGO IS NULL)                        
  AND (AM.TIPSAI_CODIGOENCAMINHAMENTO <> 5 OR AM.TIPSAI_CODIGOENCAMINHAMENTO  IS NULL)                        
  AND EXISTS (SELECT 1 FROM PROFISSIONAL_LOTACAO WITH (NOLOCK) WHERE PROF_CODIGO = @PROF_CODIGO AND AA.LOCATEND_CODIGO = LOCATEND_CODIGO)                        
  AND AA.PAC_CODIGO = ISNULL(@PAC_CODIGO, AA.PAC_CODIGO)                        
  AND NOT EXISTS (SELECT 1 FROM INTERNACAO I WITH (NOLOCK)                        
    WHERE I.SPA_CODIGO = PA.SPA_CODIGO) ORDER BY PA.SPA_CODIGO DESC ) X                     
                        
  LEFT JOIN                        
                          
   -- MONTA TABELA COM OS ATENDIMENTO ENCAMINHADOS COM RETORNO E QUE AINDA NAO RETORNARAM                        
   (SELECT SPA_CODIGO, UPAENC_PRIORIDADE, UPAENC_DATAENCAMINHADO                        
   FROM UPA_ENCAMINHAMENTO WITH (NOLOCK)                        
   WHERE UPATIPENC_CODIGO = 3                        
   AND UPAENC_DATARETORNO IS NULL) W ON W.SPA_CODIGO = X.SPA_CODIGO                        
                        
  LEFT JOIN                        
                        
   (SELECT DISTINCT SOLPED_CODIGOORIGEM, ORIPAC_CODIGO, COUNT(*) AS TOTALLAUDOLABORATORIO                        
   FROM SOLICITACAO_PEDIDO_EXAME SPE  WITH (NOLOCK)                        
   INNER JOIN VWSOLICITACAO_PEDIDO SP WITH (NOLOCK) ON SPE.PED_CODIGO = SP.PED_CODIGO                        
   INNER JOIN EXAME_SOLICITADO_LABORATORIO EL WITH (NOLOCK) ON SPE.SOLPEDEXA_CODIGO_EXAME = EL.EXALAB_CODIGO                        
   AND SP.SOLPED_CODIGOPEDIDO = EL.PEDEXALAB_CODIGO AND SP.SOLPED_TIPOSOLICITACAO = 7 AND (EL.EXASOLLAB_STATUS = 'LA' OR EL.EXASOLLAB_STATUS  = 'LI')                        
   GROUP BY SOLPED_CODIGOORIGEM, ORIPAC_CODIGO) KL --RESULTADOS DO MODULO DE LABORATORIO DO KLINIKOS                        
                        
   ON (KL.SOLPED_CODIGOORIGEM = X.SPA_CODIGO AND KL.ORIPAC_CODIGO = 5)                        
                        
   LEFT JOIN                        
                        
   (SELECT SPA_CODIGO, COUNT(*) AS TOTALSEMRETORNO             FROM UPA_ENCAMINHAMENTO  WITH (NOLOCK)                        
   WHERE UPAENC_DATARETORNO IS NULL                        
   GROUP BY SPA_CODIGO) Y                         
                           
   ON X.SPA_CODIGO = Y.SPA_CODIGO                        
                        
   LEFT JOIN                        
                        
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALCOMRETORNO                        
   FROM UPA_ENCAMINHAMENTO WITH (NOLOCK)                        
   WHERE UPAENC_DATARETORNO IS NOT NULL                        
   GROUP BY SPA_CODIGO) Z                         
                           
   ON X.SPA_CODIGO = Z.SPA_CODIGO                        
                        
   LEFT JOIN                        
                        
   (SELECT DISTINCT SPA_CODIGO,                        
    COUNT(*) AS TOTALPRESCRICAO                        
    FROM PRESCRICAO WITH (NOLOCK)                        
    WHERE PRESC_TIPO = 'P'                        
    GROUP BY SPA_CODIGO) XPTO                         
                            
    ON X.SPA_CODIGO = XPTO.SPA_CODIGO                        
                        
   LEFT JOIN                        
                        
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCFECHADA                        
   FROM PRESCRICAO WITH (NOLOCK)                        
   WHERE IDT_FECHADA = 'S'                        
   AND PRESC_TIPO = 'P'                        
   GROUP BY SPA_CODIGO) XPT                         
                           
   ON X.SPA_CODIGO = XPT.SPA_CODIGO                                        
  UNION                        
    SELECT X.SPA_CODIGO, X.NOME, X.NOME_SOCIAL, X.LOC_DESCRICAO,                        
    X.PROF_NOME, X.LOCATEND_CODIGO, X.PROF_CODIGO,                        
    NULL, NULL, W.UPAENC_PRIORIDADE, W.UPAENC_DATAENCAMINHADO, '1' AS TIPO,                        
    X.ATENDAMB_CODIGO,                        
    XPTO.TOTALPRESCRICAO,                        
    XPT.TOTALPRESCFECHADA,                        
 X.LAUDOLIBERADO_R as TotalLaudoLiberadoRadiologia,                        
    X.LAUDOLIBERADO_D AS TotalLaudoLiberadoDiagnose,                        
    kl.TOTALLAUDOLABORATORIO AS TotalLaudoLaboratorio,                        
    ISNULL (X.LAUDOLIBERADO_R,ISNULL(X.LAUDOLIBERADO_D, KL.TOTALLAUDOLABORATORIO)) AS LAUDOLIBERADO,                        
    --ISNULL(LAUDOLIBERADO, KL.TOTALLAUDOLABORATORIO) AS LAUDOLIBERADO,                        
    X.atendamb_datafinal AS ATENDAMB_DATAFINALIZADO,               
 X.risaco_codigo                        
  FROM                        
   (SELECT TOP 100 PA.SPA_CODIGO AS [SPA_CODIGO],                        
   (CASE                                       
    WHEN ISNULL((ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social)), 'N') = 'N'                        
   THEN ''                        
   ELSE ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social) + ' ['                          
   END  +  ISNULL(PAC.PAC_NOME, PA.SPA_NOME)  +                         
   CASE                                       
  WHEN ISNULL((ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social)), 'N') = 'N'                        
   THEN ''                        
   ELSE ']'                        
   END)                        
  AS NOME,                          
  ISNULL(PAC.PAC_NOME_SOCIAL,PA.spa_nome_social) AS NOME_SOCIAL,                        
   LA.SET_DESCRICAO AS LOC_DESCRICAO,                        
   PROF.PROF_NOME,                   
   AA.LOCATEND_CODIGO,                        
   AA.PROF_CODIGO,                        
   AA.ATENDAMB_CODIGO,                        
   LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia AS LAUDOLIBERADO_R,                        
   LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose AS LAUDOLIBERADO_D,                        
   AA.atendamb_datafinal,                        
   UCR.risaco_codigo                        
    FROM  PRONTO_ATENDIMENTO PA WITH (NOLOCK)                        
    INNER JOIN PACIENTE PAC WITH (NOLOCK) ON PAC.PAC_CODIGO = PA.PAC_CODIGO                        
    INNER JOIN ATENDIMENTO_AMBULATORIAL AA WITH (NOLOCK) ON PA.SPA_CODIGO = AA.SPA_CODIGO                        
    INNER JOIN UPA_ATENDIMENTO_MEDICO AM WITH (NOLOCK) ON AA.ATENDAMB_CODIGO = AM.ATENDAMB_CODIGO                        
    INNER JOIN PROFISSIONAL PROF WITH (NOLOCK) ON (PROF.PROF_CODIGO = AA.PROF_CODIGO AND PROF.LOCATEND_CODIGO = AA.LOCATEND_CODIGO)                        
    INNER JOIN VWCLINICA_SPA LA WITH (NOLOCK) ON PA.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                        
    LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoRadiologia                        
  FROM VWSOLICITACAO_PEDIDO VSP WITH (NOLOCK)                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 AND VSP.solped_TipoSolicitacao = '8'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_RADIOLOGIA ON PA.SPA_CODIGO = LAUDOLAB_RADIOLOGIA.SOLPED_CODIGOORIGEM                        
                        
   LEFT JOIN (SELECT DISTINCT SOLPED_CODIGOORIGEM, COUNT(*) AS TotalLaudoLiberadoDiagnose                        
  FROM VWSOLICITACAO_PEDIDO VSP WITH (NOLOCK)                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 and VSP.solped_TipoSolicitacao = '9'                        
  GROUP BY VSP.SOLPED_CODIGOORIGEM) LAUDOLAB_DIAGNOSE ON PA.SPA_CODIGO = LAUDOLAB_DIAGNOSE.SOLPED_CODIGOORIGEM                        
 LEFT JOIN UPA_ACOLHIMENTO UA ON PA.spa_codigo = UA.spa_codigo                        
 LEFT JOIN UPA_Classificacao_Risco UCR WITH (NOLOCK) ON UA.ACO_CODIGO = UCR.aco_codigo                          
   WHERE AA.ATENDAMB_DATAFINAL IS NULL                        
   AND (AM.TIPSAI_CODIGO <> 5 OR AM.TIPSAI_CODIGO IS NULL)                        
   AND (AM.TIPSAI_CODIGOENCAMINHAMENTO <> 5 OR AM.TIPSAI_CODIGOENCAMINHAMENTO  IS NULL)                        
   AND AA.PAC_CODIGO = ISNULL(@PAC_CODIGO, AA.PAC_CODIGO)                        
   AND NOT EXISTS (SELECT 1 FROM INTERNACAO I WHERE I.SPA_CODIGO = PA.SPA_CODIGO) ORDER BY PA.SPA_CODIGO DESC ) X                        
                        
   INNER JOIN                        
                        
   (SELECT Y.SPA_CODIGO, Z.UPAENC_PRIORIDADE, Z.UPAENC_DATAENCAMINHADO                        
   FROM                        
    (SELECT DISTINCT SPA_CODIGO                        
    FROM UPA_ENCAMINHAMENTO  WITH (NOLOCK)                        
    WHERE                        
    EXISTS (SELECT 1 FROM PROFISSIONAL_LOTACAO WITH (NOLOCK) WHERE PROF_CODIGO = @PROF_CODIGO AND LOCATEND_CODIGO_DESTINO = LOCATEND_CODIGO)                        
    AND (PROF_CODIGO_ORIGEM <> @PROF_CODIGO)                        
    AND UPAENC_DATARETORNO IS NULL) Y                        
    INNER JOIN                        
                        
    (SELECT SPA_CODIGO, UPAENC_PRIORIDADE, UPAENC_DATAENCAMINHADO                        
    FROM UPA_ENCAMINHAMENTO  WITH (NOLOCK)                        
    WHERE UPATIPENC_CODIGO = 3                      
    AND EXISTS (SELECT 1 FROM PROFISSIONAL_LOTACAO WITH (NOLOCK) WHERE PROF_CODIGO = @PROF_CODIGO AND LOCATEND_CODIGO_DESTINO = LOCATEND_CODIGO) AND (PROF_CODIGO_ORIGEM <> @PROF_CODIGO)                        
    AND UPAENC_DATARETORNO IS NULL) Z                        
                           
   ON Y.SPA_CODIGO = Z.SPA_CODIGO) W ON X.SPA_CODIGO = W.SPA_CODIGO                        
                        
   LEFT JOIN                        
                        
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCRICAO                        
   FROM PRESCRICAO WITH (NOLOCK)                        
   WHERE PRESC_TIPO = 'P'                        
   GROUP BY SPA_CODIGO) XPTO ON X.SPA_CODIGO = XPTO.SPA_CODIGO                        
                        
   LEFT JOIN                        
                           
  (SELECT DISTINCT SOLPED_CODIGOORIGEM, ORIPAC_CODIGO, COUNT(*) AS TOTALLAUDOLABORATORIO                    
   FROM SOLICITACAO_PEDIDO_EXAME SPE WITH (NOLOCK)                        
   INNER JOIN VWSOLICITACAO_PEDIDO SP WITH (NOLOCK) ON SPE.PED_CODIGO = SP.PED_CODIGO                        
   INNER JOIN EXAME_SOLICITADO_LABORATORIO EL WITH (NOLOCK) ON SPE.SOLPEDEXA_CODIGO_EXAME = EL.EXALAB_CODIGO                        
   AND SP.SOLPED_CODIGOPEDIDO = EL.PEDEXALAB_CODIGO AND SP.SOLPED_TIPOSOLICITACAO = 7 AND (EL.EXASOLLAB_STATUS = 'LA' OR EL.EXASOLLAB_STATUS  = 'LI')                        
   GROUP BY SOLPED_CODIGOORIGEM, ORIPAC_CODIGO) KL --RESULTADOS DO MODULO DE LABORATORIO DO KLINIKOS                        
                        
   ON (KL.SOLPED_CODIGOORIGEM = X.SPA_CODIGO AND KL.ORIPAC_CODIGO = 5)                        
                        
   LEFT JOIN                        
   (SELECT DISTINCT SPA_CODIGO, COUNT(*) AS TOTALPRESCFECHADA                        
   FROM PRESCRICAO WITH (NOLOCK)                  
   WHERE IDT_FECHADA = 'S'                        
   AND PRESC_TIPO = 'P'                        
   GROUP BY SPA_CODIGO) XPT                         
                           
   ON X.SPA_CODIGO = XPT.SPA_CODIGO                        
                           
   ORDER BY X.SPA_CODIGO DESC                        
                                   
                                           
 END                                         
                                                                       
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- RETORNA OS DADOS PARA ADMINISTRACAO DA FILA                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @opcao = 16                                                     
 BEGIN                                                                                  
                                                                                 
  DECLARE @WDataInicial smalldatetime                                                                                  
  DECLARE @WDataFinal smalldatetime                                                                                  
                                           
  IF (@DATA_INICIAL IS NULL)                                                                                  
  BEGIN                                                                                  
   SET @WDataInicial = convert(smalldatetime, '01/01/1980 00:00:00', 103)                                                                          
  END                                                                                  
  ELSE                                                                                  
  BEGIN                                                                                  
   SET @WDataInicial = convert(smalldatetime, @DATA_INICIAL, 103)                                                                               
  END                                                                                  
                                                                                 
  IF (@DATA_FINAL IS NULL)                                                                                  
  BEGIN                                                                                  
   SET @WDataFinal = GETDATE()                                   
  END                                                                                  
  ELSE                                                                              
  BEGIN                                                                                  
   SET @WDataFinal = convert(smalldatetime, @DATA_FINAL,103)                                                                                  
  END                                                                             
                                                                                  
  SELECT ACO_CODIGO, A.SPA_CODIGO, NOME, RISCO,                                       
   CASE WHEN LOC_DESCRICAO_SPA IS NOT NULL THEN LOC_DESCRICAO_SPA ELSE LOC_DESCRICAO END AS LOC_DESCRICAO,                                       
   DATAHORA, SEQUENCIAL, DATA_CONFIRMACAO, NUM_CHAMADAS, CHAMADA_ATIVA, DATA_CANCELAMENTO, DESTINO                                                                                        
  FROM                                                   
  (                                                                                   
  SELECT F.ACO_CODIGO,                                                                                        
    F.SPA_CODIGO,                                                                                        
    NOME = case when pac.pac_nome_social is not null or f.NOMESOCIAL is not null then ISNULL(PAC.pac_nome_social, F.NOMESOCIAL) + '[' + ISNULL(PAC.PAC_NOME, F.NOME) + ']' else ISNULL(PAC.PAC_NOME, F.NOME) end,                                   
    F.RISCO,                                                 
    LU.SET_DESCRICAO AS LOC_DESCRICAO,                                                                  
    F.ACO_DATAHORA AS DATAHORA,                                                
    FS.SEQUENCIAL,                                                                   
    F.DATA_CONFIRMACAO,                                                                                        
    F.NUM_CHAMADAS,                                                                   
    CASE WHEN ((PN.ACO_CODIGO IS NOT NULL) OR (F.DATA_CONFIRMACAO IS NOT NULL))                                                                                        
  THEN 1                       
  ELSE 0                                   
    END AS CHAMADA_ATIVA,                                                                                        
    F.DATA_CANCELAMENTO,                                                         
    F.DESTINO,                                                                                        
    FS.PRIORIDADE,                                                                                
   F.ACO_IDOSO,                                          
    PUR.MODATE_CODIGO                                                                                
  FROM UPA_FILA F                                                                                        
  INNER JOIN UPA_FILA_SEQUENCIAL FS ON FS.ACO_CODIGO = F.ACO_CODIGO                                                                                        
 LEFT OUTER JOIN UPA_PAINEL PN ON PN.ACO_CODIGO = F.ACO_CODIGO                                                             
  LEFT OUTER JOIN VWLOCAL_UNIDADE LU ON F.LOCATEND_CODIGO = LU.LOCATEND_CODIGO                                                                              
  LEFT JOIN UPA_CLASSIFICACAO_RISCO CR ON CR.ACO_CODIGO = FS.ACO_CODIGO                                                                                              
  LEFT JOIN PARAMETRO_UNIDADE_REDE PUR on PUR.UNID_CODIGO = LU.UNID_CODIGO                                   
  LEFT JOIn Pronto_Atendimento pa1 ON F.SPA_CODIGO = PA1.SPA_CODIGO                                       
  LEFT JOIN PACIENTE PAC ON PAC.PAC_CODIGO = PA1.PAC_CODIGO                                  
  ) A                                                                              
                                       
 left join                                       
                                       
 (select SPA_CODIGO,LU.SET_DESCRICAO as LOC_DESCRICAO_SPA from Pronto_Atendimento pa                                      
  LEFT OUTER JOIN VWLOCAL_UNIDADE LU ON pa.LOCATEND_CODIGO = LU.LOCATEND_CODIGO                                        ) b                                      
 on b.spa_codigo = a.spa_codigo                                      
                                       
  WHERE                                                                                  
   (@CANCELADOS = 'S' OR A.DATA_CANCELAMENTO is null)                                                                                
   AND A.DATAHORA >= @WDataInicial                                                                                  
   AND A.DATAHORA <= @WDataFinal                                                                                  
   AND convert(int,A.RISCO) <= (select top 1 convert(int,risaco_gravidade)                                                                               
     from risco_acolhimento ra                                                                              
     join protocolo_acolhimento pa on ra.proate_codigo = pa.proate_codigo                                                                              
     join unidade u on pa.proate_codigo = u.unid_modelo_risco                                                                              
     where risaco_fila = 'E'                                                 
     order by risaco_gravidade desc)                                                                              
                                                                                 
 ORDER BY A.RISCO DESC, A.ACO_IDOSO DESC, A.PRIORIDADE DESC, A.ACO_CODIGO ASC        
                                          
 END                                                                                  
                                                                                 
 -- #####################################################################                                                                                  
 -- RESUMO DA FILA                                                                                  
 -- #####################################################################                                                             
                             
if (@opcao = 18)                                                                                  
 BEGIN                                                                                  
                                                                                 
  SELECT  COUNT(F.ACO_CODIGO), L.SET_DESCRICAO, 'REGISTRO'                                                                                  
  FROM                                                                                   
   VWUPA_FILA F                            
   INNER JOIN UPA_ACOLHIMENTO A ON (A.ACO_CODIGO = F.ACO_CODIGO)                                                                              
   INNER JOIN VWLOCAL_UNIDADE L ON (A.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                            
  WHERE  F.SPA_CODIGO IS NULL                                                               
  AND A.UNID_CODIGO = @UNID_CODIGO                                                                                  
  GROUP BY L.SET_DESCRICAO                                                                                  
  UNION                                                                                  
  SELECT  COUNT(F.ACO_CODIGO), L.SET_DESCRICAO, 'RISCO'                                                                                  
  FROM                                                                                   
   VWUPA_FILA F                                                                                  
   INNER JOIN PRONTO_ATENDIMENTO P ON (P.SPA_CODIGO = F.SPA_CODIGO)                       INNER JOIN VWLOCAL_UNIDADE L ON (P.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                                                                                   
  WHERE  F.RISCO = 1                                                                                  
  AND NOT EXISTS (SELECT 1 FROM UPA_CLASSIFICACAO_RISCO CR WHERE CR.ACO_CODIGO = F.ACO_CODIGO)                                                      
  AND P.UNID_CODIGO = @UNID_CODIGO                                                                                  
  GROUP BY L.SET_DESCRICAO                                                                                  
  UNION    
  SELECT  COUNT(F.ACO_CODIGO), L.SET_DESCRICAO, 'ATENDIMENTO'                                                                                  
  FROM                                                                                   
   VWUPA_FILA F                                                                                  
   INNER JOIN PRONTO_ATENDIMENTO P ON (P.SPA_CODIGO = F.SPA_CODIGO)                                                                                  
   INNER JOIN VWLOCAL_UNIDADE L ON (P.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                                                                                   
  WHERE  F.RISCO IN (0,2)                                                                                  
  AND P.UNID_CODIGO = @UNID_CODIGO                                                                                  
  GROUP BY L.SET_DESCRICAO                                                                                  
  UNION                                                                                  
  SELECT  COUNT(F.ACO_CODIGO), L.SET_DESCRICAO, 'INTERNACAO - RISCO AMARELO'                                                                                  
  FROM                                    
   VWUPA_FILA F                                                                                  
   INNER JOIN PRONTO_ATENDIMENTO P ON (P.SPA_CODIGO = F.SPA_CODIGO)                                                  
   INNER JOIN VWLOCAL_UNIDADE L ON (P.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                                                                                   
  WHERE  F.RISCO IN (4)                                                                                  
  AND P.UNID_CODIGO = @UNID_CODIGO                                                                                  
  GROUP BY L.SET_DESCRICAO                                                                               
  UNION                                                                                  
  SELECT  COUNT(F.ACO_CODIGO), L.SET_DESCRICAO, 'INTERNACAO - RISCO VERMELHO'                                                                                  
  FROM                                                                                   
   VWUPA_FILA F                                                                                  
   INNER JOIN PRONTO_ATENDIMENTO P ON (P.SPA_CODIGO = F.SPA_CODIGO)                             
   INNER JOIN VWLOCAL_UNIDADE L ON (P.LOCATEND_CODIGO = L.LOCATEND_CODIGO)                                                                                  
  WHERE  F.RISCO IN (6)                                                              
 GROUP BY L.SET_DESCRICAO                         
 order by 3                                                                                   
                                   
                                                                    
 END                              
                                                                                 
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- ATUALIZAR A FILA DO PACIENTE REGISTRADO PELA CLASSIFICACAO DE RISCO                                                                                  
 -- ESTE PROCEDIMENTO FAZ COM QUE O PACIENTE NAO PRECISE SER CHAMADO NOVAMENTE                                                                                  
 -- QUANDO RETORNAR AO CADASTRO DA CLASSIFICACAO DE RISCO                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                  
if (@opcao = 19)                                                                                  
 BEGIN           UPDATE UPA_FILA SET                 
    NUM_CHAMADAS = 1,                                                                                  
    DATA_CONFIRMACAO = GETDATE()                                                                                  
  WHERE  ACO_CODIGO = @ACO_CODIGO                                                                                  
 END                                                                       
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- ATUALIZAR A FILA DO PACIENTE SALVO NA CLASSIFICACAO DE RISCO APOS SER REGISTRADO                                                    
 -- PELA PROPRIA CLASSICACAO DE RISCO                                                                                  
 -- ESTE PROCEDIMENTO DESFAZ A ACAO DA OPCAO 19 AO SALVAR A CLASSIFICACAO DE RISCO                                                                                   
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 if (@opcao = 20)                                                                                  
 BEGIN                                                                                  
  UPDATE UPA_FILA SET                                                                
  NUM_CHAMADAS = 0,                                                        
    DATA_CONFIRMACAO = NULL                                                                                  
  WHERE  ACO_CODIGO = @ACO_CODIGO                                                                                  
 END                                                                                  
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- DataHora em que o paciente foi confirmado no atendimento mÃƒÆ’Ã‚Â©dico                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 if (@opcao = 21)                                                                                  
 BEGIN                                                                                  
  IF(@SPA_CODIGO IS NOT NULL)                                        
  BEGIN                                                                                  
   SELECT max(DATA_HISTORICO) as DataHistorico                                    
    FROM UPA_FILA_HISTORICO F                                                                  
  join UPA_ACOLHIMENTO UA on F.aco_codigo = UA.aco_codigo                                
    WHERE F.ID_EVENTO = 11 and UA.spa_codigo = @SPA_CODIGO                                                                                  
   group by F.aco_codigo                             
  END                                                                                  
  IF(@EMER_CODIGO IS NOT NULL)                              
  BEGIN                                                                                  
   SELECT max(DATA_HISTORICO) as DataHistorico                                                                                  
    FROM UPA_FILA_HISTORICO F                                                             
 join UPA_ACOLHIMENTO UA on F.aco_codigo = UA.aco_codigo                                                                                  
    WHERE F.ID_EVENTO = 11 and UA.emer_codigo = @EMER_CODIGO                                                                                  
   group by F.aco_codigo                  
  END                                                                                  
                                                                                 
 END                                                                                  
               
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- Pular Fila Idoso                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                               
 IF (@opcao = 22)                                                                                  
 BEGIN                                                                                  
  DECLARE @SEQUENCIAL1 INT, @SEQUENCIAL_SEMRISCOIDOSO INT, @Contador INT                                                                                  
                                                                                 
  -- Recupera o risco e o sequencial                                               
  SELECT  @RISCO=RISCO, @SEQUENCIAL1=SEQUENCIAL                                                                                  
  FROM vwUPA_FILA                             
  WHERE ACO_CODIGO=@ACO_CODIGO                                                                                  
                                                                                 
  IF (@RISCO = 0)                                             
  BEGIN                                                                                  
   --Tratar quando existir idoso jÃƒÆ’Ã‚Â¡ na fila com ACO_CODIGO anterior ao ÃƒÆ’Ã‚Âºltimo incluido                                                   
   SELECT @Contador = COUNT(IDOSO)                                                                                  
   FROM vwUPA_FILA                                                     
   WHERE RISCO = 0                                           
   AND  IDOSO = 1                                                                                  
                                                                           
   IF (@Contador > 1)                     
   BEGIN                                                                                  
                                                                                 
    -- Coloca o registro como ÃƒÆ’Ã‚Âºltimo da fila dos SEM RISCO e Idosos                                                                                  
    --Verifica qual o penÃƒÆ’Ã‚Âºltimo sequencial do idoso cadastrado(o ÃƒÆ’Ã‚Âºltimo ÃƒÆ’Ã‚Â© o novo acolhido)                                                
    SELECT @SEQUENCIAL_SEMRISCO = (MAX(SEQUENCIAL) + 1)                                                                                   
    FROM vwUPA_FILA                                                                                  
    WHERE RISCO = 0                                                                                  
    AND  IDOSO = 1                                                                                  
    AND  ACO_CODIGO < @ACO_CODIGO                                                                                   
                                                                                 
   END                                     
   ELSE                                                                                  
   BEGIN                     
    SELECT @SEQUENCIAL_SEMRISCO = (ISNULL(MAX(SEQUENCIAL), 0) +1)                                                                                  
    FROM vwUPA_FILA                                                                  
    WHERE convert(int,RISCO) <= (select top 1 convert(int,risaco_gravidade)                                                                               
     from risco_acolhimento ra                                                      
     join protocolo_acolhimento pa on ra.proate_codigo = pa.proate_codigo                                  
     join unidade u on pa.proate_codigo = u.unid_modelo_risco                                                                              
     where risaco_fila = 'E'                                                                              
     order by risaco_gravidade desc)                                                                        
                                                                                 
    --Atualiza o primeiro idoso                                                                    
                                                                                 
   END                                                                                  
                                                                                 
   --Atualiza o paciente escolhido                                                            
   UPDATE  UPA_FILA_SEQUENCIAL SET                                                                                        
    SEQUENCIAL = @SEQUENCIAL_SEMRISCO                                                                                        
   WHERE  ACO_CODIGO = @ACO_CODIGO                                                                                  
                                                                                   
   -- ATUALIZA O RESTANTE DOS REGISTROS SEM RISCO E NÃƒÆ’Ã†â€™O IDOSOS                                                                                        
   UPDATE  UPA_FILA_SEQUENCIAL SET                                                                                        
    UPA_FILA_SEQUENCIAL.SEQUENCIAL = UPA_FILA_SEQUENCIAL.SEQUENCIAL + 1                                                    
    FROM VWUPA_FILA F                                                                                      
   WHERE F.ACO_CODIGO = UPA_FILA_SEQUENCIAL.ACO_CODIGO                                                                                      
   AND F.ACO_CODIGO <> @ACO_CODIGO                                                                                        
   AND UPA_FILA_SEQUENCIAL.SEQUENCIAL >= @SEQUENCIAL_SEMRISCO                                                                                        
   AND F.RISCO = 0                                                                                
                                                                                   
   -- Inclui o registro no histÃƒÆ’Ã‚Â³rico                                                                                  
   IF (@ACO_CODIGO IS NOT NULL)                                                                                  
   BEGIN                                                                                    
    INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                                                                                  
    VALUES (@ACO_CODIGO, GETDATE(), 7, @LOCAL_DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                                                                                  
   END                                                                                  
                                                                         
  END                                                                                  
 END                                    
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                 
 -- Seleciona os pacientes da fila para atendimento nÃƒÆ’Ã‚Â£o informatizado                                                              
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                            
 if @opcao = 23                                     BEGIN                                                                                  
   SELECT                                                                              
   SPA_CODIGO,                        
   ACO_CODIGO,                                                                              
   vw.LOCATEND_CODIGO,                                                                              
   LOCATEND_DESCRICAO,                                             
   CASE WHEN NOMESOCIAL IS NOT NULL THEN                        
  NOMESOCIAL + '[' + NOME + ']'                        
   ELSE                         
  NOME                        
   END AS NOME,                                                                               
   RISCO,                                                                               
   SEQUENCIAL,                         
   DATA_CONFIRMACAO,                                                        
   NUM_CHAMADAS,                                                                               
   CHAMADA_ATIVA,                                        
   DATA_CANCELAMENTO,                                                                               
   DESTINO,                                                                               
   IDOSO,                                                                               
   ACO_DATAHORA                                                                                  
  FROM  vwUPA_Fila_Atendimento_Circulante vw                                                                              
  inner join  vwlocal_unidade localAtendimento on localAtendimento.locatend_codigo = vw.locatend_codigo                                                              where vw.LOCATEND_CODIGO = isnull(@LOCATEND_CODIGO, vw.LOCATEND_CODIGO)                  
  
    
      
        
          
            
              
                
                  
                                                            
  ORDER BY RISCO DESC, IDOSO DESC, PRIORIDADE DESC, ACO_CODIGO ASC                                                                              
                                                             
 END                                                                               
                                                                                 
 -- /////////////////////////////////////////////////////////////                                                                                  
 -- SELECIONA O NOMA QUE ESTA SENDO EXIBIDO NO PAINEL                                                                                  
 -- UTILIZADO PELO PAINEL NO MODO DE EXIBICAO MINIMIZADO                                                                                  
 -- /////////////////////////////////////////////////////////////                                                  
 IF @opcao = 24                                                                                  
 BEGIN                                 
                                   
  SELECT TOP 1 P.ACO_CODIGO,                                                                                   
    F.DESTINO, CASE WHEN P.NOMESOCIAL IS NOT NULL THEN P.NOMESOCIAL ELSE P.NOME END AS 'NOME'                     
  FROM vwUPA_Painel P                                                                                  
  INNER JOIN vwUPA_FILA F ON F.ACO_CODIGO = P.ACO_CODIGO                                                                                  
  ORDER BY P.DATA_ULTIMA_EXIBICAO ASC, P.DATA_CHAMADA ASC                                                                                  
                                                                                 
 END                                                                                  
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                               
 -- Seleciona os pacientes agendados no dia                                                                 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                
   
    
      
           
 if @opcao = 25                                                                                  
 BEGIN                                                                     
                                                                                 
 SELECT agd_sequencial,                                                                          
   agd_datahora,                        
   CASE WHEN p.pac_nome_social is not null THEN                         
  p.pac_nome_social + '[' + p.pac_nome + ']'                        
   ELSE                        
  p.pac_nome                        
   end as pac_nome,                                                                                                                                         
   a.atend_codigo,                                                     
   isnull(parbol_usacheckin,'N') parbol_usacheckin                                                                                  
                                                                                 
  FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                                                                  
   left join parametro_boletim pb on (pb.unid_codigo = ac.unid_codigo)                                                             
   left join atendimento a on a.atend_codigo = ac.atend_codigo                                                          
                                                                   
  WHERE (ac.agd_situacao = '0' or ac.agd_situacao = '5')                            
   and not exists                                                                                   
   (select 1 from atendimento_ambulatorial where atend_codigo = ac.atend_codigo)                                            
   and ac.agd_datahora between convert(smalldatetime, convert(varchar,getdate(),112)) and dateadd(d,1,convert(smalldatetime, convert(varchar,getdate(),112)))                                                                                  
   and ac.prof_codigo = @PROF_CODIGO                                                 
   and ac.locatend_codigo = @LOCATEND_CODIGO                                                                                  
   and ac.unid_codigo = @UNID_CODIGO                                                                                  
                                                                                 
  ORDER BY agd_datahora                                                                                  
                                                                               
 END                                                                                  
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- Seleciona os pacientes da fila para Atendimento para EmergÃƒÆ’Ã‚Âªncia                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 if @opcao = 26                                                                                  
 BEGIN                                                                                  
  SELECT  E.EMER_CODIGO AS CODIGO                                                                                  
   ,F.ACO_CODIGO                                                                  
   ,F.NOME                                                                                   
   ,F.RISCO                                                                                  
   ,LA.SET_DESCRICAO AS LOC_DESCRICAO                          
   ,F.ACO_DATAHORA AS DATAHORA                                                                                  
   ,F.SEQUENCIAL                                                                                  
   ,F.CHAMADA_ATIVA                                                     
   ,F.DESTINO                                                                                  
   ,UE.EMER_CODIGO_DESTINO AS CODIGO_DESTINO                                                                                  
   ,F.IDOSO                                                                               
 FROM  EMERGENCIA E                                                                                  
  INNER JOIN VWCLINICA_SPA LA ON LA.LOCATEND_CODIGO = E.LOCATEND_CODIGO                                                                                  
  INNER JOIN vwUPA_FILA_Atendimento_Emergencia F ON F.EMER_CODIGO = E.EMER_CODIGO                       
  LEFT JOIN UPA_ENCAMINHAMENTO UE ON (UE.LOCATEND_CODIGO_DESTINO = E.LOCATEND_CODIGO AND UE.EMER_CODIGO_DESTINO = E.EMER_CODIGO)                                                                                  
  WHERE LA.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LA.LOCATEND_CODIGO)                                                                                  
  ORDER BY RISCO DESC, SEQUENCIAL ASC                                   
 END                         
                                         
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- PROFISSIONAL/ESPECIALIDADE COM ATENDIMENTOS EM ABERTO PARA EMERGENCIA                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                 
 IF @opcao = 27                                                       
 BEGIN                                                                                  
  SELECT  X.EMER_CODIGO                                              
   , X.NOME                                    
   , X.LOC_DESCRICAO                                                            
   , X.PROF_NOME                                                                                  
   , X.LOCATEND_CODIGO                                                                                  
   , X.PROF_CODIGO                                                
   , Y.TOTALSEMRETORNO                                                                                  
   , Z.TOTALCOMRETORNO                       
   , W.UPAENC_PRIORIDADE                                                                                  
   , W.UPAENC_DATAENCAMINHADO                                        
   , '0' AS TIPO                                                                                   
  FROM                                                                                   
   (                                              
   SELECT  EMER.EMER_CODIGO AS [EMER_CODIGO]                                                                                  
    , NOME = isnull(pac.pac_nome, EMER.EMER_NOME)                                  
    , LA.SET_DESCRICAO AS LOC_DESCRICAO                                                                          
    , PROF.PROF_NOME                                                                                  
, AA.LOCATEND_CODIGO                                                                                  
    , AA.PROF_CODIGO                                                            
   FROM  EMERGENCIA EMER                                                                                  
   INNER JOIN ATENDIMENTO_AMBULATORIAL AA ON  AA.EMER_CODIGO = EMER.EMER_CODIGO                                                                                  
   INNER JOIN UPA_Atendimento_Medico AM ON AM.atendamb_CODIGO = AA.atendamb_CODIGO                    
   INNER JOIN PROFISSIONAL prof ON (prof.prof_codigo = AA.prof_codigo AND prof.locatend_codigo = AA.locatend_codigo)                             
   INNER JOIN VWCLINICA_SPA LA ON LA.LOCATEND_CODIGO = EMER.LOCATEND_CODIGO                                                                  
   Left join paciente pac on pac.pac_codigo = emer.pac_codigo                                  
   WHERE AA.ATENDAMB_DATAFINAL IS NULL                                                                                  
   AND (AM.TIPSAI_CODIGO NOT IN (4,5) OR AM.TIPSAI_CODIGO IS NULL)                                                                                  
   AND AA.LOCATEND_CODIGO = @LOCATEND_CODIGO                                                                                  
   AND AA.PROF_CODIGO = @PROF_CODIGO                                                                                  
   AND NOT EXISTS                                                                                
    (SELECT 1 FROM INTERNACAO I                                                                                  
  WHERE I.EMER_CODIGO = EMER.EMER_CODIGO)                         
   ) X                                                                                  
   LEFT JOIN                               
   (                                                                                  
   SELECT  EMER_CODIGO                                                                                  
    , UPAENC_PRIORIDADE                                                                                  
    , UPAENC_DATAENCAMINHADO                                                                                  
   FROM UPA_ENCAMINHAMENTO                                         
   WHERE UPATIPENC_CODIGO = 3                                                   
   AND UPAENC_DATARETORNO IS NULL                                                                    
   ) W                                                                                  
   ON W.EMER_CODIGO = X.EMER_CODIGO                                                                                  
  LEFT JOIN                                                                            
   (                                                                                  
   SELECT  EMER_CODIGO                                                                                  
    , COUNT(*) AS TOTALSEMRETORNO                                                                                  
   FROM UPA_ENCAMINHAMENTO                                         
   WHERE UPAENC_DATARETORNO IS NULL                                                                                  
   GROUP BY EMER_CODIGO                                                            
   ) Y                                                             
   ON Y.EMER_CODIGO = X.EMER_CODIGO                                                                                   
  LEFT JOIN                                                                                   
   (                                                                                  
   SELECT DISTINCT                                                        
   EMER_CODIGO                                                                                  
    , COUNT(*) AS TOTALCOMRETORNO                                                        
   FROM UPA_ENCAMINHAMENTO                                                                                  
   WHERE UPAENC_DATARETORNO IS NOT NULL                                                                                  
   GROUP BY EMER_CODIGO                                                                                  
   ) Z                                                                                  
   ON Z.EMER_CODIGO = X.EMER_CODIGO                                                                                  
  UNION                                                                                  
 SELECT  X.EMER_CODIGO                                                                                  
   , X.NOME                                                      
   , X.LOC_DESCRICAO                                                                                  
   , X.PROF_NOME                                                                                  
   , X.LOCATEND_CODIGO                                                                                  
   , X.PROF_CODIGO                                                                                  
   , NULL                                                                                  
   , NULL                                                                                  
   , W.UPAENC_PRIORIDADE                                                                                  
   , W.UPAENC_DATAENCAMINHADO                                                                                  
   , '1' AS TIPO                                                
  FROM                                                                                   
   (                                    
   SELECT  EMER.EMER_CODIGO AS [EMER_CODIGO]                                                                                   
   , NOME = ISNULL(PAC.PAC_NOME, EMER.EMER_NOME)                                  
    , LA.SET_DESCRICAO AS LOC_DESCRICAO                                                                                  
    , PROF.PROF_NOME                                                                           
    , AA.LOCATEND_CODIGO                                                                                  
    , AA.PROF_CODIGO                                                  
   FROM  EMERGENCIA EMER                                                                                  
   INNER JOIN ATENDIMENTO_AMBULATORIAL AA ON AA.EMER_CODIGO = EMER.EMER_CODIGO                                                                               
   INNER JOIN UPA_Atendimento_Medico AM ON AM.atendamb_codigo = AA.atendamb_CODIGO                                           
   INNER JOIN PROFISSIONAL prof ON (prof.prof_codigo = AA.prof_codigo AND prof.locatend_codigo = AA.locatend_codigo)                                                                                
   INNER JOIN VWCLINICA_SPA LA ON LA.LOCATEND_CODIGO  = EMER.LOCATEND_CODIGO                                                                                   
   LEFT JOIN PACIENTE PAC ON PAC.PAC_CODIGO = EMER.PAC_CODIGO                                  
   WHERE AA.ATENDAMB_DATAFINAL IS NULL                                              
   AND (AM.TIPSAI_CODIGO NOT IN (4,5) OR AM.TIPSAI_CODIGO IS NULL)                                                          
   AND NOT EXISTS                                                                                   
    (                                                                                  
    SELECT 1 FROM INTERNACAO I                                                                                  
  WHERE I.EMER_CODIGO = EMER.EMER_CODIGO                                                                    
    )                                                                                  
   ) X             
  INNER JOIN                                                                                  
   (                                                                                  
   SELECT Y.EMER_CODIGO                                                
    , Z.UPAENC_PRIORIDADE                                                                                  
    , Z.UPAENC_DATAENCAMINHADO                                                                                  
   FROM                                          
    (                                                                                  
SELECT DISTINCT EMER_CODIGO                                                                                  
    FROM UPA_ENCAMINHAMENTO                                                                             
    WHERE LOCATEND_CODIGO_DESTINO = @LOCATEND_CODIGO                                                                                  
    AND PROF_CODIGO_ORIGEM <> @PROF_CODIGO                                         
    AND UPAENC_DATARETORNO IS NULL                                                                                  
    ) Y                       
   LEFT JOIN                                                                                   
    (                                                                                  
    SELECT EMER_CODIGO                                                                                  
  , UPAENC_PRIORIDADE                                                                                  
  , UPAENC_DATAENCAMINHADO                                                                                  
    FROM UPA_ENCAMINHAMENTO              
    WHERE UPATIPENC_CODIGO = 3                                                                                  
    AND LOCATEND_CODIGO_DESTINO = @LOCATEND_CODIGO                                                                                  
    AND PROF_CODIGO_ORIGEM <> @PROF_CODIGO                                                                                  
    AND UPAENC_DATARETORNO IS NULL                                                                                  
    ) Z                                                                                  
    ON Z.EMER_CODIGO = Y.EMER_CODIGO                                                                                  
   ) W                                                                
  ON W.EMER_CODIGO = X.EMER_CODIGO                                                                                  
  ORDER BY UPAENC_PRIORIDADE DESC, UPAENC_DATAENCAMINHADO, X.EMER_CODIGO DESC                                                                               
 END                          
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- ESPECIALIDADE COM ATENDIMENTOS EM ABERTO                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                   
 IF @opcao = 28                              
                                                                                 
 BEGIN                        
  SELECT  X.EMER_CODIGO                                                                                  
   , X.NOME                                                                                  
   , X.LOC_DESCRICAO                                                                                  
   , X.PROF_NOME                                                                                  
   , X.LOCATEND_CODIGO                                    
   , X.PROF_CODIGO                               
   , Y.TOTALSEMRETORNO                                                                                  
   , Z.TOTALCOMRETORNO                                                                                  
   , W.UPAENC_PRIORIDADE                                                                                  
   , W.UPAENC_DATAENCAMINHADO                                                                                  
   , '0' AS TIPO                                                                                   
  FROM                                 
   (                                                                                  
   SELECT EMER.EMER_CODIGO AS [EMER_CODIGO]                                                                           
    , NOME = isnull(pac.pac_nome, EMER.EMER_NOME)                                   
    , LA.SET_DESCRICAO AS LOC_DESCRICAO                                                                                  
    , PROF.PROF_NOME                       
    , AA.LOCATEND_CODIGO           
    , AA.PROF_CODIGO                                                                        
   FROM  EMERGENCIA EMER                                                                                  
   INNER JOIN ATENDIMENTO_AMBULATORIAL AA ON EMER.EMER_CODIGO = AA.EMER_CODIGO                                                                                  
   INNER JOIN UPA_Atendimento_Medico AM ON AA.ATENDAMB_CODIGO = AM.ATENDAMB_CODIGO                                                                            
   INNER JOIN PROFISSIONAL prof ON (prof.prof_codigo = AA.prof_codigo AND prof.locatend_codigo = AA.locatend_codigo)                                              
   INNER JOIN VWCLINICA_SPA LA ON EMER.LOCATEND_CODIGO = LA.LOCATEND_CODIGO                                                                                
   left join paciente pac on pac.pac_codigo = emer.pac_codigo                                  
   WHERE AA.ATENDAMB_DATAFINAL IS NULL                                                                                  
   AND (AM.TIPSAI_CODIGO NOT IN (4,5) OR AM.TIPSAI_CODIGO IS NULL)                                                                                  
   AND AA.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO , AA.LOCATEND_CODIGO)                                                                                  
   AND AA.PAC_CODIGO = ISNULL(@PAC_CODIGO, AA.PAC_CODIGO)                                                                                  
   AND NOT EXISTS (SELECT 1 FROM INTERNACAO I                                                                                  
  WHERE I.EMER_CODIGO = EMER.EMER_CODIGO)                                                                   
   ) X                                                                                  
  LEFT JOIN                                                                                  
   (                                                                                  
   SELECT EMER_CODIGO                                                              
    , UPAENC_PRIORIDADE                                                                                  
    , UPAENC_DATAENCAMINHADO                                                                    
   FROM UPA_ENCAMINHAMENTO                                                                                  
   WHERE UPATIPENC_CODIGO = 3                                                      
   AND UPAENC_DATARETORNO IS NULL                                                                                  
   ) W                                                                                  
   ON W.EMER_CODIGO = X.EMER_CODIGO                                   
  LEFT JOIN                                                                                  
   (                                                         
   SELECT  EMER_CODIGO                                                                                  
    , COUNT(*) AS TOTALSEMRETORNO                                                            
   FROM UPA_ENCAMINHAMENTO                                                                                  
   WHERE UPAENC_DATARETORNO IS NULL                                                                                  
   GROUP BY EMER_CODIGO                                                                                  
   ) Y                                                                                  
   ON Y.EMER_CODIGO = X.EMER_CODIGO                                                                                   
  LEFT JOIN                                                                                 
   (                                                 
   SELECT DISTINCT                                                                                   
    EMER_CODIGO                                                                                  
    , COUNT(*) AS TOTALCOMRETORNO                                                                                   
   FROM UPA_ENCAMINHAMENTO                                                                                  
   WHERE UPAENC_DATARETORNO IS NOT NULL                                                               
   GROUP BY EMER_CODIGO                                                                                  
   ) Z                  ON Z.EMER_CODIGO = X.EMER_CODIGO                                                                                  
  UNION                                       
                                                                     
  SELECT  X.EMER_CODIGO                                                                                  
   , X.NOME                                                                                  
   , X.LOC_DESCRICAO                                                   
   , X.PROF_NOME                                                                                  
   , X.LOCATEND_CODIGO                                                                                  
   , X.PROF_CODIGO                                                                             
   , NULL                                                                                  
   , NULL                                                                
   , W.UPAENC_PRIORIDADE                    
   , W.UPAENC_DATAENCAMINHADO                                                                                  
   , '1' AS TIPO                                                                                   
  FROM                                                                                   
   (                                                                 
   SELECT EMER.EMER_CODIGO AS [EMER_CODIGO]                              
    , NOME = isnull(pac.pac_nome, EMER.EMER_NOME)                                   
    , LA.SET_DESCRICAO AS LOC_DESCRICAO                                                                                  
    , PROF.PROF_NOME                                                                      
    , AA.LOCATEND_CODIGO                                                     
    , AA.PROF_CODIGO                                                                                  
    FROM  EMERGENCIA EMER                                               
  INNER JOIN ATENDIMENTO_AMBULATORIAL AA ON EMER.EMER_CODIGO = AA.EMER_CODIGO                                                                                  
   INNER JOIN UPA_Atendimento_Medico AM on AA.ATENDAMB_CODIGO = AM.ATENDAMB_CODIGO                                                                                  
   INNER JOIN PROFISSIONAL prof on (prof.prof_codigo = AA.prof_codigo and prof.locatend_codigo = AA.locatend_codigo)                                                                                  
   INNER JOIN VWCLINICA_SPA LA ON LA.LOCATEND_CODIGO = EMER.LOCATEND_CODIGO                                                               
   left join paciente pac on pac.pac_codigo = emer.pac_codigo                               
   WHERE AA.ATENDAMB_DATAFINAL IS NULL                                                                                  
   AND (AM.TIPSAI_CODIGO NOT IN (4,5) OR AM.TIPSAI_CODIGO IS NULL)                                                                          
   AND AA.PAC_CODIGO = ISNULL(@PAC_CODIGO, AA.PAC_CODIGO)                                         
                                                                                 
   AND NOT EXISTS (SELECT 1 FROM INTERNACAO I                                                 
  WHERE I.EMER_CODIGO = EMER.EMER_CODIGO)                                                                                  
   ) X                                                                
  INNER JOIN                                                                                  
   (                                                                      
   SELECT Y.EMER_CODIGO                                                                                  
    , Z.UPAENC_PRIORIDADE                                                                                  
 , Z.UPAENC_DATAENCAMINHADO                                         
   FROM                                                             
    (                           
    SELECT DISTINCT EMER_CODIGO                                                   
    FROM UPA_ENCAMINHAMENTO                                                                                  
    WHERE LOCATEND_CODIGO_DESTINO = ISNULL(@LOCATEND_CODIGO , LOCATEND_CODIGO_DESTINO)                                                                                  
    AND PROF_CODIGO_ORIGEM <> @PROF_CODIGO                                                                                  
    AND UPAENC_DATARETORNO IS NULL                                                                                  
    ) Y                                                                                  
   INNER JOIN                                         
    (                                                                                  
    SELECT EMER_CODIGO                                                                                  
  , UPAENC_PRIORIDADE                                                   
  , UPAENC_DATAENCAMINHADO                                                                                  
    FROM UPA_ENCAMINHAMENTO                                                                                  
    WHERE UPATIPENC_CODIGO = 3                                                                                  
    AND LOCATEND_CODIGO_DESTINO = ISNULL(@LOCATEND_CODIGO, LOCATEND_CODIGO_DESTINO)                                                                                  
    AND PROF_CODIGO_ORIGEM <> @PROF_CODIGO                                                                                  
    AND UPAENC_DATARETORNO IS NULL                                                                                  
    ) Z                                                                                
    ON Z.EMER_CODIGO = Y.EMER_CODIGO                        
   ) W                                                                                  
  ON W.EMER_CODIGO = X.EMER_CODIGO                                                            
  ORDER BY UPAENC_PRIORIDADE DESC, UPAENC_DATAENCAMINHADO, X.EMER_CODIGO DESC                                                                      
 END                                                                     
                                                                                 
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 -- PACIENTES EM OBSERVACAO E AGUARDANDO LEITO --                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
 IF @OPCAO = 29                                                                                  
 BEGIN                                                                                  
  -- PACIENTES ACOLHIDOS COM RISCO REGISTRADOS E QUE POSSUEM ATENDIMENTO AMBULATORIAL                                                        
  -- ENCAMINHANDO COM TIPO DE SAÃƒÆ’Ã‚ÂDA OBSERVACAO E RISCO AMARELO OU VERMELHO                                                                                
  SELECT  EMER.EMER_codigo AS CODIGO                                                                                  
   ,NOME = isnull(pac.pac_nome, EMER.EMER_nome)                                   
   ,lu.set_descricao AS localAtendimento                                                                    
   ,NULL AS localInternacao                                                                                  
   ,NULL AS leito                                                                                  
   ,NULL AS inter_codigo                                                                                  
   ,prof.prof_nome AS profAtendimento                                                                   
   ,NULL AS profInternacao                                                                            
   ,cr.upaclaris_risco                                                                 
   ,CASE                                                                                   
    WHEN am.TIPSAI_CODIGO = 4 THEN 'EM OBSERVAÇÃO'                                                                                  
    WHEN am.TIPSAI_CODIGO = 5 THEN 'REMOÇÃO'                                                                                   
END AS tipoSaidaAmbulatorio                                                                                  
   ,CASE                                                                                   
    WHEN am.TIPSAI_CODIGO = 4 THEN 1                                                              
    WHEN am.TIPSAI_CODIGO = 5 THEN 3                                                                                
   END AS SITUACAO                                                            
  FROM EMERGENCIA EMER                                                                                  
  INNER JOIN upa_acolhimento ua ON ua.EMER_codigo = EMER.EMER_codigo                                                                             
 INNER JOIN upa_classificacao_risco cr ON  cr.aco_codigo = ua.aco_codigo                                                                 
  INNER JOIN  vwlocal_unidade lu ON lu.locatend_codigo = EMER.locatend_codigo                                                                           
  INNER JOIN Atendimento_Ambulatorial A ON A.EMER_codigo = EMER.EMER_codigo                                 
  INNER JOIN UPA_Atendimento_Medico AM ON AM.Atendamb_Codigo = A.Atendamb_Codigo                                                        
  INNER JOIN  profissional prof ON (prof.prof_codigo = A.prof_codigo AND prof.locatend_codigo = A.locatend_codigo)                                                                                  
  left join paciente pac on pac.pac_codigo = emer.pac_codigo                                  
  WHERE cr.upaclaris_risco IN (4,6)                                                                                   
  AND AM.TIPSAI_CODIGO IN (4,5)                                                              
  AND A.atendamb_datafinal IS NULL                                                                                  
  AND EMER.unid_codigo = @unid_codigo                                                                                  
  AND NOT EXISTS                                                                                  
   (                                                                        
   SELECT 1 FROM INTERNACAO I                                                                                  
   WHERE I.EMER_CODIGO = EMER.EMER_CODIGO                                                                                  
   )                                                             
  UNION                                                                                   
  -- PACIENTES ACOLHIDOS COM RISCO REGISTRADOS E QUE NÃƒÆ’Ã†â€™O POSSUEM ATENDIMENTO AMBULATORIAL                                              
  SELECT EMER.EMER_codigo AS CODIGO                                                                                  
   ,NOME  = isnull(pac.pac_nome, EMER.EMER_nome)                                  
   ,lu.set_descricao AS localAtendimento                                                                                  
   ,NULL AS localInternacao                                                                                  
   ,NULL AS leito                                                                                 
   ,NULL AS inter_codigo                                                                                  
   ,NULL AS profAtendimento                                                                                  
   ,NULL AS profInternacao                                                                                  
   ,cr.upaclaris_risco                                                                                  
   ,'EM OBSERVAÇÃO' AS tipoSaidaAmbulatorio                                                                                  
   ,1 AS SITUACAO                                                                                  
  FROM  EMERGENCIA EMER                                                     
  INNER JOIN upa_acolhimento ua ON ua.EMER_codigo = EMER.EMER_codigo                                                                              
  INNER JOIN upa_classificacao_risco cr ON cr.aco_codigo = ua.aco_codigo                                                                                              
  INNER JOIN vwlocal_unidade lu ON lu.locatend_codigo = EMER.locatend_codigo                                           
  left join paciente pac on pac.pac_codigo = emer.pac_codigo                                  
  WHERE cr.upaclaris_risco in (4,6)                                                                                  
  AND NOT EXISTS                                                                                  
   (                                 
   SELECT EMER_CODIGO                                               
   FROM ATENDIMENTO_AMBULATORIAL A                                                                                  
   WHERE A.EMER_codigo = EMER.EMER_codigo                           
   )                                                                                  
   AND EMER.unid_codigo = @unid_codigo                                                                                  
  UNION                                                                                   
  -- EM OBSERVACAO                                                                                  
  SELECT  EMER.emer_codigo AS CODIGO                                                                 
   , NOME = isnull(pac.pac_nome, EMER.emer_nome)                                   
   , localAtendimento.set_descricao as localAtendimento                                                                                  
   , localInternacao.set_descricao as localInternacao                                                                                  
   , LocInt_Descricao as leito                                                                                 
   , i.inter_codigo                                                                                  
   , profAtendimento.prof_nome as profAtendimento                                                                                  
   , profInternacao.prof_nome as profInternacao                                          
   , cr.upaclaris_risco                                                                                  
   , CASE                                                                                   
    WHEN am.TIPSAI_CODIGO = 4 THEN 'EM OBSERVAÇÃO'                                                                                  
    WHEN am.TIPSAI_CODIGO = 5 THEN 'REMOÇÃO'                                                                     
   END AS tipoSaidaAmbulatorio                                                                                  
   ,CASE                                                                                   
    WHEN am.TIPSAI_CODIGO = 4 THEN 2                                                                                   
    WHEN am.TIPSAI_CODIGO = 5 THEN 3                                                                              
   END AS SITUACAO                                                     
  FROM EMERGENCIA EMER                                                                                  
  INNER JOIN Atendimento_Ambulatorial A ON A.EMER_codigo = EMER.EMER_codigo                                              
  INNER JOIN upa_acolhimento ua ON ua.EMER_codigo = A.EMER_codigo                                                                
  INNER JOIN upa_classificacao_risco cr ON cr.aco_codigo = ua.aco_codigo                                                              
  INNER JOIN UPA_Atendimento_Medico AM ON AM.atendamb_codigo = A.atendamb_codigo                                                                      
  INNER JOIN vwlocal_unidade localAtendimento ON localAtendimento.locatend_codigo = A.locatend_codigo                                                                        
  INNER JOIN profissional profAtendimento ON (profAtendimento.prof_codigo = A.prof_codigo AND profAtendimento.locatend_codigo = A.locatend_codigo)                                                                                  
  INNER JOIN internacao i ON  i.EMER_codigo = EMER.EMER_codigo                                                                                  
  INNER JOIN vwlocal_unidade localInternacao ON localInternacao.locatend_codigo = i.locatend_codigo                       
  LEFT JOIN vwleito l ON l.locatend_codigo = i.locatend_leito AND l.lei_codigo = i.lei_codigo                                                                                  
  INNER JOIN  profissional profInternacao ON (profInternacao.prof_codigo = i.prof_codigo AND profInternacao.locatend_codigo = i.locatend_codigo)                                                                                  
  left join paciente pac on pac.pac_codigo = emer.pac_codigo                                   
  WHERE i.inter_dtalta IS NULL                                              
  AND EMER.unid_codigo = @unid_codigo                                                                                  
  ORDER BY situacao ASC, cr.upaclaris_risco DESC                                                                                  
 END                                                                                  
                                                                               
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                               
 -- Seleciona os pacientes em Atendimento (com Atendimento Ambulatorial, mas sem Alta) no AGENDAMENTO                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                  
                                                                                 
 if @opcao = 30                                                                                  
 BEGIN                                                                                              
 SELECT agd_sequencial, agd_datahora,                                                                                   
  p.pac_nome, atend_codigo,                               
  prof.prof_nome, vwLA.set_descricao,                                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin                                                                                  
                                                                                 
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                      
  left join parametro_boletim pb on (pb.unid_codigo = ac.unid_codigo)                                  
  left join profissional prof on ac.prof_codigo = prof.prof_codigo and ac.locatend_codigo = prof.locatend_codigo                                                                                  
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                                                                    
                                                                                 
 WHERE (ac.agd_situacao = '5' and exists                                                                                   
   (select 1 from atendimento_ambulatorial where atend_codigo = ac.atend_codigo and atendamb_datafinal is null))                                                                                  
                                                                                 
  and ac.prof_codigo = ISNULL(@PROF_CODIGO, ac.prof_codigo)                                                                                  
  and ac.locatend_codigo = ISNULL(@LOCATEND_CODIGO, ac.locatend_codigo )                                                                                  
  and ac.pac_codigo = isnull(@PAC_CODIGO, ac.pac_codigo)                                                                                  
                                        
 ORDER BY agd_datahora                                                                                  
                                              
 END           
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                         
 -- PACIENTES COM PRESCRICAO                                                                                            
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                            
                            
                                                                    
                            
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                         
-- PACIENTES INTERNADOS SEM ALTA COM PRESCRICAO                                                                                            
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                            
IF @OPCAO = 32                                                                                  
BEGIN                                                                            
                                                                                
 Select                                                              
   null as spa_codigo,                                                                         
   null as emer_codigo,                                                                                  
   '4' as origem,                                                                                
                                                                              
     i.inter_dtalta ,                             
nomePaciente = case                                              
  when (i.inter_dtalta is null) then p.pac_nome                                                                              
  when (i.inter_dtalta is not null) then  'EN' + '-' + p.pac_nome                                               
 end ,                                                             
                                                                                
  p.pac_nome as nomePaciente,                                                                    
   pr.presc_data,                                                                     
   i.inter_codigo,                                                                                  
   LocInt_Descricao as leito,                             
  null as localAtendimento,                                                         
   null as profAtendimento,                                                                                                  
            null as localInternacao,                                                                                  
            null as upaclaris_risco,                                                               
            null as upaatemed_encaminhamentoEixo,null as tipoSaidaAmbulatorio,                                          
   localInternacao.set_descricao as localInternacao,                                           
   profInternacao.prof_nome as profInternacao,                                                                                  
   (select count(*) from item_prescricao ip where ip.presc_codigo = pr.presc_codigo and (                           
      exists (select 1 from item_prescricao_sinais_vitais ipsv                                                  
   where ipsv.presc_codigo = ip.presc_codigo and ipsv.itpresc_codigo = ip.itpresc_codigo)                                  
     or exists (select 1 from item_prescricao_cuidados_especiais ipce                                                                                   
      where ipce.presc_codigo = ip.presc_codigo and ipce.itpresc_codigo = ip.itpresc_codigo)                                                                        
     or exists (select 1 from item_prescricao_dieta ipd                                                                                   
      where ipd.presc_codigo = ip.presc_codigo and ipd.itpresc_codigo = ip.itpresc_codigo)                                                                                  
     or exists (select 1 from item_prescricao_medicamento ipm                                                            
      where ipm.presc_codigo = ip.presc_codigo and ipm.itpresc_codigo = ip.itpresc_codigo)                                                                                           
     or exists (select 1 from item_prescricao_procedimento ipp                                                                                   
      where ipp.presc_codigo = ip.presc_codigo and ipp.itpresc_codigo = ip.itpresc_codigo)                                                                                            
     or exists (select 1 from item_prescricao_oxigenoterapia ipo                                                                                   
      where ipo.presc_codigo = ip.presc_codigo and ipo.itpresc_codigo = ip.itpresc_codigo))) as TotalItem,                                                                           
                                                          
 (select count(distinct(ia.itpresc_codigo)) from item_aprazamento ia where ia.presc_codigo = pr.presc_codigo) as TotalAprazamento                                                                                  
 From  internacao i                                                                                  
 inner Join vwLeito vw on i.locatend_leito = vw.locatend_codigo and i.lei_codigo = vw.lei_codigo                                          
 inner join  vwlocal_unidade localInternacao on  localInternacao.locatend_codigo = i.locatend_codigo                                                                                            
 inner join profissional profInternacao on (profInternacao.prof_codigo = i.prof_codigo and profInternacao.locatend_codigo = i.locatend_codigo)                                     
 inner join prescricao pr on pr.inter_codigo = i.inter_codigo                      
 inner join paciente p on p.pac_codigo = i.pac_codigo                                                                        
 Where (i.inter_DeObservacao = 'N' or i.inter_DeObservacao is null)                                                                                
 and datediff(mi,pr.presc_data, getdate()) <= 1440                                                                              
 and  vw.unid_codigo = @unid_codigo                                              
 and  pr.presc_tipo = 'P'                                                      
 order by p.pac_nome                                
END                                                   
                                                                              
IF @OPCAO = 33                                                                                  
BEGIN                                                                                  
 SELECT UA.ACO_CODIGO,                                                                                         
 UA.SPA_CODIGO,                                                                                      
 UA.EMER_CODIGO,                                                                                        
 CASE WHEN UA.aco_nome_social IS NOT NULL THEN                        
 UA.aco_nome_social + '[' + UA.ACO_NOME + ']'                        
 ELSE                        
 UA.ACO_NOME                        
 END AS ACO_NOME,               
 ra.RISACO_Gravidade as risco,                                                                                        
 LA.SET_DESCRICAO AS LOC_DESCRICAO,               
 UA.ACO_DATAHORA AS DATAHORA,                                                                                        
 UA.ACO_SEQUENCIAL                                                              
 FROM UPA_ACOLHIMENTO UA                                                                                  
 inner join upa_classificacao_risco ucr on ua.aco_codigo = ucr.aco_codigo                                                                                  
 inner join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo and ra.risaco_porta = '3'                                                                                  
 INNER JOIN VWLOCAL_ATENDIMENTO LA   ON LA.LOCATEND_CODIGO = UA.LOCATEND_CODIGO                                                                            
 inner join upa_fila uf on ua.aco_codigo = uf.aco_codigo                                                                                            
 WHERE LA.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LA.LOCATEND_CODIGO) and                                                                             
 ua.spa_codigo is null and ua.emer_codigo is null and                                                                                  
 uf.DATA_CANCELAMENTO is null and                                                                        
 ua.unid_codigo = @UNID_CODIGO                                                                                  
 order by  UA.ACO_DATAHORA desc                                                                          
END                                                                
                                                                           
IF @OPCAO = 34                                          
BEGIN                                                                                
 SELECT LOCATEND_CODIGO                             
 FROM VWUPA_FILA_ACOLHIMENTO                                                                                
 WHERE ACO_CODIGO = @ACO_CODIGO                                                                                
END                                            
                                            
IF @OPCAO = 35                                          
BEGIN                                  
                                  
 /*emergencia*/                                             
 select                        
  null as ATENDAMB_CODIGO,                                              
  ss.pst_codigo as POSTO,                                      
  null as spa_codigo,                                     
  e.emer_codigo,                                                            
  case when e.emer_nome_social is not null then e.emer_nome_social + '[' + e.emer_nome + ']' else  e.emer_nome end as nomePaciente,                                                                     
  lu.set_descricao as localAtendimento,                             
  null as localInternacao,                                                                              
  null as leito,                                                                                          
  null as inter_codigo,                                                    
  prof.prof_nome as profAtendimento,                                            
  null as profInternacao,                                           
  risaco_gravidade as upaclaris_risco,                                                                                       
  case                                                                     
   when am.tipsai_codigo = 5 then 'REMOÇÃO'                                                                          
   when am.tipsai_codigoencaminhamento = 5 then 'EM OBSERVAÇÃO'           
  end as tipoSaidaAmbulatorio,                                                   
  case                               
   when a.atendamb_codigo is null then 1                                                    
   when a.atendamb_codigo is not null then 3                                            
  end AS SITUACAO,                                          
  am.upaatemed_encaminhamentoEixo,                                                                                  
  risaco_gravidade as upaclaris_risco,                                                                                      
  case                                                                                           
  when a.atendamb_codigo is null then '0' else '1'end as atendimentoRealizado,                                                                                        
  case                                                                                         
  when am.upaatemed_encaminhamentoEixo is not null then am.upaatemed_encaminhamentoEixo else convert(int,risaco_gravidade) end as ordenacao                                            
  from                                                                                                
   emergencia e                                                                                 
   inner join Setor_Clinica_Paramtetro_Stok ss on ss.locatendcodigo = e.locatend_codigo                                          
   inner join local_atendimento la on la.locatend_codigo = e.locatend_codigo                                             
   inner join setor_clinica sclu on  la.setcli_codigo = sclu.setcli_codigo and sclu.setcli_codigo = ss.setclicodigo                                              
   inner join risco_acolhimento ra on ra.risaco_codigo = e.risaco_codigo                                                                                      
   inner join vwlocal_unidade lu on  lu.locatend_codigo = e.locatend_codigo                                                  
   left join Atendimento_Ambulatorial A on e.emer_codigo = A.emer_codigo                                                                                          
   left join UPA_Atendimento_Medico AM on A.Atendamb_Codigo = AM.Atendamb_Codigo                                                                                          
   left join profissional prof on (prof.prof_codigo = A.prof_codigo and prof.locatend_codigo = A.locatend_codigo)                                  
  where                                                                                          
   A.atendamb_datafinal IS NULL                                          
   and (a.atendamb_datainicio > dateadd(d, -@periodo, getdate()))                                                   
   and ss.pst_codigo = @PST_CODIGO                                                   
   and( ss.risaco_codigo = ra.risaco_codigo or (ss.risaco_codigo is null and ra.risaco_codigo is null))                                                      
   and ss.tipoSetor = '2'                                          
   and e.unid_codigo = @unid_codigo                                    
   and not exists (select 1 from internacao i where i.emer_codigo = e.emer_codigo)                                                                    
                                  
union                                  
/*emergencia com internacao*/                                  
 select                                     
 null as ATENDAMB_CODIGO,                                 
  l.pst_codigo as POSTO,                                          
  null as spa_codigo,                              
  e.emer_codigo,                                                                               
  case when e.emer_nome_social is not null then e.emer_nome_social + '[' + e.emer_nome + ']' else  e.emer_nome end as nomePaciente,                                                                     
  lu.set_descricao as localAtendimento,                              
  localInternacao.set_descricao as localInternacao,                                                             
  LocInt_Descricao  as leito,                                                                             
  i.inter_codigo as inter_codigo,                                                        
  prof.prof_nome as profAtendimento,                                           
  profInternacao.prof_nome as profInternacao,                                                                                          
  risaco_gravidade as upaclaris_risco,                                                                                       
  case                                                                      
when am.tipsai_codigo = 5 then 'REMOÇÃO'                                                                                        
   when am.tipsai_codigoencaminhamento = 5 then 'EM OBSERVAÇÃO'                                             
  end as tipoSaidaAmbulatorio,                                                    
  case                                                                                           
   when a.atendamb_codigo is null then 1                                                                                        
   when i.inter_codigo is not null then 2                                                                                        
   when a.atendamb_codigo is not null then 3                                                                                        
  end AS SITUACAO,                                                                                   
  am.upaatemed_encaminhamentoEixo,                                                                            
  risaco_gravidade as upaclaris_risco,                                                                                      
  case                                                                                           
  when a.atendamb_codigo is null then '0' else '1'end as atendimentoRealizado,                                                                                        
  case                                                                                         
  when am.upaatemed_encaminhamentoEixo is not null then am.upaatemed_encaminhamentoEixo else convert(int,risaco_gravidade) end as ordenacao                                            
  from                                                                                                
   emergencia e                                                                                 
   inner join local_atendimento la on la.locatend_codigo = e.locatend_codigo                                             
   inner join setor_clinica sclu on  la.setcli_codigo = sclu.setcli_codigo                                  
   inner join risco_acolhimento ra on ra.risaco_codigo = e.risaco_codigo                                                                                      
   inner join vwlocal_unidade lu on  lu.locatend_codigo = e.locatend_codigo                                                  
   left join Atendimento_Ambulatorial A on e.emer_codigo = A.emer_codigo                                                                                          
   left join UPA_Atendimento_Medico AM on A.Atendamb_Codigo = AM.Atendamb_Codigo                                                                                          
   left join profissional prof on (prof.prof_codigo = A.prof_codigo and prof.locatend_codigo = A.locatend_codigo)                                                                                                   
   inner join internacao i on  (i.emer_codigo = e.emer_codigo and i.inter_dtalta is NULL)                                                                                         
   inner join vwlocal_unidade localInternacao on  localInternacao.locatend_codigo = i.locatend_codigo                              
   inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo                                         
   inner join profissional profInternacao on (profInternacao.prof_codigo = i.prof_codigo and profInternacao.locatend_codigo = i.locatend_codigo)                                           
  where                                                                                       
   A.atendamb_datafinal IS NULL                                       
   and (a.atendamb_datainicio > dateadd(d, -@periodo, getdate()))                                  
   and l.pst_codigo = @PST_CODIGO                               
   and e.unid_codigo = @unid_codigo                                  
                                    
union                                       
  /*spa*/                                                                            
  select                            
    null as ATENDAMB_CODIGO,                                          
    ss.pst_codigo AS POSTO,                                          
    p.spa_codigo,                                                                                          
    null as emer_codigo,                                                          
    case when p.spa_nome_social is not null then p.spa_nome_social + '[' + p.spa_nome + ']' else  p.spa_nome end as nomePaciente,                          
    localAtendimento.set_descricao as localAtendimento,                                                                                          
    null as localInternacao,                                                                                          
    null as leito,                                                                                          
    null as inter_codigo,                                                                                          
    profAtendimento.prof_nome as profAtendimento,                                                                                          
    null as profInternacao,                                                                                          
    case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco,                                                                                      
    case                                                                                           
    when am.TIPSAI_CODIGO = 5 then 'REMOÇÃO'                                                
    when am.tipsai_codigoencaminhamento = 5 then 'EM OBSERVAÇÃO' end as tipoSaidaAmbulatorio,                                                                                          
    2 AS SITUACAO,                                                                                          
    am.upaatemed_encaminhamentoEixo,                                                                                          
    case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end AS risco,                                                                   
    '1' as atendimentoRealizado,                                                                                        
    case when cr.upaclaris_codigo is not null then convert(int,cr.upaclaris_risco) else convert(int,rap.risaco_gravidade) end as ordenacao                                            
  from                                                                                            
    pronto_atendimento p                                                                                          
    inner join Atendimento_Ambulatorial a on p.spa_codigo = a.spa_codigo                                                                                          
    inner join upa_acolhimento ua on ua.spa_codigo = a.spa_codigo                                                                                           
    left join upa_classificacao_risco cr on  cr.aco_codigo = ua.aco_codigo                                                                                                   
    left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                        
    left join risco_acolhimento rap on rap.risaco_codigo = p.risaco_codigo                                  
    inner join UPA_Atendimento_Medico AM on A.atendamb_codigo = AM.atendamb_codigo                                                                                    
    inner join vwlocal_unidade localAtendimento on  localAtendimento.locatend_codigo = a.locatend_codigo                                                                                  
    inner join profissional profAtendimento on (profAtendimento.prof_codigo = a.prof_codigo and profAtendimento.locatend_codigo = a.locatend_codigo)                                              
    inner join Setor_Clinica_Paramtetro_Stok ss on ss.locatendCodigo = p.locatend_codigo                                          
 inner join Local_Atendimento la on la.locatend_codigo = p.locatend_codigo                                          
    inner join Setor_Clinica lu on la.SETCLI_CODIGO = lu.setCli_Codigo and lu.setcli_Codigo = ss.setcliCodigo                                  
   where                                                                                            
  a.atendamb_datafinal is null                                            
  and a.atendamb_datainicio > dateadd(d, -@periodo, getdate())                                  
  and ss.pst_codigo = @PST_CODIGO                                                                                       
  and( ss.risaco_codigo = cr.risaco_codigo or (ss.risaco_codigo is null and cr.risaco_codigo is null))                                                      
  and ss.tipoSetor = '3'                                  
  and p.unid_codigo = @unid_codigo                                  
  and not exists (select 1 from internacao i where i.spa_codigo = p.spa_codigo)                                  
                                 
  union                                  
  /*spa vermelho sem internacao*/                                  
  select                        
    null as ATENDAMB_CODIGO,                                              
    ss.pst_codigo AS POSTO,                                          
    p.spa_codigo,                                                                                          
    null as emer_codigo,                               
    case when p.spa_nome_social is not null then p.spa_nome_social + '[' + p.spa_nome + ']' else  p.spa_nome end as nomePaciente,                                                                                    
    localAtendimento.set_descricao as localAtendimento,                                                                                          
    null as localInternacao,                                                                                          
    null as leito,                                                                                          
    null as inter_codigo,                                                                                          
    profAtendimento.prof_nome as profAtendimento,                                                                                          
    null as profInternacao,                                                                                          
    case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco,                                                                                      
    case                                                                                           
    when am.TIPSAI_CODIGO = 5 then 'REMOÇÃO'                                                
    when am.tipsai_codigoencaminhamento = 5 then 'EM OBSERVAÇÃO' end as tipoSaidaAmbulatorio,                                                                                          
    2 AS SITUACAO,                                                                   
    am.upaatemed_encaminhamentoEixo,                                                                                          
    case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end AS risco,                                                                   
    '1' as atendimentoRealizado,                                                                                        
    case when cr.upaclaris_codigo is not null then convert(int,cr.upaclaris_risco) else convert(int,rap.risaco_gravidade) end as ordenacao                                            
  from                                                                                 
    pronto_atendimento p                                                                                          
    inner join Atendimento_Ambulatorial a on p.spa_codigo = a.spa_codigo                                                                                          
    inner join upa_acolhimento ua on ua.spa_codigo = a.spa_codigo                                                                                           
    left join upa_classificacao_risco cr on  cr.aco_codigo = ua.aco_codigo                                                                                                   
    left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                                                                                      
    left join risco_acolhimento rap on rap.risaco_codigo = p.risaco_codigo                                                                                    
    inner join UPA_Atendimento_Medico AM on A.atendamb_codigo = AM.atendamb_codigo                                                                                          
    inner join vwlocal_unidade localAtendimento on  localAtendimento.locatend_codigo = a.locatend_codigo                                                                                       
    inner join profissional profAtendimento on (profAtendimento.prof_codigo = a.prof_codigo and profAtendimento.locatend_codigo = a.locatend_codigo)                                              
    inner join Setor_Clinica_Paramtetro_Stok ss on ss.locatendCodigo = p.locatend_codigo                                          
 inner join Local_Atendimento la on la.locatend_codigo = p.locatend_codigo                                          
    inner join Setor_Clinica lu on la.SETCLI_CODIGO = lu.setCli_Codigo and lu.setcli_Codigo = ss.setcliCodigo                                  
   where                                                                                            
  a.atendamb_datafinal is null                            
  and a.atendamb_datainicio > dateadd(d, -@periodo, getdate())                                  
  and ss.tipoSetor = '2'                                   
  and ss.pst_codigo = @pst_codigo                                  
  and cr.upaclaris_risco = '6'                                  
  and p.unid_codigo = @unid_codigo                                  
  and not exists (select 1 from internacao i where i.spa_codigo = p.spa_codigo)                                  
                                      
  union                                     
  /*spa com internacao*/                                                     
  select                        
    null as ATENDAMB_CODIGO,                                              
    l.pst_codigo AS POSTO,                                          
    p.spa_codigo,                                                                                          
    null as emer_codigo,                                                          
    case when p.spa_nome_social is not null then p.spa_nome_social + '[' + p.spa_nome + ']' else  p.spa_nome end as nomePaciente,                                                                                    
    localAtendimento.set_descricao as localAtendimento,                                                                                          
    localInternacao.set_descricao as localInternacao,                                                                                          
    LocInt_Descricao as leito,                                                                   
    i.inter_codigo,                                                                                          
    profAtendimento.prof_nome as profAtendimento,                                                
    profInternacao.prof_nome as profInternacao,                                                                                          
    case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end as upaclaris_risco,                                                                                      
    case                                    
    when am.TIPSAI_CODIGO = 5 then 'REMOÇÃO'                                                
    when am.tipsai_codigoencaminhamento = 5 then 'EM OBSERVAÇÃO' end as tipoSaidaAmbulatorio,                                                                                          
    2 AS SITUACAO,                  
    am.upaatemed_encaminhamentoEixo,                                                                                          
    case when cr.upaclaris_codigo is not null then cr.upaclaris_risco else rap.risaco_gravidade end AS risco,                                                                   
    '1' as atendimentoRealizado,                                                                                      
    case when cr.upaclaris_codigo is not null then convert(int,cr.upaclaris_risco) else convert(int,rap.risaco_gravidade) end as ordenacao                                            
  from                                                                                       
    pronto_atendimento p                                                                                          
    inner join Atendimento_Ambulatorial a on p.spa_codigo = a.spa_codigo                                                                                          
    inner join upa_acolhimento ua on ua.spa_codigo = a.spa_codigo                                      
    left join upa_classificacao_risco cr on  cr.aco_codigo = ua.aco_codigo                                                                                                   
    left join risco_acolhimento ra on ra.risaco_codigo = cr.risaco_codigo                                                                                      
    left join risco_acolhimento rap on rap.risaco_codigo = p.risaco_codigo                           
    inner join UPA_Atendimento_Medico AM on A.atendamb_codigo = AM.atendamb_codigo                                                                                          
    inner join vwlocal_unidade localAtendimento on  localAtendimento.locatend_codigo = a.locatend_codigo                                                                                       
    inner join profissional profAtendimento on (profAtendimento.prof_codigo = a.prof_codigo and profAtendimento.locatend_codigo = a.locatend_codigo)                                          
    inner join Local_Atendimento la on la.locatend_codigo = p.locatend_codigo                                          
    inner join Setor_Clinica lu on la.SETCLI_CODIGO = lu.setCli_Codigo                                  
    inner join internacao i on  i.spa_codigo = p.spa_codigo                                                                                          
    inner join vwlocal_unidade localInternacao on  localInternacao.locatend_codigo = i.locatend_codigo                                                                                   
    inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo                                        
    inner join profissional profInternacao on (profInternacao.prof_codigo = i.prof_codigo and profInternacao.locatend_codigo = i.locatend_codigo)                                                                                          
  where a.atendamb_datafinal is null                                            
  and a.atendamb_datainicio > dateadd(d, -@periodo, getdate())                                  
  and l.pst_codigo = @PST_CODIGO                                     
  and p.unid_codigo = @unid_codigo                                   
                                                                                        
 order by ordenacao desc, situacao asc                                               
                                            
END                                  
                                  
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
-- LISTA DE AGENDAMENTOS COM OU SEM ATENDIMENTO EM ABERTO                                                  
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
IF @OPCAO = 36                                    
BEGIN                                    
                                    
SELECT distinct ac.agd_sequencial,                                         
  agd_datahora,                                         
  case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                          
  a.atend_codigo,                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
  vwLA.set_descricao,                                    
  a.atend_codigo,                                   
  a.atend_data,                                    
  ac.pac_codigo,                        
  PF.DATA_CONFIRMACAO,                         
  PF.DATA_CANCELAMENTO,                         
  pf.data_inicio_atend,                      
  af.atenf_codigo,              
  case when exists (select 1 from Atendimento_MultiProfissional am where ac.agd_sequencial = am.agd_sequencial) then 'existeMultiProfissional' end as ExisteConsultaProfissional              
          
                                      
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                        
  left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
  left join atendimento a on a.atend_codigo = ac.atend_codigo                                    
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
  left join pep_fila pf on pf.AGD_SEQUENCIAL = ac.AGD_SEQUENCIAL                                     
  left join atendimento_enfermagem af on ac.agd_sequencial = af.agd_sequencial                      
                                     
 WHERE (ac.agd_situacao = '0' or ac.agd_situacao = '5')                                        
  and (                                    
 not exists (select 1 from atendimento_ambulatorial                                    
    where atend_codigo = ac.atend_codigo) )                        
--and ac.agd_datahora between convert(smalldatetime, convert(varchar,getdate(),112)) and dateadd(d,1,convert(smalldatetime, convert(varchar,getdate(),112)))                                    
  and DATEDIFF(d,ac.agd_datahora,GETDATE()) <= isnull(@FiltroDias,1)                        
  and ac.prof_codigo = @PROF_CODIGO                             
  and ac.locatend_codigo = @LOCATEND_CODIGO                                        
  and ac.unid_codigo = @UNID_CODIGO                            
  and (PF.DATA_CONFIRMACAO IS NULL OR pf.data_inicio_atend is null)                        
  and PF.DATA_CANCELAMENTO IS NULL                          
                                      
 --ORDER BY ac.AGD_SEQUENCIAL, ac.agd_datahora                            
 ORDER BY a.atend_data, a.atend_codigo, ac.AGD_SEQUENCIAL, ac.agd_datahora                                
                                    
END                              
                            
-- /////////////////////////////////////////                                
-- //  Lista de Pacientes da Internacao   //                      
-- /////////////////////////////////////////                                
                                
IF @OPCAO = 37                                
  BEGIN                                
                                     
 select                                                    
  l.pst_codigo as POSTO,                                                                                              
  null as spa_codigo,                                    
  null as emer_codigo,                                                                            
  p.pac_nome as nomePaciente,                                                                           
  null as localAtendimento,                                
  localInternacao.set_descricao as localInternacao,                                                              
  LocInt_Descricao  as leito,                                                                             
  i.inter_codigo as inter_codigo,                                                                                                
  null as profAtendimento,                                 
  profInternacao.prof_nome as profInternacao,                                   
  null as upaclaris_risco,                                                
  null as tipoSaidaAmbulatorio,                                                                                
  null AS SITUACAO,                                         
  null as upaatemed_encaminhamentoEixo,                                
  null as upaclaris_risco,                                
  null as atendimentoRealizado,                                                                                              
  null as ordenacao,                              
  pp.Pac_Prontuario_Numero as CodigoProntuario                                            
  from                                                                                                      
   internacao i                                                                                       
   inner join vwlocal_unidade localInternacao on  localInternacao.locatend_codigo = i.locatend_codigo                                                  
   inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo                                                                         
   inner join profissional profInternacao on (profInternacao.prof_codigo = i.prof_codigo and profInternacao.locatend_codigo = i.locatend_codigo)                              
   inner join paciente p on i.pac_codigo = p.pac_codigo                                  
   left join paciente_prontuario pp on p.pac_codigo = pp.pac_codigo                              
  where                                                                                             
   i.inter_dtalta IS NULL                                            
   and l.pst_codigo = @PST_CODIGO                                                                                                         
   and ('00' + SUBSTRING(I.inter_codigo , 1 , 2))  = @unid_codigo                              
   and l.enf_codigo_chave = isnull(@ENF_CODIGO, l.enf_codigo_chave)                                 
order by nomePaciente                              
END                            
  -- ///////////////////////////////////////////////////                                                                                  
 -- CHAMAR O PACIENTE PEP                                                                                         
 -- ///////////////////////////////////////////////////                                                                                        
IF @OPCAO = 38                                                     
 BEGIN                                                                                                     
  DECLARE @NUM_CHAMADAS_PEP INT                                     
  DECLARE @NUM_REPETICOES_PEP INT                             
                                                                                             
  SELECT TOP 1 @NUM_REPETICOES_PEP = ISNULL(NUMERO_REPETICOES, 1) FROM UPA_FILA_CONFIG                                
  SELECT @NUM_CHAMADAS_PEP = NUM_CHAMADAS FROM PEP_FILA  WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                                                                                        
                                                                                             
  IF (ISNULL(@NUM_CHAMADAS_PEP,0) < @NUM_REPETICOES_PEP)                                                      
   BEGIN                                          
    DELETE FROM PEP_FILA WHERE AGD_SEQUENCIAL=@AGD_SEQUENCIAL                          
    INSERT INTO PEP_FILA (AGD_SEQUENCIAL,NUM_CHAMADAS,DESTINO,PAC_CODIGO, UNID_CODIGO) VALUES (@AGD_SEQUENCIAL,0,@DESTINO,@PAC_CODIGO,@UNID_CODIGO)                          
                              
    DELETE FROM PEP_PAINEL WHERE AGD_SEQUENCIAL=@AGD_SEQUENCIAL            
    INSERT INTO PEP_PAINEL (AGD_SEQUENCIAL, DATA_CHAMADA, DATA_PRIMEIRA_EXIBICAO) VALUES (@AGD_SEQUENCIAL, GETDATE(), NULL)                                                                                  
                              
    INSERT INTO PEP_FILA_HISTORICO (AGD_SEQUENCIAL, DATA_HISTORICO,ID_EVENTO,USU_CODIGO,UNID_CODIGO) VALUES (@AGD_SEQUENCIAL,GETDATE(),0,@USUARIO_CODIGO,@UNID_CODIGO)                            
    -- ATUALIZA O NUMERO DE CHAMADAS                                                                         
    UPDATE                             
     PEP_FILA                             
    SET                                                               
     NUM_CHAMADAS = NUM_CHAMADAS + 1,                                                                                          
     DATA_CONFIRMACAO = NULL,                                                                                  
     DESTINO = @DESTINO                                                                                          
    WHERE                             
     AGD_SEQUENCIAL = @AGD_SEQUENCIAL                               
    SELECT ''                                                  
   END                                                                                         
  ELSE                                                                                          
   BEGIN                                                                                          
    -- NUMERO DE CHAMADAS NO PAINEL ESGOTADAS                                                        
    -- ATUALIZA O NUMERO DE CHAMADAS                                                                                     
    UPDATE PEP_FILA SET DATA_CANCELAMENTO = GETDATE() WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                                                                                         
    SELECT 'ESTE PACIENTE FOI RETIRADO DA FILA POIS ATINGIU O NUMERO MAXIMO DE ' + CONVERT(VARCHAR, @NUM_CHAMADAS_PEP) + ' CHAMADAS NO PAINEL.'                                          
   END                            
 END                                 
                                
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                    
 -- Atender o Paciente PEP                                                                                   
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                    
 IF @opcao = 39                                                                                    
 BEGIN                                                                               
                   
  -- Remove o paciente do painel                                      
  DELETE FROM PEP_Painel                                                                                     
  WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                                                                     
                                              
  -- Atualiza o numero de chamadas                                                                                    
  UPDATE                           
  PEP_FILA                           
  SET                                                                                    
  NUM_CHAMADAS = 0,                                                                                    
  DATA_CONFIRMACAO = GETDATE()                                                                               
  WHERE                           
  AGD_SEQUENCIAL = @AGD_SEQUENCIAL                          
  AND UNID_CODIGO = @UNID_CODIGO                          
                               
                              
  INSERT INTO PEP_FILA_HISTORICO (AGD_SEQUENCIAL, DATA_HISTORICO,ID_EVENTO,USU_CODIGO,UNID_CODIGO) VALUES (@AGD_SEQUENCIAL,GETDATE(),1,@USUARIO_CODIGO,@UNID_CODIGO)                                                           
                                    
 END                               
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                               
 -- CANCELAMENTO PEP                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                        
 IF @OPCAO = 40                                                                                     
 BEGIN                                                                                                      
   DECLARE @WDATAPEP SMALLDATETIME                                                                                        
                                                                                           
   SET @WDATAPEP = CONVERT(SMALLDATETIME, GETDATE(), 103)                                                                    
                          
   IF (NOT EXISTS(SELECT AGD_SEQUENCIAL FROM PEP_FILA WHERE AGD_SEQUENCIAL=@AGD_SEQUENCIAL))                          
    BEGIN                          
  INSERT INTO PEP_FILA (AGD_SEQUENCIAL,NUM_CHAMADAS,DESTINO,PAC_CODIGO, UNID_CODIGO, DATA_CANCELAMENTO) VALUES (@AGD_SEQUENCIAL,0,@DESTINO,@PAC_CODIGO,@UNID_CODIGO,GETDATE())                          
    END                                                                                           
   ELSE                          
   BEGIN                             
    UPDATE                           
   PEP_FILA                                               
    SET                           
   DATA_CANCELAMENTO = @WDATAPEP,                             
   DATA_CONFIRMACAO = NULL,                                                                          
   NUM_CHAMADAS = 0                                                                                        
    WHERE                            
   AGD_SEQUENCIAL = @AGD_SEQUENCIAL                          
   AND UNID_CODIGO = @UNID_CODIGO                          
                             
    DELETE FROM PEP_PAINEL WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                            
   END                                                                                
                                          
   INSERT INTO PEP_FILA_HISTORICO (AGD_SEQUENCIAL, DATA_HISTORICO,ID_EVENTO,USU_CODIGO,UNID_CODIGO) VALUES (@AGD_SEQUENCIAL,GETDATE(),3,@USUARIO_CODIGO,@UNID_CODIGO)                                                                    
 END                            
  -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                       
 -- FINALIZAR ATENDIMENTO PEP FILA                                                                                  
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                            
 IF @OPCAO = 41                            
 BEGIN                    
 UPDATE PEP_FILA SET DATA_FINALIZACAO = GETDATE() WHERE AGD_SEQUENCIAL=@AGD_SEQUENCIAL AND UNID_CODIGO=@UNID_CODIGO                            
                             
 INSERT INTO PEP_FILA_HISTORICO (AGD_SEQUENCIAL, DATA_HISTORICO,ID_EVENTO,USU_CODIGO,UNID_CODIGO) VALUES (@AGD_SEQUENCIAL,GETDATE(),2,@USUARIO_CODIGO,@UNID_CODIGO)                            
 END                            
                            
                          
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
-- LISTA DE AGENDAMENTOS EM ANDAMENTO PEP                                                
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
IF @OPCAO = 42                                   
BEGIN                                    
                                    
SELECT distinct ac.agd_sequencial,                                         
  agd_datahora,                                         
  case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                          
  a.atend_codigo,                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
  vwLA.set_descricao,                                    
  a.atend_codigo,                                    
  a.atend_data,                                    
  ac.pac_codigo,                                     
  case when exists (select 1 from UPA_Encaminhamento where ue.atend_codigo = a.atend_codigo and ue.prof_codigo_origem = @PROF_CODIGO) then 'Parecer' end as Parecer,                        
  case when exists (select 1 from pedido_exame_radiologico per where per.atend_codigo = a.atend_codigo and per.STATUS = 'L') then 'Radiologia' end as Radiologia,                        
  --case when exists (select 1 from pedido_exame_radiologico per where per.atend_codigo = a.atend_codigo and per.STATUS = 'L') then 'Radiologia' end as Radiologia,                        
  case when exists (select 1 from Prescricao pr where pr.atend_codigo = a.atend_codigo and pr.idt_fechada = 'S') then 'Prescr' end as Prescr,                        
  LaudoLab.TotalLaudoLiberado as TotalLaudoLiberado,                        
  LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia AS TotalLaudoLiberadoRadiologia,                        
  LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose AS TotalLaudoLiberadoDiagnose,              
  case when exists (select 1 from Atendimento_MultiProfissional am where ac.agd_sequencial = am.agd_sequencial) then 'existeMultiProfissional' end as ExisteConsultaProfissional                  
                                      
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                        
  left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
  left join atendimento a on a.atend_codigo = ac.atend_codigo                                    
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
  left join pep_fila pf on pf.AGD_SEQUENCIAL = ac.AGD_SEQUENCIAL                          
  left  join UPA_Encaminhamento ue on a.atend_codigo = ue.atend_codigo                        
  left join UPA_Parecer up on up.upaenc_codigo = ue.upaenc_codigo                        
  left join UPA_Tipo_Encaminhamento ute on ute.upatipenc_codigo = ue.upatipenc_codigo                        
                           
   LEFT JOIN (                            
  SELECT DISTINCT vsp2.PAC_CODIGO, count(*) as TotalLaudoLiberado                             
  from vwsolicitacao_pedido vsp2                             
   left join Exame_solicitado_laboratorio esl on esl.pedexalab_codigo = vsp2.solped_codigopedido and esl.exasollab_status  in ('LA','LI')                            
  where (vsp2.laudoliberado = 'L' or esl.exalab_codigo is not null) and vsp2.oripac_codigo = 5                             
  group by vsp2.PAC_CODIGO                            
   ) LaudoLab on pf.PAC_CODIGO = LaudoLab.PAC_CODIGO                                      
                           
   LEFT JOIN (SELECT DISTINCT vsp.PAC_CODIGO, COUNT(*) AS TotalLaudoLiberadoRadiologia                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 AND VSP.solped_TipoSolicitacao = '8'                        
  GROUP BY VSP.PAC_CODIGO) LAUDOLAB_RADIOLOGIA ON pf.PAC_CODIGO = LAUDOLAB_RADIOLOGIA.PAC_CODIGO                        
                        
   LEFT JOIN (SELECT DISTINCT vsp.PAC_CODIGO, COUNT(*) AS TotalLaudoLiberadoDiagnose                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 and VSP.solped_TipoSolicitacao = '9'                        
  GROUP BY vsp.PAC_CODIGO) LAUDOLAB_DIAGNOSE ON pf.PAC_CODIGO = LAUDOLAB_DIAGNOSE.PAC_CODIGO                                
                                     
 WHERE (ac.agd_situacao = '0' or ac.agd_situacao = '5')                                        
  and (exists                                    
(select 1 from atendimento_ambulatorial                                     
   where atend_codigo = ac.atend_codigo and                                     
   atendamb_datafinal is null)                                    
      )                                    
--and ac.agd_datahora between convert(smalldatetime, convert(varchar,getdate(),112)) and dateadd(d,1,convert(smalldatetime, convert(varchar,getdate(),112)))                                    
  and DATEDIFF(d,ac.agd_datahora,GETDATE()) <= isnull(@FiltroDias,1)                        
  and ac.prof_codigo = @PROF_CODIGO                                        
  and ac.locatend_codigo = @LOCATEND_CODIGO                                        
  and ac.unid_codigo = @UNID_CODIGO                            
  and PF.DATA_FINALIZACAO IS NULL                          
  AND PF.DATA_CANCELAMENTO IS NULL                          
  AND (PF.DATA_CONFIRMACAO IS NOT NULL OR PF.data_inicio_atend IS NOT NULL)                        
                                      
 ORDER BY ac.AGD_SEQUENCIAL, ac.agd_datahora                                    
                                    
END                           
                        
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                           
 -- FILA PARA CLASSIFICACAO DE RISCO COM RISCO CLASSIFICADO PARA RECLASSIFICACAO                          
 -- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                                                      
 IF @OPCAO = 43                                                                                     
 BEGIN                                                          
  SELECT FC.ACO_CODIGO,                                                                                       
    FC.SPA_CODIGO,                                                                               
    FC.EMER_CODIGO,                            
    case when                           
    pd.id is null then                         
  case when fc.nomesocial is not null then fc.nomesocial + '[' + fc.nome + ']' else FC.NOME end                        
 ELSE                         
  'DENGUE - ' + (case when fc.nomesocial is not null then fc.nomesocial + '[' + fc.nome + ']' else FC.NOME end)                        
 END AS NOME,                                                  
    FC.RISCO,                                                                               
    CASE WHEN (LAPA.LOCATEND_CODIGO IS NOT NULL)                                                       
  THEN LAPA.SET_DESCRICAO                                                                                      
  ELSE LAAC.SET_DESCRICAO                     
    END AS LOC_DESCRICAO,          
    AC.ACO_DATAHORA AS DATAHORA,                                                                                      
    FC.SEQUENCIAL,                                                                                      
    FC.CHAMADA_ATIVA,                                                                                      
    FC.DESTINO,                                                                                      
    FC.IDOSO,                                                        
    FC.CHAMADA_ATIVA2,                                                        
    FC.DESTINO2,                        
    '' as TEMPOESPERAMINUTOS,                        
    '' as TEMPOESPERAATENDIMENTO,                        
    '' AS DATAULTIMOATENDIMENTO                                                             
  FROM vwUPA_Fila_Classificados FC                               
  INNER JOIN PRONTO_ATENDIMENTO PA  ON ( FC.SPA_CODIGO = PA.SPA_CODIGO    and pa.spa_chegada > dateadd(d, -@periodo, getdate()) )                                                                           
  INNER JOIN UPA_ACOLHIMENTO AC   ON ( FC.ACO_CODIGO = AC.ACO_CODIGO  and ac.aco_datahora > dateadd(d, -@periodo, getdate()) )                                                                                            
  LEFT JOIN PROTOCOLO_DENGUE PD   ON PD.SPA_CODIGO = FC.SPA_CODIGO OR PD.ACO_CODIGO = FC.ACO_CODIGO                        
  INNER JOIN VWCLINICA_SPA LAAC   ON AC.LOCATEND_CODIGO = LAAC.LOCATEND_CODIGO                                              
  LEFT OUTER JOIN VWCLINICA_SPA LAPA ON PA.LOCATEND_CODIGO = LAPA.LOCATEND_CODIGO                                                                                           
  WHERE ((LAAC.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LAAC.LOCATEND_CODIGO)                                                                                  
  AND LAPA.LOCATEND_CODIGO IS NULL) OR  (LAPA.LOCATEND_CODIGO = ISNULL(@LOCATEND_CODIGO, LAPA.LOCATEND_CODIGO)                                                                                       
  AND LAPA.LOCATEND_CODIGO IS NOT NULL))                                         
  AND  AC.UNID_CODIGO = @UNID_CODIGO                                                                                      
  AND NOT EXISTS(SELECT 1 FROM atendimento_ambulatorial AA WHERE AA.spa_codigo = PA.SPA_CODIGO AND AA.ATENDAMB_DATAFINAL IS NOT NULL)                        
  ORDER BY FC.PRIORIDADE DESC, FC.ACO_CODIGO ASC                                                                               
                                                  
 END                          
                        
 IF @OPCAO = 44                        
 BEGIN                        
                        
 select                         
  null as atendamb_codigo,                                                   
  l.pst_codigo as POSTO,                                                                                              
  null as spa_codigo,                                    
  null as emer_codigo,                                                                                                 
  case when p.pac_nome_social is not null then p.pac_nome_social + '[' + p.pac_nome + ']' else p.pac_nome end as nomePaciente,                                                                           
  localInternacao.set_descricao as localAtendimento,                                
  LocInt_Descricao  as leito,                                                                                                
  i.inter_codigo as inter_codigo,                                                                   
  profInternacao.prof_nome as profAtendimento,                                 
  null as upaclaris_risco,                                                                                             
  null as tipoSaidaAmbulatorio,                                                                                
  null AS SITUACAO,                                                           
  null as upaatemed_encaminhamentoEixo,                                
  null as upaclaris_risco,                                
  null as atendimentoRealizado,                                                                                              
  null as ordenacao,                              
  pp.Pac_Prontuario_Numero as CodigoProntuario                                            
  from                                                                             
   internacao i                                                                                       
   inner join vwlocal_unidade localInternacao on  localInternacao.locatend_codigo = i.locatend_codigo                                                                                                
   inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo             
   inner join profissional profInternacao on (profInternacao.prof_codigo = i.prof_codigo and profInternacao.locatend_codigo = i.locatend_codigo)                                 
   inner join paciente p on i.pac_codigo = p.pac_codigo                                  
   left join paciente_prontuario pp on p.pac_codigo = pp.pac_codigo                              
  where                                                                                     
   i.inter_dtalta IS NULL                                            
   and l.pst_codigo = @PST_CODIGO                                                                                                         
   and ('00' + SUBSTRING(I.inter_codigo , 1 , 2))  = @unid_codigo                              
   and l.enf_codigo_chave = isnull(@ENF_CODIGO, l.enf_codigo_chave)            
   and (i.inter_DeObservacao != 'S' or i.inter_DeObservacao is null)                            
--order by nomePaciente                           
                        
--union ALL                        
                         
-- select                        
--  aa.atendamb_codigo,                                                    
--  SC.pst_codigo as POSTO,                                                                                              
--  null as spa_codigo,                                    
--  null as emer_codigo,                                                                                                 
--  case when p.pac_nome_social is not null then p.pac_nome_social + '[' + p.pac_nome + ']' else p.pac_nome end as nomePaciente,                                               
--  vwa.LocAtend_descricao as localAtendimento,                               
--  null  as leito,                                                                                                
-- null as inter_codigo,                                                                                                
--  prof.prof_nome as profAtendimento,                                 
--  null as upaclaris_risco,                                                                                             
--  null as tipoSaidaAmbulatorio,                                                                                
--  null AS SITUACAO,                                                                                         
--  null as upaatemed_encaminhamentoEixo,                                
--  null as upaclaris_risco,                                
--  null as atendimentoRealizado,                                                 
--  null as ordenacao,                              
--  pp.Pac_Prontuario_Numero as CodigoProntuario                                            
--from                                                              
--   atendimento_ambulatorial aa                        
--   inner join soap on aa.atendamb_codigo = soap.atendamb_codigo                          
--   inner join vwlocal_atendimento vwa on vwa.locatend_codigo = aa.locatend_codigo                        
--   inner join Setor_Clinica_Paramtetro_Stok sc on  sc.locatendCodigo = aa.locatend_codigo                                                                                                
--   inner join profissional prof on (prof.prof_codigo = aa.prof_codigo and prof.locatend_codigo = aa.locatend_codigo)                 
--   inner join paciente p on aa.pac_codigo = p.pac_codigo                                  
--   left join paciente_prontuario pp on p.pac_codigo = pp.pac_codigo                              
--  where                                                                                             
--   aa.atendamb_datafinal IS NULL                                            
--   and sc.pst_codigo = @PST_CODIGO                                                
--   and p.unid_codigo  = @unid_codigo                              
--   and sc.tipoSetor = 0                        
   --and l.enf_codigo_chave = isnull(@ENF_CODIGO, l.enf_codigo_chave)                                 
                        
order by nomePaciente                             
                        
 END                        
                        
IF @OPCAO = 45                        
BEGIN                        
             
 IF (@ACO_CODIGO IS NOT NULL)                         
  DELETE FROM UPA_PAINEL WHERE ACO_CODIGO = @ACO_CODIGO                        
                         
 UPDATE UPA_FILA                        
 SET NUM_CHAMADAS = 0,                        
 DATA_CONFIRMACAO = NULL,                        
 DESTINO = @DESTINO                        
 WHERE ACO_CODIGO = @ACO_CODIGO                        
                        
 INSERT INTO UPA_FILA_HISTORICO (ACO_CODIGO, DATA_HISTORICO, ID_EVENTO, [LOCAL], ESPECIALIDADE, USU_CODIGO)                        
 VALUES (@ACO_CODIGO, GETDATE(), 13, @DESTINO, @ESPECIALIDADE_CODIGO, @USUARIO_CODIGO)                        
                         
END                        
                        
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
-- LISTA DE AGENDAMENTOS FINALIZADOS PEP                                                
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
IF @OPCAO = 46                                   
BEGIN                                    
                                    
SELECT distinct ac.agd_sequencial,                                         
  agd_datahora,                                         
  case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                         
  a.atend_codigo,                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
  vwLA.set_descricao,                                    
  a.atend_codigo,                                    
  a.atend_data,                                    
  ac.pac_codigo                                     
                                      
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                         
  left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
  left join atendimento a on a.atend_codigo = ac.atend_codigo                                    
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
  left join pep_fila pf on pf.AGD_SEQUENCIAL = ac.AGD_SEQUENCIAL                                    
  inner join atendimento_ambulatorial aa on aa.atend_codigo = a.atend_codigo     
                                     
 WHERE exists (select 1 from atendimento_ambulatorial                                    
    where atend_codigo = ac.atend_codigo)                         
  --and ac.agd_datahora between convert(smalldatetime, convert(varchar,getdate(),112)) and dateadd(d,1,convert(smalldatetime, convert(varchar,getdate(),112)))                                    
  and DATEDIFF(d,ac.agd_datahora,GETDATE()) <= isnull(@FiltroDias,1)                        
  and ac.prof_codigo = @PROF_CODIGO                                        
  and ac.locatend_codigo = @LOCATEND_CODIGO                     
  and ac.unid_codigo = @UNID_CODIGO                            
  and AA.atendamb_datafinal is not null                        
                      
 ORDER BY ac.AGD_SEQUENCIAL, ac.agd_datahora                                    
                                    
END                           
                        
IF @OPCAO = 47                        
BEGIN                        
 IF (@AGD_SEQUENCIAL IS NOT NULL)                         
  DELETE FROM PEP_PAINEL WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                        
                         
 UPDATE PEP_FILA                        
 SET NUM_CHAMADAS = 0,                        
 DATA_CONFIRMACAO = NULL,                        
 DESTINO = @DESTINO                        
 WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                        
                        
 INSERT INTO PEP_FILA_HISTORICO (AGD_SEQUENCIAL, DATA_HISTORICO, ID_EVENTO, USU_CODIGO, UNID_CODIGO)                        
 VALUES (@AGD_SEQUENCIAL, GETDATE(), 13, @USUARIO_CODIGO, @UNID_CODIGO)                         
END                        
                        
                        
IF @OPCAO = 48                        
BEGIN                         
 UPDATE PEP_FILA                        
 SET data_inicio_atend = GETDATE()                        
 WHERE AGD_SEQUENCIAL = @AGD_SEQUENCIAL                        
END                        
                        
IF @OPCAO = 49                        
begin                        
 SELECT distinct ac.agd_sequencial,                                         
 agd_datahora,                                         
 case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                          
 a.atend_codigo,                                        
 isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
 vwLA.set_descricao,                                    
 a.atend_codigo,                                    
 a.atend_data,                                    
 ac.pac_codigo                          
                                      
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                        
 left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
 left join atendimento a on a.atend_codigo = ac.atend_codigo                        
 left join atendimento_ambulatorial aa on a.atend_codigo = aa.atend_codigo                                    
 left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
 inner join UPA_Encaminhamento ue on a.atend_codigo = ue.atend_codigo                        
 inner join UPA_Parecer up on up.upaenc_codigo = ue.upaenc_codigo   
 inner join UPA_Tipo_Encaminhamento ute on ute.upatipenc_codigo = ue.upatipenc_codigo                              
                                     
 where ute.upatipenc_codigo = 4 and ue.atend_codigo is not null                        
 and ue.prof_codigo_destino is null                        
 and ue.prof_codigo_origem <> @PROF_CODIGO                        
 and ue.locatend_codigo_destino = @LOCATEND_CODIGO                                        
 and ac.unid_codigo = @UNID_CODIGO                            
 and aa.atendamb_datafinal IS NULL                        
 and DATEDIFF(d,ac.agd_datahora,GETDATE()) <= isnull(@FiltroDias,1)                        
               
end                        
                        
                        
IF @OPCAO = 50                        
begin                        
 SELECT distinct                         
  p.pac_codigo,                        
  pp.Pac_Prontuario_Numero,                                          
  case when p.pac_nome_social is not null                         
   then p.pac_nome_social + ' [' + p.pac_nome + '] - ' + isnull(cast(dbo.CalculaIdade(getdate(), p.pac_nascimento) as varchar(20)) + ' anos', '')  + ' - ' + isnull(p.pac_sexo, '')                        
   else p.pac_nome + ' - ' + isnull(cast(dbo.CalculaIdade(getdate(), p.pac_nascimento) as varchar(20)) + ' anos', '')  + ' - ' + isnull(p.pac_sexo, '')                        
  end as PAC_NOME,                          
  case when p.pac_sexo = 'F' then 'Feminino' else 'Masculino' end as sexo,                        
  p.pac_idade,                        
  ue.upaenc_dataencaminhado,                        
  vwLA.set_descricao,                        
  i.inter_codigo                        
                         
                                      
 FROM  internacao i inner join                         
  PEDIDO_INTERNACAO pedi on pedi.pedint_sequencial = i.pedint_sequencial                        
  inner join paciente p on i.pac_codigo = p.pac_codigo                                        
  left join Paciente_Prontuario pp on p.pac_codigo = pp.pac_codigo                     
  left join parametro_boletim pb on pb.unid_codigo = p.unid_codigo                                   
  inner join UPA_Encaminhamento ue on i.inter_codigo = ue.inter_codigo                        
  inner join UPA_Parecer up on up.upaenc_codigo = ue.upaenc_codigo                        
  inner join UPA_Tipo_Encaminhamento ute on ute.upatipenc_codigo = ue.upatipenc_codigo                        
  left join vwLocal_Atendimento vwLA on ue.locatend_codigo_destino = vwLA.locatend_codigo                            
 where ute.upatipenc_codigo = 4 and ue.inter_codigo is not null                        
 and ue.prof_codigo_destino is null                        
 and ue.prof_codigo_origem <> @PROF_CODIGO                        
 and ue.locatend_codigo_destino = isnull(@LOCATEND_CODIGO, ue.locatend_codigo_destino)                                   
 and (@PacNomeProntuario is null                        
   or p.pac_nome like '%' + @PacNomeProntuario + '%'                        
   or p.pac_nome_social like '%' + @PacNomeProntuario + '%'                        
   or pp.Pac_Prontuario_Numero like '%' + @PacNomeProntuario + '%')                        
 and p.unid_codigo = @UNID_CODIGO                         
  and i.inter_dtalta is null                    
                         
end                        
                        
IF @OPCAO = 51                                               
BEGIN                        
                         
 DECLARE @DESTINO_CHAMADO_AUXILIAR VARCHAR(50)                        
                        
 IF ( @ATENDAMB_CODIGO IS NULL )                                                            
   BEGIN                                                             
  SELECT @DESTINO_CHAMADO_AUXILIAR = DESTINO                    
  FROM VWUPA_FILA                           
  WHERE ACO_CODIGO = @ACO_CODIGO                                 
    AND  ((CHAMADA_ATIVA = 1 OR DATA_CONFIRMACAO IS NOT NULL)                        
    OR (@ORIGEM = 'R' AND SPA_CODIGO IS NOT NULL)                        
    OR (@ORIGEM = 'C' AND SPA_CODIGO IS NOT NULL AND ORIGEM = 'C')                        
    )                        
   END                                                             
                                   
  ELSE                                                            
   BEGIN                                                              
  SELECT @DESTINO_CHAMADO_AUXILIAR = DESTINO                                                        
  FROM UPA_FILA f                                                            
     INNER JOIN UPA_FILA_SEQUENCIAL fs ON f.ACO_CODIGO = fs.ACO_CODIGO                                                            
     LEFT OUTER JOIN UPA_PAINEL pn ON pn.ACO_CODIGO = fs.ACO_CODIGO                                                            
  WHERE f.ACO_CODIGO = @ACO_CODIGO                                                            
     AND f.DATA_CANCELAMENTO IS NULL                                              
     AND f.ATENDAMB_CODIGO IS NOT NULL                                            
     AND ((pn.ACO_CODIGO IS NOT NULL AND f.NUM_CHAMADAS > 0) OR (f.DATA_CONFIRMACAO IS NOT NULL))                                            
   END                        
                      
 IF (@ACO_CODIGO IS NOT NULL)                        
 BEGIN                        
                        
DECLARE @NUM_CHAMADAS_AUXILIAR INT                                                                                    
  --DECLARE @NUM_REPETICOES_AUXILIAR INT                                        
                                                  
  --SELECT TOP 1                                                                              
  --@NUM_REPETICOES_AUXILIAR = ISNULL(NUMERO_REPETICOES, 1)                                                                  
  --FROM UPA_FILA_CONFIG                                                
                                                                                     
  SELECT @NUM_CHAMADAS_AUXILIAR = NUM_CHAMADAS                                              
  FROM UPA_FILA                                                              
  WHERE ACO_CODIGO = @ACO_CODIGO                                                                                    
                                                                                     
  IF (@NUM_CHAMADAS_AUXILIAR > 0)                        
  BEGIN                        
   SELECT 'ESTE PACIENTE JA ESTA SENDO CHAMADO POR ' + @DESTINO_CHAMADO_AUXILIAR + '.'                           
  END                             
  ELSE                        
  BEGIN                          
   SELECT ''                        
  END                        
 END                         
END                        
                       
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                       
-- LISTA DE AGENDAMENTOS EM ANDAMENTO PEP  , POR DATA                        
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
IF @OPCAO = 52                                   
BEGIN                                   
                                    
SELECT distinct ac.agd_sequencial,                                         
  agd_datahora,                                         
  case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                          
  a.atend_codigo,                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
  vwLA.set_descricao,                                    
  a.atend_codigo,                            
  a.atend_data,                                    
  ac.pac_codigo,                                     
  case when exists (select 1 from UPA_Encaminhamento where ue.atend_codigo = a.atend_codigo and ue.prof_codigo_origem = @PROF_CODIGO) then 'Parecer' end as Parecer,                        
  case when exists (select 1 from pedido_exame_radiologico per where per.atend_codigo = a.atend_codigo and per.STATUS = 'L') then 'Radiologia' end as Radiologia,              
  --case when exists (select 1 from pedido_exame_radiologico per where per.atend_codigo = a.atend_codigo and per.STATUS = 'L') then 'Radiologia' end as Radiologia,                        
  case when exists (select 1 from Prescricao pr where pr.atend_codigo = a.atend_codigo and pr.idt_fechada = 'S') then 'Prescr' end as Prescr,                        
  LaudoLab.TotalLaudoLiberado as TotalLaudoLiberado,                        
  LAUDOLAB_RADIOLOGIA.TotalLaudoLiberadoRadiologia AS TotalLaudoLiberadoRadiologia,                        
  LAUDOLAB_DIAGNOSE.TotalLaudoLiberadoDiagnose AS TotalLaudoLiberadoDiagnose              
                                      
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                        
  left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
  left join atendimento a on a.atend_codigo = ac.atend_codigo                                    
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
  left join pep_fila pf on pf.AGD_SEQUENCIAL = ac.AGD_SEQUENCIAL                          
  left  join UPA_Encaminhamento ue on a.atend_codigo = ue.atend_codigo                        
  left join UPA_Parecer up on up.upaenc_codigo = ue.upaenc_codigo                        
  left join UPA_Tipo_Encaminhamento ute on ute.upatipenc_codigo = ue.upatipenc_codigo                        
                           
   LEFT JOIN (                          
  SELECT DISTINCT vsp2.PAC_CODIGO, count(*) as TotalLaudoLiberado                             
  from vwsolicitacao_pedido vsp2                             
   left join Exame_solicitado_laboratorio esl on esl.pedexalab_codigo = vsp2.solped_codigopedido and esl.exasollab_status  in ('LA','LI')                         
  where (vsp2.laudoliberado = 'L' or esl.exalab_codigo is not null) and vsp2.oripac_codigo = 5                             
  group by vsp2.PAC_CODIGO                            
   ) LaudoLab on pf.PAC_CODIGO = LaudoLab.PAC_CODIGO                                      
                           
   LEFT JOIN (SELECT DISTINCT vsp.PAC_CODIGO, COUNT(*) AS TotalLaudoLiberadoRadiologia                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 AND VSP.solped_TipoSolicitacao = '8'                        
  GROUP BY VSP.PAC_CODIGO) LAUDOLAB_RADIOLOGIA ON pf.PAC_CODIGO = LAUDOLAB_RADIOLOGIA.PAC_CODIGO                        
                        
   LEFT JOIN (SELECT DISTINCT vsp.PAC_CODIGO, COUNT(*) AS TotalLaudoLiberadoDiagnose                        
  FROM VWSOLICITACAO_PEDIDO VSP                        
  WHERE VSP.LAUDOLIBERADO = 'L' AND VSP.ORIPAC_CODIGO = 5 and VSP.solped_TipoSolicitacao = '9'                        
  GROUP BY vsp.PAC_CODIGO) LAUDOLAB_DIAGNOSE ON pf.PAC_CODIGO = LAUDOLAB_DIAGNOSE.PAC_CODIGO                                
                                     
 WHERE (ac.agd_situacao = '0' or ac.agd_situacao = '5')                                        
  and (exists                                    
     (select 1 from atendimento_ambulatorial                                     
   where atend_codigo = ac.atend_codigo and                                     
   atendamb_datafinal is null)                                    
      )                                    
  AND CAST(AC.agd_datahora AS DATE) = CAST(@DATA_INICIAL AS DATE)               
  and ac.prof_codigo = @PROF_CODIGO                                        
  and ac.locatend_codigo = @LOCATEND_CODIGO                                        
  and ac.unid_codigo = @UNID_CODIGO                            
  and PF.DATA_FINALIZACAO IS NULL                          
  AND PF.DATA_CANCELAMENTO IS NULL                          
  AND (PF.DATA_CONFIRMACAO IS NOT NULL OR PF.data_inicio_atend IS NOT NULL)                        
                                      
 ORDER BY ac.AGD_SEQUENCIAL, ac.agd_datahora                                       
                                    
END                     
                    
                    
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
-- LISTA DE AGENDAMENTOS SEM ATENDIMENTO INICIADOS                      
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
IF @OPCAO = 53                     
  BEGIN                    
                    
                                                   
SELECT distinct ac.agd_sequencial,                                         
  agd_datahora,                                         
  case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                          
  a.atend_codigo,                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
  vwLA.set_descricao,                                    
  a.atend_codigo,                                   
  a.atend_data,                                    
  ac.pac_codigo            ,                        
  PF.DATA_CONFIRMACAO,                         
  PF.DATA_CANCELAMENTO,                         
  pf.data_inicio_atend,                      
  af.atenf_codigo              ,        
  case when af.atenf_data_fim > DATEADD(DAY,-1, GETDATE()) THEN 'Sim' else 'Não' end AS atendidoEnfermagem        
                                       
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                        
  left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
  left join atendimento a on a.atend_codigo = ac.atend_codigo                                    
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
  left join pep_fila pf on pf.AGD_SEQUENCIAL = ac.AGD_SEQUENCIAL                                     
  left join atendimento_enfermagem af on ac.agd_sequencial = af.agd_sequencial                      
                                     
 WHERE (ac.agd_situacao = '0' or ac.agd_situacao = '5')                                        
  and (                                    
 not exists (select 1 from atendimento_ambulatorial                                    
    where atend_codigo = ac.atend_codigo) )                        
--and ac.agd_datahora between convert(smalldatetime, convert(varchar,getdate(),112)) and dateadd(d,1,convert(smalldatetime, convert(varchar,getdate(),112)))                                    
  and DATEDIFF(d,ac.agd_datahora,GETDATE()) <= isnull(@FiltroDias,1)                        
  and ac.prof_codigo = @PROF_CODIGO                             
  and ac.locatend_codigo = @LOCATEND_CODIGO                                        
  and ac.unid_codigo = @UNID_CODIGO                            
  and (PF.DATA_CONFIRMACAO IS NULL OR pf.data_inicio_atend is null)                        
  and PF.DATA_CANCELAMENTO IS NULL                          
        
 -- and ( ac.atend_codigo IN (select atend_codigo from atendimento_ambulatorial))                    
                                      
 --ORDER BY ac.AGD_SEQUENCIAL, ac.agd_datahora             
 ORDER BY a.atend_data, a.atend_codigo, ac.AGD_SEQUENCIAL, ac.agd_datahora                                
                
  END                    
                  
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
-- LISTA DE AGENDAMENTOS SEM ATENDIMENTO INICIADOS, AGENDADOS NO DIA - USO EM CONSULTA MULTI-PROFISSIONAL                
-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////////                                                  
IF @OPCAO = 54                
  BEGIN                
                                                      
SELECT distinct ac.agd_sequencial,                                         
  agd_datahora,                                         
  case when p.pac_nome_social is not null then p.pac_nome_social + ' [' + p.pac_nome + ']' else p.pac_nome end as pac_nome,                                          
  a.atend_codigo,                                        
  isnull(parbol_usacheckin,'N') parbol_usacheckin,                                    
  vwLA.set_descricao,                                    
  a.atend_codigo,                                   
  a.atend_data,                                    
  ac.pac_codigo,                        
  PF.DATA_CONFIRMACAO,                         
  PF.DATA_CANCELAMENTO,                         
  pf.data_inicio_atend,                      
  am.atenm_codigo,              
  case when exists (select 1 from Atendimento_MultiProfissional am where ac.agd_sequencial = am.agd_sequencial) then 'existeMultiProfissional' end as ExisteConsultaProfissional              ,
  case when am.atenm_data_final> DATEADD(DAY,-1, GETDATE()) THEN 'Sim' else 'Não' end AS atendidoMultiprofissional
                                      
 FROM  agenda_consulta ac left join paciente p on ac.pac_codigo = p.pac_codigo                                        
  left join parametro_boletim pb on pb.unid_codigo = ac.unid_codigo                                  
  left join atendimento a on a.atend_codigo = ac.atend_codigo                                    
  left join vwLocal_Atendimento vwLA on ac.locatend_codigo = vwLA.locatend_codigo                            
  left join pep_fila pf on pf.AGD_SEQUENCIAL = ac.AGD_SEQUENCIAL                                     
  left join Atendimento_MultiProfissional am on ac.agd_sequencial = am.agd_sequencial                      
                                     
 WHERE (ac.agd_situacao = '0' or ac.agd_situacao = '5')                                        
  and (                                    
 not exists (select 1 from atendimento_ambulatorial                                    
    where atend_codigo = ac.atend_codigo   
    and atendamb_datafinal is not null  
 ) )                        
  -- and ( ac.agd_datahora >= GETDATE())-- BETWEEN GETDATE() AND DATEADD(DAY,15,GETDATE()) )            
  and DATEDIFF(d,ac.agd_datahora,GETDATE()) <= isnull(@FiltroDias,1)                        
  and ac.prof_codigo = @PROF_CODIGO                             
  and ac.locatend_codigo = @LOCATEND_CODIGO                                        
  and ac.unid_codigo = @UNID_CODIGO                            
  and (PF.DATA_CONFIRMACAO IS NULL OR pf.data_inicio_atend is null)                        
  and PF.DATA_CANCELAMENTO IS NULL      
                                     
 --ORDER BY ac.agd_datahora DESC            
  ORDER BY a.atend_data, a.atend_codigo, ac.AGD_SEQUENCIAL, ac.agd_datahora                                
                        
                              
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Agenda_Consulta]...';


GO
-- DROP PROCEDURE [dbo].[ksp_Agenda_Consulta]  
ALTER PROCEDURE [dbo].[ksp_Agenda_Consulta]  
@opcao INT, @data SMALLDATETIME=NULL, @clinica CHAR (4)=NULL, @medico CHAR (4)=NULL, @paciente CHAR (12)=NULL, @situacao CHAR (1)=NULL, @tipo_horario VARCHAR (6)=NULL, @prim_vez CHAR (1)=NULL, @nome_paciente VARCHAR (50)=NULL, @nome_medico VARCHAR (50)=NULL, @nome_clinica VARCHAR (30)=NULL, @numero_consulta CHAR (12)=NULL, @TP_PESQ SMALLINT=NULL, @DISPONIVEL CHAR (1)=NULL, @unid_codigo CHAR (4)=NULL, @agdcha_codigo CHAR (12)=NULL, @tempo_inicio DATETIME=NULL, @tempo_fim DATETIME=NULL, @agd_hora_marcada CHAR (5)=NULL, @pedagd_codigo CHAR (12)=NULL, @agdcon_senha CHAR (3)=null, @procamb_codigo CHAR (10)=null, @Unidref_codigo CHAR (4)=null, @usu_codigo CHAR (4)=null, @atend_codigo CHAR (12)=null, @Agd_Sequenciador INT=null, @AgdEve_Codigo CHAR (12)=null, @prontuario CHAR (10)=null, @DATA_INICIAL CHAR (10)=null, @DATA_FINAL CHAR (10)=null, @filtro_vagas CHAR (1)='P', @unid_codigo_agendamento CHAR (4)=null, @grupo_assistencial INT=null, @solpedexa_codigo_exame CHAR (4)=null, @SER2_idSolicitacao VARCHAR(100)=null, @SER2_CheckinDataHora DATETIME =NULL, @IdEspecialidadeSER2 varchar(100) = null, @SER2_CheckoutDataHora DATETIME =NULL,@tipo_agendamento VARCHAR (6)=NULL,@UrlTeleConsulta VARCHAR (250)=NULL,@SenhaTeleConsulta VARCHAR (50)=NULL  
AS  
SET NOCOUNT ON  
  
declare @sql varchar(8000)  
declare @par varchar(500)  
declare @var varchar(500)  
declare @ped_codigo int  
----------------------- incluir um agendamento---------------------------------------  
if @opcao=1  
   begin  
     
    select @ped_codigo = ped_codigo from pedido_agenda where pedagd_codigo = @pedagd_codigo  
   
 update agenda_consulta set   
  pac_codigo   = @paciente,  
       agd_situacao  = @situacao,  
        agdcon_data_marcacao = GETDATE(),  
  agdcon_origem_paciente = 'M',  
  agdcon_prim_cons = @prim_vez,  
  agd_tphorario  = @tipo_horario,  
  agd_tpagendamento  = ISNULL(@tipo_agendamento, agd_tpagendamento),  
  usu_codigo   = @usu_codigo,  
  agdcha_codigo  = @agdcha_codigo,  
  agd_tempo_inicio = @tempo_inicio,  
  agd_tempo_fim  = @tempo_fim,  
  ped_codigo  = @ped_codigo,  
  agdcon_senha  = @agdcon_senha,  
  unid_codigo_agendamento = @unid_codigo,  
  UrlTeleConsulta = @UrlTeleConsulta,  
  SenhaTeleConsulta = @SenhaTeleConsulta  
  
 WHERE  Agd_Sequencial = @numero_consulta    
  
 update  pedido_agenda  
 set  statped_codigo = '3'  
 where  pedagd_codigo = @pedagd_codigo  
  
 update  pedido  
 set ped_agendado = 'S'  
 where  ped_codigo = @ped_codigo  
   END  
  
-----------------------------------------------------------------------------------------  
  
  
if @opcao = 2      
BEGIN      
--select convert(char(10), getdate(), 112)  
  
 declare @dataatual char(10)  
 set  @dataatual = convert(char(10), @data, 112)  
 print(@dataatual )  
  EXEC ksp_controle_sequencial @Unidade    = @unid_codigo ,   
          @Chave      = 'Agenda_Consulta' ,   
          @data       = @dataatual,   
          @NovoCodigo = @numero_consulta OUTPUT  
  
  
  
 INSERT INTO Agenda_Consulta      
 (Agd_DataHora,      
  prof_codigo,  
  locatend_codigo,  
  agd_sequencial,  
  agd_tphorario,  
  agd_tpagendamento,  
  Agd_Disponivel,      
  Agd_Sequenciador,      
  AgdEve_Codigo,  
  procamb_codigo,  
  Agd_Hora_Marcada,      
  unidref_codigo,      
  unid_codigo,  
  UrlTeleConsulta,  
  SenhaTeleConsulta)      
 VALUES      
 (@data,      
  @medico,  
  @clinica,  
  @numero_consulta,  
  @tipo_horario,  
  @tipo_agendamento,  
  'S',      
  @Agd_Sequenciador,      
  @AgdEve_Codigo,  
  @procamb_codigo,  
  @agd_hora_marcada,      
  @Unidref_codigo,      
  @unid_codigo,  
  @UrlTeleConsulta,  
  @SenhaTeleConsulta)      
    
  select @numero_consulta  
  
END      
  
  
if @opcao = 3  
   BEGIN  
 declare @Erro int  
 declare @tipoHorario char(1)  
 set @Erro = 0    
  
 select @paciente = pac_codigo ,  
  @data =  agd_datahora,  
  @clinica = locatend_codigo,  
  @medico = prof_codigo,  
  @tipoHorario = agd_tphorario  
 from  agenda_consulta   
 WHERE  Agd_Sequencial = @numero_consulta   
  
 INSERT INTO agenda_consulta_historico (  
  prof_codigo,locatend_codigo,agd_datahora,pac_codigo,atend_codigo,  
  agdcon_origem_paciente,agdcon_data_marcacao,agdcon_prim_cons,agd_sequencial,  
  agd_situacao,agd_tphorario,usu_codigo,AGD_DISPONIVEL,agd_sequenciador,  
  agd_turno,agdcha_codigo,agd_tempo_inicio,agd_tempo_fim,   
  agd_hora_marcada,unid_codigo,agdcon_senha,AgdEve_Codigo,ped_codigo,procamb_codigo,unidref_codigo)  
  
 SELECT   
  prof_codigo,locatend_codigo,agd_datahora,pac_codigo,atend_codigo,  
  agdcon_origem_paciente,agdcon_data_marcacao,agdcon_prim_cons,agd_sequencial,  
  agd_situacao,agd_tphorario,usu_codigo,AGD_DISPONIVEL,agd_sequenciador,  
  agd_turno,agdcha_codigo,agd_tempo_inicio,agd_tempo_fim,  
  agd_hora_marcada,unid_codigo,agdcon_senha,AgdEve_Codigo,ped_codigo,procamb_codigo,unidref_codigo  
  
 FROM agenda_consulta       
 WHERE  Agd_Sequencial = @numero_consulta  
    set @Erro = @Erro + @@error  
  
 UPDATE AGENDA_CONSULTA  
 SET AGD_TPHORARIO = AGD_TPHORARIO_ORIGINAL  
 WHERE AGENDA_CONSULTA.Agd_Sequencial = @numero_consulta  
   AND AGD_TPHORARIO_ORIGINAL IS NOT NULL  
    set @Erro = @Erro + @@error  
  
  
 SELECT @pedagd_codigo = pedagd_codigo FROM AGENDA_CONSULTA ac  
  inner join pedido_agenda pe on ac.ped_codigo = pe.ped_codigo WHERE agd_sequencial = @numero_consulta  
   
 update pedido_agenda set statped_codigo = '2' where pedagd_codigo = @pedagd_codigo  
    set @Erro = @Erro + @@error  
  
 /* verifica se tem alguma programacao diaria para o medico caso tem sido excluida toda a sua programacao,  
  eliminar o registro da tabela de agenda_consulta no lugar do update */  
 declare @sql3 varchar(8000)  
  
 set @sql3 = 'UPDATE AGENDA_CONSULTA SET '  
 set @sql3 = @sql3 + 'pac_codigo = NULL, '  
 set @sql3 = @sql3 + 'atend_codigo = NULL, '  
 set @sql3 = @sql3 + 'agdcon_origem_paciente = NULL, '  
 set @sql3 = @sql3 + 'agdcon_data_marcacao = NULL, '  
 set @sql3 = @sql3 + 'agdcon_prim_cons = NULL, '  
 set @sql3 = @sql3 + 'agd_situacao = NULL, '  
 set @sql3 = @sql3 + 'agdcha_codigo= NULL, '  
 set @sql3 = @sql3 + 'ped_codigo= NULL, '  
 set @sql3 = @sql3 + 'unid_codigo_agendamento = NULL '  
 set @sql3 = @sql3 + 'WHERE agd_sequencial = ''' + @numero_consulta + ''''  
  
 UPDATE AGENDA_CONSULTA  
 SET AGD_TPHORARIO = AGD_TPHORARIO_ORIGINAL  
 WHERE AGENDA_CONSULTA.Agd_Sequencial = @numero_consulta  
   AND AGD_TPHORARIO_ORIGINAL IS NOT NULL  
    set @Erro = @Erro + @@error  
  
  
 SELECT @pedagd_codigo = pedagd_codigo FROM AGENDA_CONSULTA ac  
  inner join pedido_agenda pe on ac.ped_codigo = pe.ped_codigo WHERE agd_sequencial = @numero_consulta  
   
 update pedido_agenda set statped_codigo = '2' where pedagd_codigo = @pedagd_codigo  
    set @Erro = @Erro + @@error  
  
 exec (@sql3)  
    set @Erro = @Erro + @@error  
      
 --EXCLUI A VAGA SE A AGENDA FOI EXCLUIDA MAS TEM EVENTO E FOI USADA PELA UNIDADE  
 --DELETE FROM AGENDA_CONSULTA  
 --WHERE  agd_sequencial = @numero_consulta   
    --AND AGDEVE_CODIGO IS NOT NULL    
 --AND AGD_SITUACAO IS NULL  
 --AND UNID_CODIGO_AGENDAMENTO IS NULL  
         
    update AGENDA_CONSULTA -- Chamado 22486  
    set  pac_codigo = NULL,  
   agdcon_origem_paciente = NULL,  
   agdcon_data_marcacao = NULL,  
   agdcon_prim_cons = NULL,    
   agd_situacao = NULL,   
   usu_codigo = NULL,  
   agdcon_senha = NULL,  
   unid_codigo_agendamento = NULL  
 where agd_sequencial = @numero_consulta  
   
 set @Erro = @Erro + @@error  
   
 -- BLOQUEIA A VAGA, SE O PERIODO ESTIVER BLOQUEADO.  
 update agenda_consulta   
  set agd_situacao = '9' --bloqueia  
 from bloqueioagenda ba  
 where agenda_consulta.agdeve_codigo = ba.agdeve_codigo  
 and agenda_consulta.agd_datahora between ba.bloagd_inicio and ba.bloagd_fim  
 and agenda_consulta.agd_sequencial = @numero_consulta  
   
    set @Erro = @Erro + @@error  
   
  
  
    select @ped_codigo = ped_codigo from pedido_agenda where pedagd_codigo = @pedagd_codigo   
  
 update  pedido  
 set ped_agendado = 'N'  
 where  ped_codigo = @ped_codigo  
   
 set @Erro = @Erro + @@error   
  
 -- Verifica se a vaga foi excluida, mas já havia um paciente agendado e excluí a vaga  
    delete from agenda_consulta  
    where AgdVaga_Excluida = 'S' and Agd_Sequencial = @numero_consulta  
    set @Erro = @Erro + @@error    
      
     --Deleta vaga se for EXTRA  
 if(@tipoHorario = '3')  
 BEGIN  
  delete from agenda_consulta  
  where Agd_Sequencial = @numero_consulta  
 END  
   
 --Remove a solicitaÃ§Ã£o de prontuÃ¡rio:  
 if exists( select 1 from movimentacao_prontuario   
   where pac_codigo = @paciente   
   and convert(char(10),mov_data_prevista,120) = convert(char(10),@data,120)  
   and locatend_codigo = @clinica  
   and prof_codigo = @medico  
   and MovProntStat_Codigo = 0 )  
  begin  
   select @numero_consulta = mov_sequencial  
   from movimentacao_prontuario   
   where pac_codigo = @paciente   
   and convert(char(10),mov_data_prevista,120) = convert(char(10),@data,120)  
   and locatend_codigo = @clinica  
   and prof_codigo = @medico  
   and MovProntStat_Codigo = 0  
      set @Erro = @Erro + @@error  
  
   delete from registro_movimentacao_prontuario where mov_sequencial = @numero_consulta  
      set @Erro = @Erro + @@error  
   delete from movimentacao_prontuario where mov_sequencial = @numero_consulta  
      set @Erro = @Erro + @@error  
     
  end  
      
 If (@Erro <> 0) Begin             
  RAISERROR('ERRO - Tabela de Internacao.',1,1)  
            
 End   
  
   END  
  
---------------------------- pesquisa -----------------------------------------  
if @opcao = 4  
   BEGIN  
  
 declare @unid_codigo_int char(3)  
 set @unid_codigo_int = right(@unid_codigo,2) + '%'  
  
  
 set @sql = ' SELECT ac.agd_sequencial, convert(char(10),agd_datahora,103) agd_datahora, ' -- datac, '  
 set @sql = @sql + ' pac.pac_nome, pac.pac_codigo, pront.Pac_Prontuario_Numero, pac.pac_sexo, ac.agd_hora_marcada, ac.atend_codigo, ac.locatend_codigo '  
 set @sql = @sql + ' , ac.agd_sequenciador,  ac.unid_codigo, ac.prof_codigo, ac.procamb_codigo, ac.agd_datahora  agd_datahora_order '  
 set @sql = @sql + ' , ac.SER2_IdSolicitacao, ac.SER2_CheckinDataHora, ac.SER2_CheckoutDataHora, ac.agd_tphorario, ac.agd_tpagendamento  '  
 set @sql = @sql + ' FROM agenda_consulta ac '  
 set @sql = @sql + ' inner join paciente pac on ac.pac_codigo = pac.pac_codigo '  
 set @sql = @sql + ' left join paciente_prontuario pront on pront.pac_codigo = pac.pac_codigo '  
  
 set @sql = @sql + ' WHERE  1 = 1 '  
  
 if @DATA_INICIAL is not null  
    begin  
   set @sql = @sql + ' and  ac.agd_datahora >=  '''+ @DATA_INICIAL + ''''  
    end    
  
 if @DATA_FINAL is not null  
    begin  
   set @sql = @sql + ' and  ac.agd_datahora <=  '''+ @DATA_FINAL + ''''  
    end    
  
 if @medico is not null  
    begin  
   set @sql = @sql + ' and  ac.prof_codigo = ''' + @medico + ''''  
    end  
  
 if @unid_codigo is not null  
    begin   
   set @sql = @sql + ' and  ac.agd_sequencial like ''' + @unid_codigo_int + ''''  
    end  
  
 if @paciente is not null  
  begin  
  set @sql = @sql + ' and '  
  Exec ksp_ParametroPesquisa @paciente,'ac.pac_codigo',@tp_pesq,'T' ,@par output    
  end  
  
 if @nome_paciente is not null  
  begin  
  -- solução pra tirar duplos espaços em branco  
  set @sql = @sql + 'and replace(replace(replace(pac.pac_nome,''  '','' ''),''  '','' ''),''  '','' '') like ''' + @nome_paciente + '%'''  
  --Exec ksp_ParametroPesquisa @nome_paciente,'pac.pac_nome',@tp_pesq,'T' ,@par output    
  end  
  
 if @numero_consulta is not null  
  begin  
  set @sql = @sql + ' and '  
  Exec ksp_ParametroPesquisa @numero_consulta,'ac.agd_sequencial',@tp_pesq,'T' ,@par output    
  end  
  
 if @atend_codigo  is not null  
 begin  
  set @sql = @sql + ' and '  
  Exec ksp_ParametroPesquisa @atend_codigo,'ac.atend_codigo',@tp_pesq,'T' ,@par output    
 end  
  
 if @agdcha_codigo  is not null --UTILIZADO PARA PESQUISAR PRONTUARIO  
 begin  
  set @sql = @sql + ' and '  
  Exec ksp_ParametroPesquisa @agdcha_codigo,'pront.Pac_Prontuario_Numero',@tp_pesq,'T' ,@par output    
 end  
    
 if @data  is not null  
    begin  
  set @sql = @sql + ' and '  
  set @var = convert(varchar(10),@data,101)  
  Exec ksp_ParametroPesquisa @var,'convert(char(10),ac.agd_datahora,101) ',@tp_pesq,'T' ,@par output    
    end  
      
 if @prontuario  is not null  
 begin  
  set @sql = @sql + ' and '  
  Exec ksp_ParametroPesquisa @prontuario, 'pront.Pac_Prontuario_Numero', @tp_pesq, 'T', @par output    
 end  
      
 if @par is not null  
    begin   
  set @par = @par + ' ORDER BY agd_datahora_order'  
    end  
 else  
    begin  
  set @sql = @sql + ' ORDER BY agd_datahora_order'  
    end  
  
 exec(@sql + @par)  
  
   END  
  
-------------- verifica se e a primeira consulta de um paciente no periodo de um ano ---------------  
if @opcao = 11  
   BEGIN  
 SELECT A.PAC_CODIGO   
  FROM AGENDA_CONSULTA_HISTORICO a, VWLOCAL_UNIDADE LOC  
  WHERE A.PAC_CODIGO = @paciente  
  AND  A.AGD_DATAHORA BETWEEN (GETDATE() - 365) AND @data ---AGD_DATAHORA    
  AND  A.LOCATEND_CODIGO = LOC.LOCATEND_CODIGO  
  AND  LOC.UNID_CODIGO = @UNID_CODIGO  
   END  
  
  
------------------- verifica se um paciente ja esta agenda no mesmo dia e hora ---------------------  
if @opcao = 12  
   BEGIN  
 SELECT pf.prof_nome   
  FROM profissional pf ,agenda_consulta ag, VWLOCAL_UNIDADE LOC   
  WHERE ag.prof_codigo = pf.prof_codigo   
  AND     ag.locatend_codigo = pf.locatend_codigo  
  AND     ag.locatend_codigo = LOC.locatend_codigo  
  AND     LOC.UNID_CODIGO = @UNID_CODIGO  
--OS:365  
--  AND ag.locatend_codigo <> @clinica  
--  AND (ag.prof_codigo <> @medico or ag.prof_codigo = @medico)   
  AND ag.pac_codigo = @paciente   
  AND ag.agd_datahora = @data  
  AND ag.agd_situacao = '0'  
   END  
  
if @opcao =13  
   BEGIN  
 SELECT  convert(char(10),AC.AGD_DATAHORA,103) data,CONVERT(CHAR(5),AC.AGD_DATAHORA,108) HORA,  
  P.PROF_NOME,LOC.LOCATEND_DESCRICAO, AC.AGD_DISPONIVEL, AC.AGD_DATAHORA  
  FROM  AGENDA_CONSULTA AC,   
   PROFISSIONAL P,  
   VWLOCAL_UNIDADE LOC  
  WHERE  AC.PROF_CODIGO  = P.PROF_CODIGO  
  AND AC.LOCATEND_CODIGO = P.LOCATEND_CODIGO  
  AND  AC.LOCATEND_CODIGO = LOC.LOCATEND_CODIGO  
  AND  AC.PAC_CODIGO  = @PACIENTE  
 UNION  
 SELECT  convert(char(10),AC.AGD_DATAHORA,103) data,CONVERT(CHAR(5),AC.AGD_DATAHORA,108) HORA,  
  P.PROF_NOME,LOC.LOCATEND_DESCRICAO, AC.AGD_DISPONIVEL, AC.AGD_DATAHORA  
  FROM  AGENDA_CONSULTA_HISTORICO AC,    
   PROFISSIONAL P,  
   VWLOCAL_UNIDADE LOC   
  WHERE  AC.PROF_CODIGO  = P.PROF_CODIGO  
  AND AC.LOCATEND_CODIGO = P.LOCATEND_CODIGO  
  AND  AC.LOCATEND_CODIGO = LOC.LOCATEND_CODIGO  
  AND     LOC.UNID_CODIGO = @UNID_CODIGO  
  AND  AC.PAC_CODIGO  = @PACIENTE  
  AND AC.AGD_SITUACAO  <> '0'  
  ORDER BY AC.AGD_DATAHORA DESC  
   END  
  
-- traz  o sequencial da agenda de um paciente determinado (opcao usada  
if @opcao = 14  
begin  
 SELECT  AC.AGD_SEQUENCIAL,   
  convert(smalldatetime, Convert(char(10), AC.AGD_DATAHORA,120) + ' ' + ac.agd_hora_marcada) AGD_DATAHORA,  
  AC.ATEND_CODIGO,  
  P.PROF_NOME,  
  LA.SET_DESCRICAO,  
  AC.LOCATEND_CODIGO,  
  CASE WHEN AC.AGD_SITUACAO = '0' THEN ''  
       WHEN AC.AGD_SITUACAO = '3' THEN 'A'  
  End Status,  
  AC.PROF_CODIGO,   
  AC.AGD_DISPONIVEL,  
  AC.AGD_TPHORARIO,  
  AC.AGD_TPAGENDAMENTO,  
  AC.AGD_SITUACAO as SITUACAO, -- .net  
  LA.SET_DESCRICAO as LOCATEND_DESCRICAO -- .net  
  
 FROM    AGENDA_CONSULTA AC ,  
  PROFISSIONAL P,        
  VWLOCAL_UNIDADE LA  
  
 WHERE  AC.AGD_DATAHORA >= @data  
 AND     AC.AGD_DATAHORA < DATEADD(DD, 1, @data)  
 AND  AC.PAC_CODIGO =  @paciente  
 AND AC.PROF_CODIGO = P.PROF_CODIGO  
 AND AC.LOCATEND_CODIGO = P.LOCATEND_CODIGO  
 AND AC.LOCATEND_CODIGO = LA.LOCATEND_CODIGO  
 AND  LA.UNID_CODIGO     = @UNID_CODIGO  
 AND AC.AGD_SITUACAO in ('0')  
 AND AC.ATEND_CODIGO IS NULL  
end  
  
-- busca informacoes da agenda para um determinado agd_sequencial(opcao  
if @opcao = 15  
  begin  
  
 SELECT vwlocal.locatend_descricao,   
  medico.prof_nome,   
  agdconsulta.agd_datahora as data,   
  agd_hora_marcada as hora,   
  agdconsulta.pac_codigo,   
  paciente.pac_nome,   
  vwlocal.locatend_codigo,   
  agdconsulta.prof_codigo,  
  paciente.pac_nascimento,  
  paciente.pac_sexo,  
  agdconsulta.atend_codigo  
 FROM agenda_consulta agdconsulta  
  inner join profissional medico on medico.prof_codigo = agdconsulta.prof_codigo   
      And  medico.locatend_codigo = agdconsulta.locatend_codigo  
  inner join vwlocal_unidade vwlocal on vwlocal.locatend_codigo = agdconsulta.locatend_codigo  
  inner join paciente on paciente.pac_codigo = agdconsulta.pac_codigo  
    WHERE agdconsulta.agd_sequencial = @numero_consulta  
  
end  
  
  
-- selecao de agenda futura para o medico, clinica e paciente   
if @opcao = 16  
begin  
  
 SELECT  convert(char(10),AGD_DATAHORA,103) data,  
  CONVERT(CHAR(5),AGD_DATAHORA,108) HORA,  
  P.PROF_NOME,  
  PAC.PAC_NOME,  
  Pp.PAC_PRONTUARIO_NUMERO PAC_PRONTUARIO,  
  CASE WHEN AC.AGD_TPHORARIO = 1 THEN '1 - Primeira Vez'   
       WHEN AC.AGD_TPHORARIO = 2 THEN '2 - Subsequente'   
       WHEN AC.AGD_TPHORARIO = 3 THEN '3 - Extra'   
       WHEN AC.AGD_TPHORARIO = 4 THEN '4 - Triagem'   
       WHEN AC.AGD_TPHORARIO = 5 THEN '5 - Fichar'   
       WHEN AC.AGD_TPHORARIO = 6 THEN '6 - Retorno RÃŸpido' end tipos,  
  AC.PROF_CODIGO,  
  AC.LOCATEND_CODIGO,  
  LOC.LOCATEND_DESCRICAO,  
  AC.AGD_SITUACAO,  
  AC.AGD_SEQUENCIAL,  
  AC.PAC_CODIGO, AC.AGD_DISPONIVEL  
 FROM  AGENDA_CONSULTA AC  
  INNER JOIN PROFISSIONAL P ON AC.PROF_CODIGO = P.PROF_CODIGO AND AC.LOCATEND_CODIGO = P.LOCATEND_CODIGO  
  LEFT JOIN PACIENTE PAC ON AC.PAC_CODIGO = PAC.PAC_CODIGO  
  INNER JOIN VWLOCAL_UNIDADE LOC ON AC.LOCATEND_CODIGO = LOC.LOCATEND_CODIGO AND LOC.UNID_CODIGO = @UNID_CODIGO  
  LEFT JOIN PACIENTE_PRONTUARIO PP ON AC.PAC_CODIGO = PP.PAC_CODIGO AND PP.UNID_CODIGO = @UNID_CODIGO  
 WHERE    
  convert(char(10), AC.AGD_DATAHORA, 103) = convert(char(10), @data, 103)  
  AND AC.LOCATEND_CODIGO = ISNULL(@CLINICA,AC.LOCATEND_CODIGO)  
  AND AC.PROF_CODIGO = ISNULL(@MEDICO,AC.PROF_CODIGO)  
  AND (AC.AGD_SITUACAO IN('0') or AC.AGD_SITUACAO is null)  
  AND Ac.PAC_CODIGO = @paciente  
 ORDER BY AC.AGD_DATAHORA  
  
  
end  
  
--AGENDA PARA A CENTRAL DE MARCACAO  
if @opcao = 18  
   BEGIN  
  
     declare @usa_meses smallint   
     set @usa_meses = (select isnull(unid_usa_meses,1) from unidade where unid_codigo = @unid_codigo)  
  
 if @usa_meses = 0  
  set @usa_meses = 1  
  
  
 set @sql = 'SELECT ac.agd_sequencial, '  
 set @sql = @sql + 'convert(char(10),agd_datahora,103) data, '  
 set @sql = @sql + 'convert(char(10),agd_datahora,120) datac, '  
 set @sql = @sql + 'convert(char(5),agd_datahora,108) hora, '  
 set @sql = @sql + 'pac.pac_nome, '  
 set @sql = @sql + 'prof.prof_nome, '  
 set @sql = @sql + 'loc.set_descricao, '  
 set @sql = @sql + 'pac.pac_codigo, '  
 set @sql = @sql + 'prof.prof_codigo, '  
 set @sql = @sql + 'loc.locatend_codigo, '  
 set @sql = @sql + 'ac.agd_situacao, '  
 set @sql = @sql + 'ac.agd_tphorario, '  
 set @sql = @sql + 'ac.agd_tpagendamento, '  
 set @sql = @sql + 'ac.atend_codigo, '  
 set @sql = @sql + 'u.unid_sigla, '  
 set @sql = @sql + 'ac.agd_sequenciador, '  
 set @sql = @sql + 'sc.setcli_DIAS_FECHAMENTO Dias_Fechamento, '  
  
 set @sql = @sql + 'ac.agd_hora_marcada HR_Inicio, '  
 set @sql = @sql + 'u.unid_codigo, '  
 set @sql = @sql + 'u.unid_sigla + ''-'' + u.unid_descricao unid_descricao, '  
 set @sql = @sql + 'loc.set_codigo, '  
 set @sql = @sql + 'ac.procamb_codigo, '  
 set @sql = @sql + 'ac.unidref_codigo, '  
 set @sql = @sql + 'UR.unidref_descricao, '  
  
 SET @SQL = @SQL + ' CASE WHEN AC.AGD_TPHORARIO = 1 THEN ''1 Vez'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 2 THEN ''Subs'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 3 THEN ''Extra'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 4 THEN ''Triag'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 5 THEN ''Ficha'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 6 THEN ''R.Rap'''  
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 7 THEN ''Inter'' end TipoHorario,'  
 SET @SQL = @SQL + ' ac.agd_datahora, '  
  
 SET @SQL = @SQL + ' SC.SETCLI_DIAS_UTEIS, '  
 SET @SQL = @SQL + ' SC.SETCLI_DIAS_FERIADOS, '  
  
    set @sql = @sql + 'dateadd(day,ISNULL(sc.setcli_DIAS_FECHAMENTO,0) ,AC.AGD_DATAHORA) dia_bloqueio , '  
 set @sql = @sql + '(CONVERT(smalldatetime, AC.AGD_DATAHORA, 120)) dia_agenda ,'  
  
 set @sql = @sql + 'CASE WHEN CONVERT(INT, CONVERT(CHAR(10), GETDATE() + ISNULL(sc.setcli_DIAS_FECHAMENTO,0), 112)) <  CONVERT(INT, CONVERT(CHAR(10), AC.AGD_DATAHORA, 112)) THEN ''Aberto'''   
 set @sql = @sql + ' WHEN CONVERT(INT, CONVERT(CHAR(10), GETDATE() + ISNULL(sc.setcli_DIAS_FECHAMENTO,0), 112)) >= CONVERT(INT, CONVERT(CHAR(10), AC.AGD_DATAHORA, 112)) THEN ''Fechado'''   
 set @sql = @sql + ' End  Estado_Dia,  '  
  
 set @sql = @sql + ' ac.unid_codigo_agendamento, '  
 set @sql = @sql + ' ua.unid_sigla as unid_sigla_agendamento '  
  
 set @sql = @sql + ' FROM agenda_consulta ac '  
 set @sql = @sql + ' LEFT JOIN Paciente pac ON ac.pac_codigo = pac.pac_codigo '  
 set @sql = @sql + ' INNER JOIN Profissional_rede prof ON ac.prof_codigo = prof.prof_codigo '  
 set @sql = @sql + ' INNER JOIN Vwlocal_unidade loc ON ac.locatend_codigo = loc.locatend_codigo '  
 set @sql = @sql + ' LEFT JOIN Unidade_referencia ur ON ac.unidref_codigo = UR.unidref_codigo '  
 set @sql = @sql + ' INNER JOIN Unidade u ON loc.unid_codigo = u.unid_codigo '  
 set @sql = @sql + ' INNER JOIN Local_Atendimento LA ON LA.locatend_codigo = loc.locatend_codigo '  
 set @sql = @sql + ' INNER JOIN Setor_Clinica SC ON sc.setcli_codigo = LA.setcli_codigo '  
 set @sql = @sql + ' LEFT JOIN Unidade ua ON ac.unid_codigo_agendamento = ua.unid_codigo '  
  
 set @sql = @sql + ' WHERE (ac.agd_tphorario <> ''3'' or (ac.agd_tphorario = ''3'' and ac.pac_codigo is not null))  '  
  
  
 if @numero_consulta is not null  
    begin  
  set @sql = @sql + ' and ac.agd_sequencial = '''+ @numero_consulta + ''''  
    end  
 else  
    begin  
  -- ClÃ­nica e Data sÃ£o obrigatÃ³rios, nÃ£o sendo por NUMERO  
     set @sql = @sql + ' and ( ac.agd_datahora >= ''' + convert(CHAR(19),@data,120) + '''' + ' and ac.agd_datahora >= ''' + convert(CHAR(19),getdate(),120) + ''')'  
     set @sql = @sql + ' and ac.agd_datahora <= ''' + convert(CHAR(19), dateadd(m, @usa_meses, @data),120) + ''''  
  
  if @paciente is not null  
   set @sql = @sql + ' and ac.pac_codigo = ''' + @paciente + ''''  
  
  if @unid_codigo is not null  
  begin  
  
   set @sql = @sql + ' and (''' + @unid_codigo + ''' in ( select unid_codigo_consumidor   
         from agenda_eventos_consumidor aec  
          where ac.AgdEve_Codigo = aec.AgdEve_Codigo ) or ac.agd_tphorario = ''3'')'   
   if @filtro_vagas = 'P'   
    set @sql = @sql + ' and u.unid_codigo = ''' + @unid_codigo + ''''  
   if @filtro_vagas = 'E'   
    set @sql = @sql + ' and u.unid_codigo <> ''' + @unid_codigo + ''''  
  end  
    
  if @unid_codigo_agendamento is not null  
  begin  
   set @sql = @sql + ' and u.unid_codigo = ''' + @unid_codigo_agendamento + ''''  
     
   if @clinica is not null  
    set @sql = @sql + ' and loc.locatend_codigo = ''' + @clinica + ''''  
    
   if @medico is not null  
    set @sql = @sql + ' and ac.prof_codigo = ''' + @medico + ''''  
   else  
    IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)  
     set @sql = @sql + ' and exists (select 1 from agenda_permissao a where a.locatend_codigo = loc.locatend_codigo and ac.prof_codigo = a.prof_codigo) '  
  end  
     
  if @filtro_vagas = 'P'   
  begin  
   if @clinica is not null  
    set @sql = @sql + ' and loc.locatend_codigo = ''' + @clinica + ''''  
    
   if @medico is not null  
    set @sql = @sql + ' and ac.prof_codigo = ''' + @medico + ''''  
   else  
    IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)  
     set @sql = @sql + ' and exists (select 1 from agenda_permissao a where a.locatend_codigo = loc.locatend_codigo and ac.prof_codigo = a.prof_codigo) '  
  
  end  
  if @filtro_vagas = 'T'   
  begin  
   if @clinica is not null  
    set @sql = @sql + ' and (loc.locatend_codigo = ''' + @clinica + ''' or u.unid_codigo <> ''' + @unid_codigo + ''')'  
    
   if @medico is not null  
    set @sql = @sql + ' and (ac.prof_codigo = ''' + @medico + ''' or u.unid_codigo <> ''' + @unid_codigo + ''')'  
   else  
    IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)  
     set @sql = @sql + ' and exists (select 1 from agenda_permissao a where a.locatend_codigo = loc.locatend_codigo and ac.prof_codigo = a.prof_codigo) '  
  end  
  
  -- livres ou todos  
  if @situacao = 'S' --somente horÃŸrios livres  
  begin  
   set @sql = @sql + ' and ac.pac_codigo is null'  
    set @sql = @sql + ' and ( ac.AGD_SITUACAO IN (''0'',''1'',''2'',''3'') or ac.agd_situacao is null)'  
  end  
  else  
   set @sql = @sql + ' and ( ac.AGD_SITUACAO IN (''0'',''1'',''2'',''3'') or ac.agd_situacao is null)'  
      
     
  
  set @sql = @sql + ' and CHARINDEX(agd_tphorario, ''' + @tipo_horario + ''') > 0 '  
  
  if @unidref_codigo is null  
   set @sql = @sql + ' and ac.unidref_codigo is null '  
  else  
   set @sql = @sql + ' and (ac.unidref_codigo is null or ac.unidref_codigo = ''' + @unidref_codigo + '''' + ')'  
  
 end   
  
-- if @situacao IS NULL --S = somente horÃŸrios livres  
 if @situacao = 'N' --S = somente horÃŸrios livres  
 begin  
  set @sql = @sql + ' union '  
   
  set @sql = @sql + 'SELECT null agd_sequencial, '  
  set @sql = @sql + 'convert(char(10),agd_datahora,103) data, '  
  set @sql = @sql + 'convert(char(10),agd_datahora,120) datac, '  
  set @sql = @sql + 'convert(char(5),agd_datahora,108) hora, '  
  set @sql = @sql + 'mb.motblo_descricao pac_nome, '  
  set @sql = @sql + 'prof.prof_nome, '  
  set @sql = @sql + 'loc.set_descricao, '  
  set @sql = @sql + 'pac.pac_codigo, '  
  set @sql = @sql + 'prof.prof_codigo, '  
  set @sql = @sql + 'loc.locatend_codigo, '  
  set @sql = @sql + 'ac.agd_situacao, '  
  set @sql = @sql + 'ac.agd_tphorario, '  
  set @sql = @sql + 'ac.agd_tpagendamento, '  
  set @sql = @sql + 'ac.atend_codigo, '  
  set @sql = @sql + 'u.unid_sigla, '  
  set @sql = @sql + 'ac.agd_sequenciador, '  
  set @sql = @sql + 'sc.setcli_DIAS_FECHAMENTO Dias_Fechamento, '  
   
  set @sql = @sql + 'ac.agd_hora_marcada HR_Inicio, '  
  set @sql = @sql + 'u.unid_codigo, '  
  set @sql = @sql + 'u.unid_sigla + ''-'' + u.unid_descricao unid_descricao, '  
  set @sql = @sql + 'loc.set_codigo, '  
  set @sql = @sql + 'ac.procamb_codigo, '  
  set @sql = @sql + 'ac.unidref_codigo, '  
  set @sql = @sql + 'UR.unidref_descricao, '  
  SET @SQL = @SQL + ' CASE WHEN AC.AGD_TPHORARIO = 1 THEN ''1 Vez'''   
  SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 2 THEN ''Subs'''   
  SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 3 THEN ''Extra'''   
  SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 4 THEN ''Triag'''   
  SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 5 THEN ''Ficha'''   
  SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 6 THEN ''R.Rap'' end TipoHorario, '  
  SET @SQL = @SQL + ' ac.agd_datahora,'  
      
      SET @SQL = @SQL + ' SC.SETCLI_DIAS_UTEIS, '  
      SET @SQL = @SQL + ' SC.SETCLI_DIAS_FERIADOS, '  
           
         set @sql = @sql + 'dateadd(day,ISNULL(sc.setcli_DIAS_FECHAMENTO,0) ,AC.AGD_DATAHORA) dia_bloqueio , '  
         set @sql = @sql + '(CONVERT(smalldatetime, AC.AGD_DATAHORA, 120)) dia_agenda ,'  
           
      set @sql = @sql + 'CASE WHEN CONVERT(INT, CONVERT(CHAR(10), GETDATE() + ISNULL(sc.setcli_DIAS_FECHAMENTO,0), 112)) <  CONVERT(INT, CONVERT(CHAR(10), AC.AGD_DATAHORA, 112)) THEN ''Aberto'''   
      set @sql = @sql + ' WHEN CONVERT(INT, CONVERT(CHAR(10), GETDATE() + ISNULL(sc.setcli_DIAS_FECHAMENTO,0), 112)) >= CONVERT(INT, CONVERT(CHAR(10), AC.AGD_DATAHORA, 112)) THEN ''Fechado'''   
      set @sql = @sql + ' End  Estado_Dia,  '  
   
  set @sql = @sql + ' ac.unid_codigo_agendamento, '  
  set @sql = @sql + ' ua.unid_sigla as unid_sigla_agendamento '  
   
   
  set @sql = @sql + ' FROM agenda_consulta ac  
        LEFT JOIN paciente pac ON ac.pac_codigo = pac.pac_codigo  
        INNER JOIN profissional_rede prof ON ac.prof_codigo = prof.prof_codigo  
        INNER JOIN vwlocal_unidade loc ON ac.locatend_codigo = loc.locatend_codigo  
        LEFT JOIN unidade_referencia ur ON ac.unidref_codigo = UR.unidref_codigo  
        INNER JOIN agenda_eventos ae ON ac.agdeve_codigo = ae.agdeve_codigo  
        INNER JOIN BLOQUEIOAGENDA ba ON ae.agdeve_codigo = ba.agdeve_codigo  
        INNER JOIN MotivoBloqueio mb ON ba.motblo_codigo = mb.motblo_codigo  
        INNER JOIN unidade u ON loc.unid_codigo = u.unid_codigo  
        INNER JOIN Local_Atendimento LA ON LA.locatend_codigo = loc.locatend_codigo  
        INNER JOIN Setor_Clinica SC ON sc.setcli_codigo = LA.setcli_codigo  
        LEFT JOIN Unidade ua ON ac.unid_codigo_agendamento = ua.unid_codigo '  
    
  set @sql = @sql + ' WHERE ( ac.AGD_SITUACAO = ''9'')'    
  set @sql = @sql + ' and ac.agd_datahora between ba.bloagd_inicio and dateadd(d,1,ba.bloagd_fim) '  
  set @sql = @sql + ' and (ac.agd_tphorario <> ''3'' or (ac.agd_tphorario = ''3'' and ac.pac_codigo is not null))  '  
    
   
  
  if @numero_consulta is not null  
     begin  
   set @sql = @sql + ' and ac.agd_sequencial = '''+ @numero_consulta + ''''  
     end  
  else  
     begin  
   -- ClÃ­nica e Data sÃ£o obrigatÃ³rios, nÃ£o sendo por NUMERO  
   set @sql = @sql + ' and ac.agd_datahora >= ''' + convert(CHAR(19),@data,120) + ''''  
   set @sql = @sql + ' and ac.agd_datahora <= ''' + convert(CHAR(19), dateadd(m, @usa_meses, @data),120) + ''''  
  
   if @paciente is not null  
    set @sql = @sql + ' and ac.pac_codigo = ''' + @paciente + ''''  
   
   if @unid_codigo is not null  
   begin  
   
    set @sql = @sql + ' and (''' + @unid_codigo + ''' in ( select unid_codigo_consumidor   
          from agenda_eventos_consumidor aec  
           where ac.AgdEve_Codigo = aec.AgdEve_Codigo ) or ac.agd_tphorario = ''3'')'   
    if @filtro_vagas = 'P'   
     set @sql = @sql + ' and u.unid_codigo = ''' + @unid_codigo + ''''  
    if @filtro_vagas = 'E'   
     set @sql = @sql + ' and u.unid_codigo <> ''' + @unid_codigo + ''''  
   end   
  
   if @filtro_vagas = 'P'   
   begin  
    if @clinica is not null  
     set @sql = @sql + ' and loc.locatend_codigo = ''' + @clinica + ''''  
     
    if @medico is not null  
     set @sql = @sql + ' and ac.prof_codigo = ''' + @medico + ''''  
    else  
     IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)  
      set @sql = @sql + ' and exists (select 1 from agenda_permissao a where a.locatend_codigo = loc.locatend_codigo and ac.prof_codigo = a.prof_codigo) '  
   
   end  
   if @filtro_vagas = 'T'   
   begin  
    if @clinica is not null  
     set @sql = @sql + ' and (loc.locatend_codigo = ''' + @clinica + ''' or u.unid_codigo <> ''' + @unid_codigo + ''')'  
     
    if @medico is not null  
     set @sql = @sql + ' and (ac.prof_codigo = ''' + @medico + ''' or u.unid_codigo <> ''' + @unid_codigo + ''')'  
    else  
     IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)  
      set @sql = @sql + ' and exists (select 1 from agenda_permissao a where a.locatend_codigo = loc.locatend_codigo and ac.prof_codigo = a.prof_codigo) '  
   end  
   
   set @sql = @sql + ' and CHARINDEX(ac.agd_tphorario, ''' + @tipo_horario + ''') > 0 '  
       
   if @unidref_codigo is null  
    set @sql = @sql + ' and ac.unidref_codigo is null '  
   else  
    set @sql = @sql + ' and (ac.unidref_codigo is null or ac.unidref_codigo = ''' + @unidref_codigo + '''' + ')'  
   
  end   
 end  
  
 if @nome_medico is null  --coluna para ordenacao  
  set @sql = @sql + ' ORDER BY agd_datahora , u.unid_sigla, loc.set_descricao, prof.prof_nome '  
 else  
  set @sql = @sql + ' ORDER BY ' + @nome_medico  
  
   
 Exec(@sql)  
  
  
  
   END  
if @opcao=19 --RESERVAR  
   begin  
 UPDATE AGENDA_CONSULTA SET   
                AGD_SITUACAO  = '9' --Reservado  
 WHERE   agd_sequencial   = @numero_consulta        
 AND  (AGD_SITUACAO  <> '9'  
 or  AGD_SITUACAO is null)  
  
  
 SELECT  AGD_SITUACAO FROM AGENDA_CONSULTA  
 WHERE   agd_sequencial   = @numero_consulta        
 AND  AGD_SITUACAO  = '9'  
  
   END  
if @opcao=20 --LIBERAR  
   begin  
 UPDATE AGENDA_CONSULTA SET   
                AGD_SITUACAO  = NULL --LIBERA O Reservado  
 WHERE   agd_sequencial   = @numero_consulta        
  
   END  
if @opcao=21 --VALIDAR  
   begin  
 SELECT  AGD_SITUACAO   
 FROM  AGENDA_CONSULTA WITH (NOLOCK)  
 WHERE   agd_sequencial   = @numero_consulta  
  
   END  
  
if @opcao=23 --FALTOU  
   begin  
 UPDATE AGENDA_CONSULTA SET   
                AGD_SITUACAO  = '3' --FALTOU  
 WHERE   agd_sequencial   = @numero_consulta        
   
   END  
  
if @opcao=24 --SEM PRODUCAO  
   begin  
 UPDATE AGENDA_CONSULTA SET   
                AGD_SITUACAO  = '6' --SEM PRODUCAO  
 WHERE   agd_sequencial   = @numero_consulta        
   
   END  
  
------------------- verifica se um paciente ja esta agenda na mesma data, especialidade e medico  ---------------------  
if @opcao = 22  
   BEGIN  
--  SELECT ag.agd_datahora  
--   FROM profissional pf ,agenda_consulta ag   
--   WHERE ag.prof_codigo = pf.prof_codigo   
--   AND ag.locatend_codigo = pf.locatend_codigo  
--   
--   AND (ag.locatend_codigo = @clinica or ag.prof_codigo = @medico)   
--   AND ag.pac_codigo = @paciente   
--   AND CONVERT(VARCHAR, ag.agd_datahora, 112) = CONVERT(VARCHAR, CONVERT(SMALLDATETIME, @data), 112)  
--   AND ag.agd_situacao = '0'  
  
        declare @dtinicio as datetime  
        declare @dttermino as datetime  
        --  
        set @dtinicio = CONVERT(VARCHAR, @data, 112) + ' 00:00:00'  
        set @dttermino = CONVERT(VARCHAR, @data, 112) + ' 23:59:59'  
  
 SELECT ag.agd_datahora  
  FROM agenda_consulta ag with (nolock)  
  WHERE (ag.locatend_codigo = @clinica or ag.prof_codigo = @medico)   
  
  
  
  AND ag.pac_codigo = @paciente   
  AND ag.agd_datahora between @dtinicio and @dttermino  
  AND ag.agd_situacao = '0'  
   END  
----------------------------------------------------------------------------------------------------------------  
/*  
if @opcao = 23  
   BEGIN  
  
 SELECT  u.unid_descricao,   
  ac.agd_hora_marcada AS HORAAGENDA,   
  ac.agd_sequencial AS IDENTIFICACAO,   
  pac.pac_nome,   
  pac.Pac_nascimento,   
  ISNULL(DATEDIFF(year,PAC.PAC_NASCIMENTO,GetDate()),0) as IDADE,   
  LTRIM(ISNULL(proca.procamb_codigo,'') + '-CONSULTA NA ' + rtrim(upper(loc.locatend_descricao))) + '/Dr(a) ' + ltrim(prof.prof_nome)  EXAME,   
  BA.BAI_DESCRICAO,   
  pim.PacIdMun_Codigo as IDMUNICIPIO,   
  pac.Pac_Cartao_NSaude AS CARTAOSAUDE,   
  pac.pac_codigo,   
  ac.locatend_codigo AS LOCATEND_CODIGO,   
  ac.agd_dataHora AS agd_dataHora   
  
 From  agenda_consulta ac   
  left join profissional prof on prof.locatend_codigo = ac.locatend_codigo and prof.prof_codigo = ac.prof_codigo   
  left join paciente pac on ac.pac_codigo=pac.pac_codigo   
  LEFT JOIN Paciente_Identificacao_Municipio PIM ON PIM.pac_codigo = pac.pac_codigo   
  LEFT JOIN CEP CE ON CE.CEP_SEQUENCIAL = pac.CEP_SEQUENCIAL   
  LEFT JOIN BAIRRO BA on BA.MUN_CODIGO = CE.MUN_CODIGO AND BA.BAI_CODIGO = CE.BAI_CODIGO   
  left join vwlocal_unidade loc on loc.locatend_codigo = ac.locatend_codigo   
  left join unidade u on u.unid_codigo = loc.unid_codigo   
  left join setor_clinica setor on loc.set_codigo = setor.setcli_codigo   
  left join procedimento_ambulatorial proca on proca.procamb_codigo = setor.procamb_codigo_chk   
  
 WHERE  ac.agd_datahora between @data and  dateadd(day,1,@data)  
  AND u.unid_codigo = @unid_codigo  
  AND ac.pac_codigo is not null  
  AND ac.atend_codigo is null  
  AND ac.agd_situacao = '0'  
  
 ORDER BY ac.agd_sequencial  
  
END  
*/  
----------------------------------------------------------------------------------------------------------------  
--if @opcao=23   
 -- CÃ“DIGO IMPLEMENTADO ANTES DO @opcao = 20  
--if @opcao=24   
 -- CÃ“DIGO IMPLEMENTADO ANTES DO @opcao = 20  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 25 --CARGA DAS FALTAS (PARA NOVA AGENDA)  
begin  
 SELECT  ac.agd_datahora,  
  ac.agd_sequenciador AS SEQUENCIAL,   
  ac.agd_hora_marcada AS HORAAGENDA,   
  ac.agd_sequencial AS IDENTIFICACAO,  
  ac.procamb_codigo,  
  pac.pac_nome  
  
 From  agenda_consulta ac   
  left join paciente pac on ac.pac_codigo=pac.pac_codigo  
  
 WHERE  ac.agd_datahora between @data and dateadd(day,1,@data)  
 and ac.agd_situacao = '3'  
 and  ac.prof_codigo = @medico  
  
 and ( ac.pac_codigo > @paciente  
 or ac.pac_codigo < @paciente )  
   
 ORDER BY ac.agd_sequenciador  
end  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 26 --Criar Nova Vaga, (encaixe)  
begin  
 declare @nova_seq int  
 declare @numero_consulta_novo char(12)  
  
 declare @hoje smalldatetime  
 set @hoje = convert(smalldatetime,convert(char(10),@data,120),120)  
  
 declare @datahoje char(10)  
 set @datahoje = Convert (varchar, @data, 103)  
  
 /* Busca o CÃ³digo */  
 EXEC ksp_controle_sequencial @Unidade    = @unid_codigo ,  
     @Chave      = 'Agenda_Consulta',  
     @data       = @datahoje,  
     @NovoCodigo = @numero_consulta_novo OUTPUT  
  
  
 Select @nova_seq =  max(agd_sequenciador)   
    from  agenda_consulta  
    Where  agd_datahora between @hoje and dateadd(day,1,@hoje)   
    and AgdEve_Codigo is null  
      
    --chamado 19707  
    and prof_codigo = @medico  
    --chamado 19707  
  
 if (@nova_seq is null)  
  set @nova_seq = 1  
 else  
  set @nova_seq = @nova_seq + 1  
  
   select @ped_codigo = ped_codigo from pedido_agenda where pedagd_codigo = @pedagd_codigo  
  
 Insert Into Agenda_Consulta (  
  agd_datahora,prof_codigo,locatend_codigo,pac_codigo,atend_codigo,  
  agdcon_origem_paciente,agdcon_data_marcacao,agdcon_prim_cons,agd_sequencial,agd_situacao,  
  agd_tphorario,usu_codigo,AGD_DISPONIVEL,agd_sequenciador,agd_turno,  
  agdcha_codigo,agd_tempo_inicio,agd_tempo_fim,agd_hora_marcada,ped_codigo,  
  agdcon_senha,AgdEve_Codigo,procamb_codigo, unidref_codigo, unid_codigo, unid_codigo_agendamento,  
  SER2_idSolicitacao, SER2_CheckinDataHora)  
  
 Values (  
  @data, @medico, @clinica, @paciente, NULL,  
  'M', GETDATE(), @PRIM_VEZ,  @numero_consulta_novo, @SITUACAO,  
  @tipo_horario, @usu_codigo, 'S', @nova_seq, null,  
  @agdcha_codigo, @tempo_inicio, @tempo_fim, @agd_hora_marcada, @ped_codigo,  
  @agdcon_senha, @AgdEve_Codigo, @procamb_codigo, @unidref_codigo,@unid_codigo, @unid_codigo,  
  @SER2_idSolicitacao, @SER2_CheckinDataHora)  
  
 select @numero_consulta_novo  
  
end  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 27 --Saldo para Encaixe  
begin  
  
 /* Recebe ClÃ­nica, MÃ©dico e Data */  
  
 --Seleciona o Limite Cadastrado  
 Select  TOP 1 AE.agdeve_limiteExtra  
 From Agenda_Eventos AE  
  INNER JOIN AGENDA_EVENTOS_TEMPO AET ON AET.AgdEve_Codigo = AE.AgdEve_Codigo  
 Where  AE.locatend_codigo = @clinica  
 and AE.prof_codigo = @medico  
 and convert(smalldatetime,convert(char(10),@data,120),120) between AET.AgdEve_Inicio AND AET.AgdEve_FIM  
-- and AE.agdeve_limiteExtra > 0  
 and     exists (select 1  
   From Agenda_consulta  
   Where  locatend_codigo = @clinica  
   and prof_codigo = @medico  
   and     agdeve_codigo = ae.agdeve_codigo  
   and     agd_datahora >= convert(smalldatetime,convert(char(10),@data,103),103)  
   and     agd_datahora < dateadd(d, 1, convert(smalldatetime,convert(char(10),@data,103),103))  
   and  agdeve_codigo is not null)  
  
 --Verifica a quantidade de Agendas EXTRAS jÃ¡ geradas para o DIA  
 Select  count(0) TOTAL  
 From Agenda_Consulta AC  
 Where  AC.locatend_codigo = @clinica  
 and AC.prof_codigo = @medico  
 and convert(char(10),@data,103) = convert(char(10),agd_datahora,103)  
 and ac.agd_tphorario = '3'  
  
End  
  
  
--TOTAL AGENDA PARA A CENTRAL DE MARCAÃƒ+O  
if @opcao = 28  
   BEGIN  
  
 set @sql = 'SELECT COUNT(1) TOTAL '  
  
 set @sql = @sql + ' FROM agenda_consulta ac  
       LEFT JOIN paciente pac ON ac.pac_codigo = pac.pac_codigo  
       INNER JOIN profissional_rede prof ON ac.prof_codigo = prof.prof_codigo  
       INNER JOIN vwlocal_unidade loc ON ac.locatend_codigo = loc.locatend_codigo  
       LEFT JOIN unidade_referencia ur ON ac.unidref_codigo = UR.unidref_codigo  
       INNER JOIN unidade u ON loc.unid_codigo = u.unid_codigo '  
  
 set @sql = @sql + ' WHERE (ac.agd_tphorario <> ''3'' or (ac.agd_tphorario = ''3'' and ac.pac_codigo is not null))  '  
  
  
 if @numero_consulta is not null  
    begin  
  set @sql = @sql + ' and ac.agd_sequencial = '''+ @numero_consulta + ''''  
    end  
 else  
    begin  
  -- ClÃ­nica e Data sÃ£o obrigatÃ³rios, nÃ£o sendo por NUMERO  
  set @sql = @sql + ' and ac.agd_datahora >= ''' + convert(CHAR(19),@data,120) + ''''  
  
  if @paciente is not null  
   set @sql = @sql + ' and ac.pac_codigo = ''' + @paciente + ''''  
  
  if @unid_codigo is not null  
   set @sql = @sql + ' and u.unid_codigo = ''' + @unid_codigo + ''''  
  
  if @clinica is not null  
   set @sql = @sql + ' and loc.locatend_codigo = ''' + @clinica + ''''  
   
  if @medico is not null  
   set @sql = @sql + ' and ac.prof_codigo = ''' + @medico + ''''  
  else  
   IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)  
    set @sql = @sql + ' and exists (select 1 from agenda_permissao a where a.locatend_codigo = loc.locatend_codigo and ac.prof_codigo = a.prof_codigo) '  
  
  -- livres ou todos  
  if @situacao = 'S' --somente horÃŸrios livres  
  begin  
   set @sql = @sql + ' and ac.pac_codigo is null'  
   set @sql = @sql + ' and ( ac.AGD_SITUACAO IN (''0'',''1'',''2'',''3'') or ac.agd_situacao is null)'  
  end  
  else  
   set @sql = @sql + ' and ( ac.AGD_SITUACAO IN (''0'',''1'',''2'',''3'') or ac.agd_situacao is null)'  
  
  set @sql = @sql + ' and CHARINDEX(agd_tphorario, ''' + @tipo_horario + ''') > 0 '  
  
  if @unidref_codigo is null  
   set @sql = @sql + ' and ac.unidref_codigo is null '  
  else  
   set @sql = @sql + ' and ac.unidref_codigo = ''' + @unidref_codigo + ''''  
  
 end   
  
  
  
 Exec(@sql)  
  
  
   END  
  
--Profissional Possui Agenda no dia (para encaixe) e retorna o horÃ¡rio da 1a consulta  
if @opcao = 29  --(CONTEMPLA A 30)  
   BEGIN  
 --TASKER 5248  
 create table #temp ( DATA_HORA smalldatetime,   
    HORA_MARCADA char(5),  
    TIPO CHAR(4),  
    agd_tphorario CHAR(1),  
    AGDEVE_CODIGO char(12),  
    STATUS CHAR(30) )  
  
  
 set @sql = 'INSERT INTO #temp SELECT  MIN(ac.AGD_DATAHORA) DATA_HORA, MIN(ac.agd_hora_marcada) HORA_MARCADA, '  
 SET @SQL = @SQL + ' CASE WHEN AC.AGD_TPHORARIO = 1 THEN ''1Vez'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 2 THEN ''Subs'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 3 THEN ''Extr'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 4 THEN ''Tria'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 5 THEN ''Fich'''   
 SET @SQL = @SQL + ' WHEN AC.AGD_TPHORARIO = 6 THEN ''R.Ra'' end Tipo,'  
 set @sql = @sql + ' ac.agd_tphorario, '  
 set @sql = @sql + 'AC.AGDEVE_CODIGO, '  
 set @sql = @sql + 'STATUS =  ( SELECT TOP 1 ''POSSUI VAGAS'' '   
  set @sql = @sql + ' FROM agenda_consulta ac2  '  
  --TASKER: CHAMADO 1173: EXTRA TB PARA VAGAS DE 1Âª VEZ  
  set @sql = @sql + ' WHERE CONVERT(CHAR(10),ac2.agd_datahora,120) = ''' + convert(CHAR(10),@data,120) + ''''   
  set @sql = @sql + ' and ac2.unid_codigo = ''' + @unid_codigo + ''''  
  set @sql = @sql + ' and ac2.locatend_codigo = ''' + @clinica + ''''  
  set @sql = @sql + ' and ac2.prof_codigo = ''' + @medico + ''''  
  set @sql = @sql + ' and ac2.pac_codigo is null '  
  set @sql = @sql + ' and ac2.agd_tphorario = 9 '  
  set @sql = @sql + ' and ac2.agdeve_codigo = ac.agdeve_codigo) '  
  
 set @sql = @sql + ' FROM agenda_consulta ac '  
 set @sql = @sql + ' WHERE ac.agd_tphorario <>  ''3'' '  
 set @sql = @sql + ' and CONVERT(CHAR(10),ac.agd_datahora,120) = ''' + convert(CHAR(10),@data,120) + ''''  
 set @sql = @sql + ' and ac.unid_codigo = ''' + @unid_codigo + ''''  
 set @sql = @sql + ' and ac.locatend_codigo = ''' + @clinica + ''''  
 set @sql = @sql + ' and ac.prof_codigo = ''' + @medico + ''''  
 set @sql = @sql + ' group by agdeve_codigo, ac.agd_tphorario '  
 set @sql = @sql + ' Order By DATA_HORA '  
  
 Exec(@sql)  
  
 UPDATE #TEMP  
 SET STATUS = (SELECT 'LIMITE ESGOTADO'  
   FROM AGENDA_EVENTOS AE  
   WHERE AE.AGDEVE_CODIGO = #TEMP.AGDEVE_CODIGO  
   AND   AE.agdeve_limiteExtra <= (SELECT count(0) TOTAL  
       From Agenda_Consulta AC  
       Where  AC.locatend_codigo = @clinica  
       and AC.prof_codigo = @medico  
       and convert(char(10),agd_datahora,103) = convert(char(10),@data,103)  
       and ac.agd_tphorario = '3'  
       and ac.agdeve_codigo = AE.AGDEVE_CODIGO ))  
       --AND ac.agd_hora_marcada= #TEMP.HORA_MARCADA ) )  
  
 WHERE STATUS IS NULL  
  
  
 UPDATE #TEMP  
  SET STATUS = 'DISPONIVEL PARA EXTRA'  
 WHERE STATUS IS NULL  
  
  
 select * from #temp  
  
 DROP TABLE #temp  
  
   END  
  
  
------------------- verifica se um paciente ja esta agenda na mesma data  ---------------------  
if @opcao = 30  
   BEGIN  
 SELECT ag.agd_datahora, pf.prof_nome, vw.LocAtend_descricao  
  FROM profissional pf ,agenda_consulta ag, vwlocal_unidade vw  
  WHERE ag.prof_codigo = pf.prof_codigo   
  AND ag.locatend_codigo = pf.locatend_codigo  
        AND ag.locatend_codigo = vw.locatend_codigo  
  AND ag.pac_codigo = @paciente   
  AND CONVERT(VARCHAR, ag.agd_datahora, 112) = CONVERT(VARCHAR, @data, 112)  
  AND ag.agd_situacao = '0'  
   END  
  
  
------------------- verifica se um paciente ja esta agenda nos prÃ³ximos 30 dias, na mesma clÃ­nica ---------------------  
if @opcao = 31  
   BEGIN  
 SELECT ag.agd_datahora, pf.prof_nome  
  FROM profissional pf ,agenda_consulta ag   
  WHERE ag.prof_codigo = pf.prof_codigo   
  AND ag.locatend_codigo = pf.locatend_codigo  
  
  AND (ag.locatend_codigo = @clinica)   
  AND ag.pac_codigo = @paciente   
        AND CONVERT(VARCHAR, ag.agd_datahora, 112) between CONVERT(VARCHAR, CONVERT(SMALLDATETIME,dateadd(month,-1, @data)), 112) and  CONVERT(VARCHAR, CONVERT(SMALLDATETIME,dateadd(month,1, @data)), 112)   
 AND     CONVERT(VARCHAR, ag.agd_datahora, 112) > CONVERT(VARCHAR,getdate(),112)  
  
  AND ag.agd_situacao = '0'  
   END  
  
----------------------------------------------------------------------------------------------------------------  
  
-- atualiza o codigo de atendimento na agenda de consulta e marca a   
-- situacao para confirmar que o paciente chegou  
if @opcao = 32  
begin  
        UPDATE  Agenda_Consulta   
 SET  atend_codigo  = @atend_codigo,  
  AGD_SITUACAO  = '5'   
 WHERE AGD_SEQUENCIAL = @numero_consulta  
end  
  
  
--Verifica a existÃªncia de feriado num perÃ­odo------------------------------------------------------------------  
if @opcao = 33  
  begin  
  
--     declare @tempo_inicio  datetime  
--  declare @tempo_fim  datetime   
--   
--     set @tempo_inicio  = '20080202'  
--  set @tempo_fim  = '20080205'     
  
  
    declare @cont as integer  
    set @cont = 0  
  
    select @cont = count(*)   
    from feriado  
    where convert(char(8),fer_data,112) = convert(char(8),@tempo_inicio,112)  
-- and convert(char(8),@tempo_fim,112)  
  
    select @cont  
  
  end  
  
    
    
--> CARREGA AGENDA LIVRE DO DIA (opÃ§Ã£o 08 da ksp_fila_espera)  
if @opcao = 34  
begin  
 select  convert(char(10),agdcons.agd_datahora,103) as data,   
    agdcons.agd_hora_marcada as hora,  
    prof.prof_nome,  
    agdcons.prof_codigo,  
    pac.pac_nome,  
    agdcons.agd_sequencial  
  
 from  agenda_consulta agdcons  
   
 inner join profissional prof   
 on   agdcons.locatend_codigo = prof.locatend_codigo  
 and   agdcons.prof_codigo = prof.prof_codigo  
   
 left join paciente pac   
 on   pac.pac_codigo = agdcons.pac_codigo  
  
    where  agdcons.locatend_codigo = @clinica  
    and   agdcons.agd_datahora < convert(smalldatetime, convert(varchar(10),getdate() + 1,101) + ' ' + '23:59:00' ,101)  
 and     agdcons.agd_situacao  = '3'  
 and   convert(varchar(10),agdcons.agd_datahora,103) = convert(varchar(10),getdate(),103)  
end    
    
  
  
------------------- lista medicos na caixa mdicos - tela de relatorios marcacao consulta  ---------------------  
if @opcao = 35  
  
begin  
  
  
  
  set @SQL = ' Select distinct (p.prof_nome + ''/'' + sc.setcli_descricao) AS PROF_CLINICA  ,ac.prof_codigo ,ac.locatend_codigo,  '  
        SET @SQL = @SQL + ' ac.locatend_codigo + ac.prof_codigo CLINICA_MEDICO '   SET @SQL = @SQL + ' From agenda_consulta ac, '  
        SET @SQL = @SQL + ' Profissional p, local_atendimento la,setor_clinica sc '  
  
        SET @SQL = @SQL + ' Where 1=1 '  
  
 if (@DATA_INICIAL)IS NOT  NULL  
 BEGIN  
 SET @SQL = @SQL + ' and  ac.agd_datahora  >= convert(smalldatetime,'''+ @DATA_INICIAL + ''', 103) '  
 END  
  
 if (@DATA_FINAL)IS NOT  NULL  
 BEGIN  
 SET @SQL = @SQL + ' AND ac.agd_datahora < DATEADD(day,1,convert(smalldatetime,'''+ @DATA_FINAL + ''',103)) '  
 END  
  
  
        SET @SQL = @SQL + ' and ac.pac_codigo is not null '  
        SET @SQL = @SQL + ' and ac.agd_tphorario is not null '  
        SET @SQL = @SQL + ' and ac.locatend_codigo = p.locatend_codigo '  
        SET @SQL = @SQL + ' and ac.locatend_codigo = la.locatend_codigo '  
        SET @SQL = @SQL + ' and la.setcli_codigo = sc.setcli_codigo '  
        SET @SQL = @SQL + ' and ac.prof_codigo = p.prof_codigo '  
        SET @SQL = @SQL + ' and la.unid_codigo = ''' + @unid_codigo + ''''  
        SET @SQL = @SQL + ' order by PROF_CLINICA '  
  
   
 execute (@SQL)  
  
END  
  
------------------- lista pacientes na caixa pacientes - tela de relatorios Outros  ---------------------  
if @opcao = 36  
  
begin  
  
 set @SQL = ' select (ag.agd_hora_marcada + space(2) +  convert(char(10),AG.agd_datahora,103) + space(2) +  PAC.pac_nome) AS DADOS_PACIENTE, '  
 SET @SQL = @SQL + '(AG.agd_sequencial) AS PAC_AGENDA,ag.pac_codigo,AG.agd_sequencial, '  
 SET @SQL = @SQL + '  ag.agd_hora_marcada,convert(char(10),AG.agd_datahora,103),AG.agd_sequencial,ag.pac_codigo '  
 SET @SQL = @SQL + ' From agenda_consulta ag inner join paciente pac  '  
 SET @SQL = @SQL + ' on pac.pac_codigo = ag.pac_codigo '  
 SET @SQL = @SQL + ' Where 1=1 '  
   
 if (@DATA_INICIAL)IS NOT  NULL  
 BEGIN  
 SET @SQL = @SQL + ' and CONVERT(char(10), ag.agd_datahora, 103) = ''' + @DATA_INICIAL + ''' '  
 END  
   
 if (@medico) IS NOT  NULL  
 BEGIN  
 SET @SQL = @SQL + ' AND AG.prof_codigo = ''' + @medico + ''' '  
 END  
   
 if (@clinica) is not null   
 begin  
 set @SQL = @SQL + ' AND AG.locatend_codigo = ''' + @clinica + ''' '  
 end  
  
 SET @SQL = @SQL + ' ORDER BY 1 '  
  
 execute (@SQL)  
END  
  
----------------------------------------------------------------------------------------------------------------  
  
if @opcao = 37 -- FindByKey  
BEGIN  
 select *   
 from agenda_consulta  
 where agd_sequencial = @numero_consulta  
END  
  
------------ LISTA TODOS OS PACIENTES COM CONSULTA OU EXAME DIAGNOSE MARCADOS PARA O DIA CORRENTE  -------------  
if @opcao = 38  
  
BEGIN  
 --exec ksp_Atualiza_Falta_Agenda;  
  
 select distinct k.data_hora as AGD_DATAHORA,  
  k.hora_marcada as AGD_HORA_MARCADA,  
  k.unid_codigo as UNID_CODIGO,  
  k.codigo_clinica as LOCATEND_CODIGO,  
  k.descricao_clinica as LOCATEND_DESCRICAO,  
  k.codigo_profissional as PROF_CODIGO,  
  k.nome_profissional as PROF_NOME,  
  k.codigo_paciente as PAC_CODIGO,  
  k.nome_paciente as PAC_NOME,  
  k.codigo_agenda as AGD_SEQUENCIAL,  
  pp.pac_prontuario_numero,  
  ae.AgeExa_Codigo as EXAME_CODIGO_AGENDA,  
  spe.solpedexa_codigo_exame as EXAME_CODIGO,  
  spe.solpedexa_descricao as EXAME_DESCRICAO,  
  k.codigo_atendimento as COD_ATEND,  
  case   
   when (select count(1) from internacao i where i.pac_codigo = k.codigo_paciente and i.inter_dtalta is null) > 0 then  
    'S'  
   else   
    'N'  
  end as estainternado,  
  grupo_assistencial  
 from knvwAgendaConsultaExame k  
  left join paciente_prontuario pp on k.codigo_paciente = pp.pac_codigo  
  left join agenda_exame ae on k.codigo_agenda = ae.AgeExa_Codigo  
  left join solicitacao_pedido_exame spe on k.codigo_pedido = spe.ped_codigo and k.codigo_procedimento = spe.solpedexa_Codigo_Exame  
  
 where k.grupo_assistencial = isnull(@grupo_assistencial, k.grupo_assistencial)  
   and k.data_hora >= isnull(@data, k.data_hora)  
   and k.data_hora < DATEADD(DD, 1, isnull(@data, k.data_hora))  
   and k.unid_codigo = @unid_codigo  
   and (k.codigo_situacao_agenda = @situacao or k.codigo_atendimento is not null)  
   and k.codigo_clinica = isnull(@clinica, k.codigo_clinica)  
   and k.codigo_profissional = isnull(@medico, k.codigo_profissional)  
   and k.codigo_agenda = isnull(@numero_consulta, k.codigo_agenda)  
   and k.codigo_paciente = isnull(@paciente, k.codigo_paciente)  
   and isnull(k.codigo_atendimento,'') = isnull(@atend_codigo, isnull(k.codigo_atendimento,''))  
   and isnull(spe.solpedexa_codigo_exame,'') = isnull(@solpedexa_codigo_exame, isnull(spe.solpedexa_codigo_exame,''))  
END  
  
----------------------------------------------------------------------------------------------------------------  
-- Obter  a informação agd_tphorario para realizar a cópia da agenda...  
if @opcao = 39   
BEGIN  
 select distinct agd_tphorario   
 from agenda_consulta  
 where agdeve_codigo = @agdeve_codigo  
END  
  
  
----------------------------------------------------------------------------------------------------------------  
-- Lista vagas de Agenda Consulta Disponiveis para Agendamento (usado na Integração do SER com Klinikos)  
----------------------------------------------------------------------------------------------------------------  
IF @opcao = 45  
BEGIN  
   
  SELECT   
    --Agenda e Vaga  
    ac.agdEve_Codigo, --Codigo da Agenda  
    ac.agd_sequencial, --Codigo do Vaga  
    ac.agd_datahora, --Data da Agenda  
    ac.agd_situacao, --Situacao  
    ac.agd_tphorario, --TipoHorario (1a vez, sub, Extra,Triag, Ficha, RetorRapid)  
    ac.agd_sequenciador, -- Sequenciador  
    ac.agd_hora_marcada AS HR_Inicio, --Hora Marcada para Chegada do Paciente  
      
    --Agenda  
    ae.HoraMarcadaAntecedencia, --MinutosDeAntecedencia  
    ae.agdeve_Mensagem1, -- MensagemBoleto1  
    ae.agdeve_Mensagem2, -- MensagemBoleto2  
    ae.agdeve_Mensagem3, -- MensagemBoleto3  
  
      
    --Unidade  
    u.unid_codigo,   
    u.UNID_CODIGOCNES, --CodigoCNES  
    u.unid_sigla,   
    RTRIM(u.unid_sigla) + '-' + u.unid_descricao AS unid_descricao,  
    u.unid_telefone,  
    cep.cep_logradouro, --Logradouro  
    u.unid_endereco_num, --Numero do Endereço  
  
    --Profissional  
    prof.prof_codigo,  
    prof.prof_nome,   
    --prof.prof_cns,  
    --prof.prof_cpf,  
    
    --Clinica  
    loc.set_descricao,  -- Clienica medica (Especialidade da vaga)  
    loc.locatend_codigo,   
    loc.set_codigo  
  
  FROM   agenda_consulta ac  
      LEFT JOIN paciente pac ON ac.pac_codigo = pac.pac_codigo   
      INNER JOIN profissional_rede prof  ON ac.prof_codigo = prof.prof_codigo  
      INNER JOIN vwlocal_unidade loc ON ac.locatend_codigo = loc.locatend_codigo   
      LEFT JOIN unidade_referencia ur ON ac.unidref_codigo = UR.unidref_codigo  
      INNER JOIN unidade u ON loc.unid_codigo = u.unid_codigo  
      INNER JOIN local_atendimento LA ON LA.locatend_codigo = loc.locatend_codigo  
      INNER JOIN setor_clinica SC ON sc.setcli_codigo = LA.setcli_codigo   
      INNER JOIN cep ON u.cep_sequencial = cep.cep_sequencial  
         INNER JOIN agenda_eventos_consumidor agendaConsumidor ON ac.agdeve_codigo = agendaConsumidor.agdeve_codigo  
      INNER JOIN Parametro_Unidade_Rede pUnidade ON agendaConsumidor.unid_codigo_consumidor = pUnidade.unid_codigo  
      INNER JOIN agenda_eventos ae ON ac.agdeve_codigo = ae.agdeve_codigo  
  
  WHERE        
      --Somente Vagas de Agenda que são da Unidade Central  
      idtCentralRegulacao = 1  
  
      AND ( ac.agd_tphorario <> '3' OR ( ac.agd_tphorario = '3' AND ac.pac_codigo IS NOT NULL ) )   
  
      AND Charindex(agd_tphorario, @TIPO_HORARIO) > 0  --1aVez, SubSequentes, etc..  
      AND ( ac.agd_situacao IN ( '0', '1', '2', '3' ) OR ac.agd_situacao IS NULL ) --Somete Situções Livres  
      AND ac.pac_codigo IS NULL --Nao tem ningem agendado  
  
      AND ac.unidref_codigo IS NULL --Nao eh Agenda do tipo referenciada  
  
      AND ac.agd_datahora >= @data -- DataHora Inical para BusCar as Vagas   
      AND ac.agd_datahora >= getdate() --Data e Hora de quando foi feita a consulta  
  
      AND ( loc.set_descricao LIKE '%'+ @nome_clinica +'%' OR @nome_clinica is NULL) --Busca ClinicaMedica por texto  
   
   ORDER  BY agd_datahora,   
      u.unid_sigla,   
      loc.set_descricao,   
      prof.prof_nome   
  
END  
  
----------------------------------------------------------------------------------------------------------------  
-- Lista vagas Agendadas de um Paciente  
----------------------------------------------------------------------------------------------------------------  
IF @opcao = 46  
BEGIN  
  
  SELECT DISTINCT  
   --Agenda e Vaga  
   ac.agdEve_Codigo, --Codigo da Agenda  
   ac.agd_sequencial, --Codigo do Vaga  
   ac.agd_datahora, --Data da Agenda  
   ac.agd_situacao, --Situacao  
   ac.agd_tphorario, --TipoHorario (1a vez, sub, Extra,Triag, Ficha, RetorRapid)  
   ac.agd_sequenciador, -- Sequenciador  
   ac.agd_hora_marcada AS HR_Inicio, --Hora Marcada para Chegada do Paciente  
      
   --Agenda  
   ae.HoraMarcadaAntecedencia, --MinutosDeAntecedencia  
   ae.agdeve_Mensagem1, -- MensagemBoleto1  
   ae.agdeve_Mensagem2, -- MensagemBoleto2  
   ae.agdeve_Mensagem3, -- MensagemBoleto3  
  
      
   --Unidade  
   u.unid_codigo,   
   u.UNID_CODIGOCNES, --CodigoCNES  
   u.unid_sigla,   
   RTRIM(u.unid_sigla) + '-' + u.unid_descricao AS unid_descricao,  
   u.unid_telefone,  
   cep.cep_logradouro, --Logradouro  
   u.unid_endereco_num, --Numero do Endereço  
  
   --Profissional  
   prof.prof_codigo,  
   prof.prof_nome,   
   --prof.prof_cns,  
   --prof.prof_cpf,  
    
   --Clinica  
   loc.set_descricao,  -- Clienica medica (Especialidade da vaga)  
   loc.locatend_codigo,   
   loc.set_codigo,  
  
   --Paciente  
   pac.PAC_CODIGO as PACIENTE,  
   pac.PAC_NOME as NOME_PACIENTE  
  
  FROM   agenda_consulta ac  
   INNER JOIN paciente pac ON ac.pac_codigo = pac.pac_codigo  
   INNER JOIN profissional_rede prof ON ac.prof_codigo = prof.prof_codigo  
   INNER JOIN vwlocal_unidade loc ON ac.locatend_codigo = loc.locatend_codigo   
   LEFT JOIN unidade_referencia ur ON ac.unidref_codigo = UR.unidref_codigo  
   INNER JOIN unidade u ON loc.unid_codigo = u.unid_codigo  
   INNER JOIN local_atendimento LA ON LA.locatend_codigo = loc.locatend_codigo  
   INNER JOIN setor_clinica SC ON sc.setcli_codigo = LA.setcli_codigo  
   INNER JOIN cep ON u.cep_sequencial = cep.cep_sequencial  
   INNER JOIN Parametro_Unidade_Rede pUnidade ON pUnidade.unid_codigo = U.unid_codigo  
   INNER JOIN agenda_eventos ae ON ac.agdeve_codigo = ae.agdeve_codigo  
  
  WHERE ( ac.agd_situacao IN ( '0' ) ) --Somete Situções Agendada  
   AND ac.pac_codigo IS NOT NULL --Tem alguem agendado  
   AND ( ac.pac_codigo = @paciente OR @paciente is null )  
  
   AND ac.agd_datahora >= @data -- DataHora Inical para BusCar as Vagas   
  
  ORDER  BY agd_datahora,   
    u.unid_sigla,   
    loc.set_descricao,   
    prof.prof_nome   
  
  
END  
  
----------------------------------------------------------------------------------------------------------------  
-- Lista por id_Solicitacao do SER2  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 47  
begin  
  
 SELECT  AC.prof_codigo, AC.locatend_codigo, AC.agd_datahora, AC.pac_codigo, AC.atend_codigo, AC.agdcon_origem_paciente, AC.agdcon_data_marcacao,  
  AC.agdcon_prim_cons, AC.agd_sequencial, AC.agd_situacao, AC.agd_tphorario, AC.usu_codigo, AC.AGD_DISPONIVEL, AC.agd_sequenciador,  
  AC.agd_turno, AC.agdcha_codigo, AC.agd_tempo_inicio, AC.agd_tempo_fim, AC.agd_hora_marcada, AC.unid_codigo, AC.agdcon_senha,  
  AC.AgdEve_Codigo, AC.ped_codigo, AC.procamb_codigo, AC.unidref_codigo, AC.agd_tphorario_original, AC.IdProcedimentoConvenio,AC.IdVersaoConvenioPadrao,  
  AC.unid_codigo_agendamento, AC.Agdcon_SMS_Enviado, AC.AgdVaga_Excluida, AC.SER2_idSolicitacao, AC.SER2_CheckinDataHora,  
  a.atend_data  
 FROM  AGENDA_CONSULTA AC  
 left join atendimento a on a.atend_codigo = ac.atend_codigo       
 WHERE  AC.SER2_idSolicitacao = @SER2_idSolicitacao  
 ORDER BY AC.AGD_DATAHORA  
  
  
end  
  
SET NOCOUNT OFF  
  
  
----------------------------------------------------------------------------------------------------------------  
-- Lista Agenda_Consulta que veio do SER2, que já foi feito checkin, mas que ainda não possui atendimento_ambulatorial  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 48  
begin  
  
 SELECT  AC.prof_codigo, AC.locatend_codigo, AC.agd_datahora, AC.pac_codigo, AC.atend_codigo, AC.agdcon_origem_paciente, AC.agdcon_data_marcacao,  
  AC.agdcon_prim_cons, AC.agd_sequencial, AC.agd_situacao, AC.agd_tphorario, AC.usu_codigo, AC.AGD_DISPONIVEL, AC.agd_sequenciador,  
  AC.agd_turno, AC.agdcha_codigo, AC.agd_tempo_inicio, AC.agd_tempo_fim, AC.agd_hora_marcada, AC.unid_codigo, AC.agdcon_senha,  
  AC.AgdEve_Codigo, AC.ped_codigo, AC.procamb_codigo, AC.unidref_codigo, AC.agd_tphorario_original, AC.IdProcedimentoConvenio,AC.IdVersaoConvenioPadrao,  
  AC.unid_codigo_agendamento, AC.Agdcon_SMS_Enviado, AC.AgdVaga_Excluida, AC.SER2_idSolicitacao, AC.SER2_CheckinDataHora,  
  a.atend_data,  
  pac.PAC_NOME,  
  pac.pac_nascimento,  
  PR.prof_nome,  
  loc.LocAtend_descricao  
 FROM  AGENDA_CONSULTA AC  
 inner join paciente pac on ac.pac_codigo = pac.pac_codigo  
 inner join SER2_Agendamento SA on AC.SER2_idSolicitacao = SA.idSolicitacao  
 left join atendimento a on a.atend_codigo = ac.atend_codigo     
 left join PROFISSIONAL_REDE PR on AC.prof_codigo = PR.prof_codigo   
 left join vwlocal_unidade loc ON ac.locatend_codigo = loc.locatend_codigo  
 WHERE    
 CAST(SA.agd_datahora as date) = cast(@data as date)  
 AND   
 SA.prof_codigo = ISNULL(@medico, SA.prof_codigo)  
 AND (SA.IdEspecialidadeSER2 IS NULL OR SA.IdEspecialidadeSER2 = ISNULL(@IdEspecialidadeSER2, SA.idEspecialidadeSER2))  
 AND AC.SER2_CheckinDataHora IS NOT NULL  
 AND NOT EXISTS (SELECT TOP 1 1 FROM atendimento_ambulatorial AA where AA.atend_codigo = AC.atend_codigo)  
 AND AC.agd_sequencial = ISNULL(@numero_consulta, AC.agd_sequencial)  
 ORDER BY AC.AGD_DATAHORA  
  
  
end  
  
----------------------------------------------------------------------------------------------------------------  
-- Atualiza Agenda_Consulta que veio do SER2 com a data/hora que foi feito o checkin no SER2  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 49  
begin  
        UPDATE  Agenda_Consulta   
  SET SER2_CheckinDataHora = @SER2_CheckinDataHora  
  WHERE AGD_SEQUENCIAL = @numero_consulta  
end  
  
----------------------------------------------------------------------------------------------------------------  
-- Atualiza Agenda_Consulta que veio do SER2 com a data/hora que foi feito informado o checkout no SER2  
----------------------------------------------------------------------------------------------------------------  
if @opcao = 50  
begin  
        UPDATE  Agenda_Consulta   
  SET SER2_CheckoutDataHora = @SER2_CheckoutDataHora  
  WHERE AGD_SEQUENCIAL = @numero_consulta  
end  
  
----------------------------------------------------------------------------------------------------------------  
-- Consulta agenda por atendimento
----------------------------------------------------------------------------------------------------------------  
if @opcao = 51
  begin  
  
 SELECT agd_sequencial,
  agd_datahora ,
  pac_codigo,   
  prof_codigo,  
  atend_codigo  
 FROM agenda_consulta 
 where atend_codigo = @atend_codigo
  
end  
  

  
SET NOCOUNT OFF
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_enche_combo]...';


GO
ALTER PROCEDURE [dbo].[ksp_enche_combo]
@opcao SMALLINT, @codigo VARCHAR (12), @codigo_aux VARCHAR (12), @prof_ativo CHAR (1), @tipprof CHAR (4), @Data SMALLDATETIME, @DataFinal SMALLDATETIME, @unid_codigo CHAR (4)=null, @usu_codigo CHAR (4)=null, @AtendimentoClinico CHAR (1)='N'
AS
SET NOCOUNT ON          
          
declare @unid_central char(4)    
          
-------------------------------------------------------------------------------------------------          
-- combo unidade referencia --          
if @opcao = 1            
  begin           
 select unidref_descricao,unidref_codigo   
 from unidade_referencia          
    where unid_codigo = isnull(@unid_codigo, unid_codigo)          
  and unidref_tipo = isnull(@codigo_aux,unidref_tipo)    
  and unidref_ativa = 'S'  
 order by unidref_descricao      
  end          
-------------------------------------------------------------------------------------------------          
-- combo leito --          
if @opcao = 2           
  begin          
 select lei_codigo from vwleito where enf_codigo = @codigo and unid_codigo = @unid_codigo          
 order by lei_codigo          
  end          
-------------------------------------------------------------------------------------------------          
-- combo clinica emergencia --          
if @opcao = 3           
  begin          
      select   locatend_descricao, locatend_codigo from vwClinica_Emergencia           
      where unid_codigo = isnull(@unid_codigo, unid_codigo)          
      order by locatend_descricao           
  end          
-------------------------------------------------------------------------------------------------          
-- combo leito livre --          
if @opcao = 4           
  begin          
          
 declare @sql4 varchar(2000)          
          
 set @sql4 = ' select locint_descricao,locatend_codigo locatend_codigo, lei_tipo from vwleito'          
 set @sql4 = @sql4 + ' where unid_codigo = ''' + @unid_codigo + ''''          
 set @sql4 = @sql4 + ' and lei_status = ''' + 'L' + ''''          
           
 If @codigo is not null          
  set @sql4 = @sql4 + ' and locatend_codigo = ''' + @codigo + ''''          
          
 If @codigo_aux is not null          
  set @sql4 = @sql4 + ' and set_codigo_comum = ''' + @codigo_aux + ''''           
          
 If @prof_ativo is null          
  set @sql4 = @sql4 + ' and Lei_Tipo <> ''' + '5' + ''''          
          
 set @sql4 = @sql4 + ' and not exists (select 1 from enfermaria e where e.enf_codigo = vwleito.enf_codigo_chave and e.enf_operacional = ''' + 'N' + ''')'          
 set @sql4 = @sql4 + ' order by locint_descricao'          
          
 exec(@sql4)          
          
  end          
          
-- combo leito livre DE OBSERVACAO--          
if @opcao = -4           
  begin          
 select locint_descricao,locatend_codigo locatend_codigo, lei_tipo from vwleito          
 where 1 = 1  and locatend_codigo = isnull(@codigo,locatend_codigo)           
 and set_codigo = isnull(@codigo_aux, set_codigo)          
 and lei_status = 'L'          
 and unid_codigo = @unid_codigo          
 and Lei_Tipo = '5'
 and enf_sexo in (isnull(@AtendimentoClinico,enf_sexo),'4','3')          
 order by locint_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo local internacao --          
if @opcao = 5           
  begin          
 select locatend_descricao,set_codigo from vwlocal_atendimento          
 where unid_codigo = isnull(@unid_codigo, unid_codigo)          
 order by locatend_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo convenio --          
if @opcao = 6           
  begin          
 select con_descricao,con_codigo from convenio          
 order by con_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo divisao --          
if @opcao = 7           
  begin         
 /*select div_descricao,div_codigo from divisao          
 order by div_descricao          
          
 PARA CENSO WEB */          
 select div_descricao,div_codigo,div_complementares from divisao          
 order by div_descricao          
          
  end          
-------------------------------------------------------------------------------------------------          
-- combo clinica --          
if @opcao = 8           
  begin          
 select locatend_descricao,locatend_codigo from vwlocal_atendimento          
 where unid_codigo = isnull(@unid_codigo, unid_codigo)          
 order by locatend_descricao           
  end          
-------------------------------------------------------------------------------------------------          
-- combo atividade profissional --          
if @opcao = 9           
  begin          
 select atvprof_descricao,atvprof_codigo from atividade_profissional          
 order by atvprof_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo unidade federativa --          
if @opcao = 10           
  begin          
 select uf_codigo,uf_sigla from unidade_federativa          
 order by uf_codigo          
  end          
-------------------------------------------------------------------------------------------------          
-- combo setor --          
if @opcao = 11           
  begin          
 select set_descricao,set_codigo from setor          
 order by set_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo enfermaria --          
if @opcao = 12           
  begin          
 select  locatend_descricao,locatend_codigo           
 from  vwenfermaria          
 where  LocAtend_Codigo_Clinica = Isnull(@codigo,LocAtend_Codigo_Clinica)          
 and  locatend_codigo = IsNull(@codigo_aux,locatend_codigo)          
 and     unid_codigo = @unid_codigo          
 -- CHAMADO 2875          
 and  exists (select 1 from enfermaria where enf_codigo =  vwenfermaria.Codigo_Enfermaria and enf_operacional = 'S' or @codigo_aux is not null)          
          
 order by locatend_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo estado paciente --          
declare @sql13 varchar(2000)          
if @opcao = 13           
  begin          
 declare @parametro varchar(12)        
 set @parametro = replace(replace(@codigo,',',''),'''','')        
        
 if (@parametro is not null)        
  select estpac_descricao,estpac_codigo from estado_paciente where CHARINDEX(SUBSTRING(@parametro,1,1), estpac_tipo)>0 OR CHARINDEX(SUBSTRING(@parametro,2,1), estpac_tipo)>0 order by estpac_descricao        
 else        
  select estpac_descricao,estpac_codigo from estado_paciente order by estpac_descricao        
 /*        
         
  set @sql13 = ' select estpac_descricao,estpac_codigo from estado_paciente'          
  If not @codigo is null           
       set @sql13 = @sql13 + ' where estpac_tipo in (' + @codigo + ')'          
  set @sql13 = @sql13 + ' order by estpac_descricao'          
            
 exec(@sql13)          
 */        
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo profissional --          
if @opcao = 14 or @opcao = -14           
  begin          
        if @CODIGO is null          
          
           if @tipprof is not null           
      select distinct p.prof_nome, p.prof_codigo          
              from profissional p          
       where p.tipprof_codigo = isnull(@tipprof, p.tipprof_codigo)          
       and  (p.prof_ativo = @prof_ativo or @prof_ativo is Null)          
             order by p.prof_nome          
           else          
      /*select distinct p.prof_nome, p.prof_codigo          
              from profissional p          
      order by p.prof_nome*/           
          
      select p.prof_nome, p.prof_codigo          
                   from profissional_rede p          
                    order by p.prof_nome            
          
        else           
          
  if @opcao < 0          
  begin          
   IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)          
      begin          
          
         select p.prof_nome, p.prof_codigo            
           from agenda_permissao a, profissional p          
           where p.locatend_codigo = @CODIGO          
  and (p.tipprof_codigo = @tipprof or @tipprof is Null)          
             and (p.prof_ativo = @prof_ativo or @prof_ativo is Null)          
      and (p.locatend_codigo = a.locatend_codigo and (p.prof_codigo = a.prof_codigo or a.prof_codigo is null))          
      and a.usu_codigo = @usu_codigo          
      and p.prof_permite_agenda = 'S'          
           order by p.prof_nome            
      end          
   else          
           select p.prof_nome, p.prof_codigo            
                from profissional p          
               where p.locatend_codigo = @CODIGO          
                   and (p.tipprof_codigo = @tipprof or @tipprof is Null)          
                   and (p.prof_ativo = @prof_ativo or @prof_ativo is Null)          
      and p.prof_permite_agenda = 'S'          
               order by p.prof_nome           
  end          
  else          
         if @AtendimentoClinico = 'N' or @AtendimentoClinico is null    
          select p.prof_nome, p.prof_codigo            
               from profissional p              
              where p.locatend_codigo = @CODIGO          
                  and (p.tipprof_codigo = @tipprof or @tipprof is Null)          
                  and (p.prof_ativo = @prof_ativo or @prof_ativo is Null)           
          order by p.prof_nome      
 else    
    
 select distinct p.prof_nome, p.prof_codigo              
  from profissional p    
  inner join Profissional_Lotacao pl on (pl.prof_codigo = p.prof_codigo and pl.prof_atend_clinico = 'S')      
  where pl.locatend_codigo = @CODIGO             
      order by p.prof_nome          
          
  end          
-------------------------------------------------------------------------------------------------          
-- CLINICA SPA ---          
if @opcao = 15           
  begin          
      SELECT   LOCATEND_DESCRICAO, LOCATEND_CODIGO           
      FROM     vwClinica_SPA          
      where unid_codigo = isnull(@unid_codigo, unid_codigo)          
      ORDER BY LOCATEND_DESCRICAO           
  end          
-------------------------------------------------------------------------------------------------          
-- combo local de atendimento          
if @opcao = 16           
  begin          
 select locatend_descricao,locatend_codigo           
 from vwlocal_unidade           
 where unid_codigo=isnull(@unid_codigo,unid_codigo)          
 order by locatend_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo clinica de atendimento --          
if @opcao = 17           
  begin          
 select locint_descricao,locatend_codigo from vwleito          
 where unid_codigo = @unid_codigo          
 order by locint_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo tipo logradouro --          
if @opcao = 18           
  begin          
 select RTRIM(UPPER(Descricao)) AS Descricao , Cod_SUS_Tiplogr from Tipo_Logradouro Order By descricao            
  end          
-------------------------------------------------------------------------------------------------          
-- combo bairro --          
if @opcao = 19           
  begin          
 select bai_descricao,bai_codigo from bairro          
 where mun_codigo = @codigo and (bai_inativo is null or bai_inativo = '0')          
 order by bai_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo municipio --          
if @opcao = 20           
  begin          
 select mun_descricao,mun_codigo from municipio          
 where uf_codigo = @codigo order by mun_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo procedimento ambulatorial --          
if @opcao = 21           
  begin          
 select procamb_descricao,procamb_codigo, (select top 1 tp.tp_sexo from TB_PROCEDIMENTO tp where tp.CO_PROCEDIMENTO = PROCAMB_CODIGO) as tp_sexo from procedimento_ambulatorial         where right(procamb_codigo,2)<>'00' order by procamb_codigo          
          select * from procedimento_ambulatorial
  end          
-------------------------------------------------------------------------------------------------          
-- combo acesso_clinica --          
if @opcao = 22           
  begin          
 select vl.locatend_descricao,ac.locatend_codigo           
 from usuario_permissao up,acesso a,acesso_clinica ac,vwlocal_atendimento vl          
 where up.usu_codigo = @codigo and up.ace_codigo = a.ace_codigo          
 and up.sis_codigo = ac.sis_codigo and a.ace_codigo = ac.ace_codigo           
 and ac.locatend_codigo = vl.locatend_codigo             
  end          
-------------------------------------------------------------------------------------------------          
-- combo especialidade --          
if @opcao = 23           
  begin          
	SELECT CO_TIPO_LEITO as 'esp_codigo', upper(NO_TIPO_LEITO) as 'esp_descricao'
	FROM TB_TIPO_LEITO with(nolock)
	order by NO_TIPO_LEITO          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo motivo de cobrança aih --      
    
if @opcao = 24           
    
  begin      
           
 declare @sql24 as varchar(1000)    
     
 set @sql24 = ''    
    
 set @sql24 = @sql24 + ' select distinct motivo_cobranca_unidade.motcob_codigo, '    
 set @sql24 = @sql24 + '(motivo_cobranca_unidade.motcobunid_descricao) as motcob_descricao '    
 set @sql24 = @sql24 + ' from motivo_cobranca_unidade '    
 set @sql24 = @sql24 + ' inner join motivo_cobranca_aih '    
 set @sql24 = @sql24 + ' on (motivo_cobranca_aih.motcob_codigo = motivo_cobranca_unidade.motcob_codigo) '    
 set @sql24 = @sql24 + ' where motcob_ativo = ''S''  '     
 set @sql24 = @sql24 + ' and  (motivo_cobranca_unidade.motcobunid_descricao  is not null) '    
           
  if @unid_codigo is not null    
 begin    
  set @sql24 = @sql24 + ' and (motivo_cobranca_unidade.unid_codigo = ''' + @unid_codigo + ''') '    
 end    
     
 set @sql24 = @sql24 + ' order by motcob_descricao  '    
     
      
 exec(@sql24)    
      
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo motivo de cobrança ambulatorial --          
if @opcao = 25           
  begin          
 select motcobamb_descricao,motcobamb_codigo from motivo_cobranca_ambulatorial          
 order by motcobamb_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- Combo Grupo --          
if @opcao = 26           
  begin          
 select grp_descricao, grp_codigo from grupo_acesso            
 order by grp_descricao           
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo serviço ambulatorial --          
if @opcao = 27           
  begin          
 select serv_codigo+' '+serv_descricao,serv_codigo from servico_ambulatorial          
 order by serv_codigo          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo classificação de serviço --          
if @opcao = 28           
  begin          
 select classserv_codigo+' '+classserv_descricao,classserv_codigo from classificacao_servico          
 order by classserv_codigo          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo grupo de atendimento --          
if @opcao = 29           
  begin          
 select grpatend_descricao,grpatend_codigo from grupo_atendimento          
 order by grpatend_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo tipo atendimento --          
if @opcao = 30           
  begin          
 select tpatend_descricao,tpatend_codigo from tipo_atendimento          
 order by tpatend_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo aih --          
-- verificar na aih          
if @opcao = 31           
  begin          
 select aih_sequencial,0 from espelho_aih          
 where inter_codigo = @codigo          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo ato profissional --          
if @opcao = 32           
  begin          
 select tipproc_codigo + '-' + tipproc_descricao,tipproc_codigo from tipo_procedimento          
 order by tipproc_codigo          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo tipo de ato --          
if @opcao = 33           
  begin          
 select tipato_codigo + '-' +tipato_descricao,tipato_codigo from tipo_ato          
 order by tipato_codigo          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo acesso --          
if @opcao = 34           
  begin          
 select ace_descricao,ace_codigo from acesso           
 where sis_codigo = @codigo order by ace_descricao           
  end          
          
-------------------------------------------------------------------------------------------------          
 -- combo nacionalidade --          
if @opcao = 35          
  begin          
 select pai_descricao,pai_codigo,pai_nacionalidade_sus from pais          
 order by pai_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo carater internacao --          
if @opcao = 36           
  begin          
 select carint_descricao,carint_codigo from carater_internacao          
 where carint_ativo = 'S'          
 order by carint_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo religiao --          
if @opcao = 37           
  begin          
 select rel_descricao,rel_codigo from religiao          
 order by rel_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo clinica internação --          
if @opcao = 38           
  begin          
 select locatend_descricao,locatend_codigo from vwclinica_Internacao          
 -- CENSO ON          
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 -- FIM          
 order by locatend_descricao           
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo tipo profissional --          
if @opcao = 39           
  begin          
 select tipprof_descricao,tipprof_codigo from tipo_profissional          
 order by tipprof_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo unidade hospitalar --          
if @opcao = 40           
  begin          
 select unid_descricao,unid_codigo from unidade          
 order by unid_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo natureza --          
if @opcao = 41           
  begin          
 select nat_descricao,nat_codigo from natureza_unidade           
 order by nat_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- Combo Sistema --          
if @opcao =42          
  begin          
 select sis_descricao,sis_codigo from sistema           
 order by sis_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo fluxo --          
if @opcao = 43           
  begin          
 select flu_descricao,flu_codigo from fluxo           
 order by flu_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo unidade sipac --          
if @opcao = 44           
  begin          
 select sipac_descricao,sipac_codigo from sipac           
 order by sipac_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo turno atendimento --          
if @opcao = 45           
  begin          
 select tur_descricao,tur_codigo from turno           
 order by tur_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo tipo prestador --          
if @opcao = 46           
  begin          
 select tipprest_descricao,tipprest_codigo from tipo_prestador           
 order by tipprest_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo tipo unidade --          
if @opcao = 47           
  begin          
 select tpunid_descricao,tpunid_codigo from tipo_unidade order by tpunid_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo nível hierarquico --          
if @opcao = 48           
  begin          
 select nh.niv_descricao, nh.niv_codigo          
 from nivel_hierarquia nh, hierarquia_TipoUnidade htu          
 where nh.niv_codigo = htu.niv_codigo and htu.tpunid_codigo = @codigo          
 order by niv_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo LEITO PERMUTA --          
if @opcao = 49           
  begin          
          
 Select  LocInt_Descricao,           
  Lei_Codigo + LocAtend_Codigo          
          
 From  vwLeito          
          
 where LocAtend_Codigo = @codigo          
 AND Lei_Codigo <> @Codigo_aux          
 AND     Lei_Status = 'O'          
 AND unid_codigo = @unid_codigo          
          
 Order By LocInt_Descricao          
  End          
------------------------------------------------------------------------------------------------          
-- Combo MEDICAMENTOS --          
if @opcao = 50          
  begin          
                  
 Select ins_salativo,ins_codigo from Medicamento          
 Order by ins_salativo          
  End          
------------------------------------------------------------------------------------------------          
-- Combo UNIDADE DE MEDIDA --          
if @opcao = 51          
  begin          
 Select undmed_sigla, undmed_codigo from unidade_medida          
 Order by undmed_descricao          
  End          
          
------------------------------------------------------------------------------------------------          
-- Combo MEDIDA POSOLOGICA --          
if @opcao = 52          
  begin          
  Select medpos_descricao,medpos_codigo from medida_posologia          
 Order by medpos_descricao          
  End         
-------------------------------------------------------------------------------------------------          
-- Combo VIA ADMINISTRATIVA --          
if @opcao = 53          
  begin          
  Select  via_descricao,via_codigo from via_administracao          
 Order by via_descricao          
  End          
-------------------------------------------------------------------------------------------------          
-- Combo FORMA DE APRESENTAÇAO --          
if @opcao = 54          
  begin          
  Select  apres_descricao,apres_codigo from forma_apresentacao          
 Order by apres_descricao          
  End          
-------------------------------------------------------------------------------------------------          
-- Combo Usuário --          
if @opcao = 55          
  begin          
 select usu_nome,usu_codigo from usuario order by usu_nome           
  end          
-------------------------------------------------------------------------------------------------          
-- Combo Usuario Sistema --           
if @opcao = 56          
  begin          
 select distinct u.usu_nome, u.usu_codigo           
   from usuario_sistema usu           
  inner join grupo_usuario gu on (usu.usu_codigo=gu.usu_codigo)          
  inner join usuario u on (u.usu_codigo=usu.usu_codigo)           
  where usu.sis_codigo = @codigo           
    and usu.usu_codigo = u.usu_codigo           
    and u.usu_codigo   = gu.usu_codigo          
    and gu.unid_codigo = isnull(@unid_codigo,gu.unid_codigo)          
  order by u.usu_nome           
  end          
-------------------------------------------------------------------------------------------------          
-- Combo LEITOS LIVRES NO PERIODO (LEITOS_LIVRES_NA_DATA) --          
-- Opção desabilitada / encontra-se no código da opção 127          
-------------------------------------------------------------------------------------------------          
-- Combos LEITOS PARA PERMUTA (veio da sp_leito, opcao 5) --          
if @opcao = 58 or @opcao = -58          
  begin          
          
 Select  LocInt_Descricao,           
  LocAtend_Codigo          
           
 From  vwLeito          
           
 where  LocAtend_Codigo = @Codigo          
 AND     Lei_Status = 'O'          
 AND     unid_codigo = @unid_Codigo          
 -- and  locatend_codigo + lei_codigo not in          
 -- (select locatend_leito + lei_codigo from internacao where inter_codigo = @Codigo_Aux)          
 -- and (  (@opcao < 0 and lei_tipo = '5')          
 -- or (@opcao > 0 and lei_tipo <> '5') )          
          
           
 Order By LocInt_Descricao          
          
          
End          
          
          
-------------------------------------------------------------------------------------------------          
-- Combo PLANO DE SAUDE --          
if @opcao = 59          
  begin          
 select plan_descricao, plan_codigo  from plano_saude          
 order by plan_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo SEGURO SAUDE --          
if @opcao = 60          
  begin          
 select seg_descricao, seg_codigo  from seguro          
 order by seg_descricao          
  end          
          
-------------------------------------------------------------------------------------------------          
-- Combo EXAMES DA RADIOLOGIA --          
if @opcao = 61          
  begin          
          
 SELECT exarad_descricao, exarad_codigo,exarad_ativo          
 FROM exame_radiologico 
 where  isnull(exarad_ativo, 1) = 1         
 ORDER BY exarad_descricao          

          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo EQUIPAMENTOS DA RADIOLOGIA --          
if @opcao = 62          
  begin          
          
 SELECT equiprad_desc, equiprad_codigo          
 FROM equipamento_radiologico          
 ORDER BY equiprad_codigo          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo PROCEDIMENTOS DE INTERNAÇÃO DA RADIOLOGIA --          
if @opcao = 63          
  begin          
          
 SELECT proc_descricao          
 FROM vwprocedimento_internacao_radiologico          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo FILMES DA RADIOLOGIA --          
if @opcao = 64          
  begin          
          
 SELECT fil_descricao, fil_codigo          
 FROM filme_radiologico          
 ORDER BY fil_descricao          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo LOCAL DE COLETA DO LABORATÓRIO --          
if @opcao = 65          
  begin          
 SELECT '[' + ISNULL(loccollab_codigo_local,'') + '] ' + loccollab_descricao as loccollab_descricao,           
  loccollab_codigo          
  FROM local_coleta_laboratorio          
  end          
          
-------------------------------------------------------------------------------------------------          
-- Combo DESTINO DO LABORATÓRIO --          
if @opcao = 66          
  begin           
 SELECT dest_descricao, dest_codigo          
 FROM destino ORDER BY dest_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo PACOTE DO LABORATÓRIO --          
if @opcao = 67          
  begin          
 SELECT distinct pa.pacexalab_descricao, pa.pacexalab_codigo          
 FROM pacote_laboratorio pa, pacote_exame_laboratorio pe, exame_laboratorio el           
 WHERE pa.pacexalab_codigo = pe.pacexalab_codigo           
 AND  pe.exalab_codigo  = el.exalab_codigo          
 AND  unid_codigo       = @unid_codigo          
 ORDER BY pa.pacexalab_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo EXAMES PARA A COMBO DA SOLICITAÇÃO DE EXAMES DO LABORATÓRIO --          
if @opcao = 68          
  begin          
          
 --SELECT isnull(el.exalab_mneumonico,'   ') + ' - ' + isnull(el.exalab_descricao,'') exalab_descricao, el.exalab_codigo          
 SELECT isnull(el.exalab_descricao,'') + ' - '  + isnull(el.exalab_mneumonico,'     ')   exalab_descricao, el.exalab_codigo          
        FROM exame_laboratorio el          
 WHERE EXISTS           
  (SELECT 1          
   FROM ELEMENTO_EXAME_LABORATORIO EEL          
   WHERE EEL.EXALAB_CODIGO = EL.EXALAB_CODIGO          
     AND EEL.ATIVO = 'S'          
     AND EEL.UNID_CODIGO = @UNID_CODIGO)          
        ORDER BY el.exalab_descricao          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo SEÇÃO DO LABORATÓRIO --          
if @opcao = 69          
  begin          
 SELECT sec_descricao, sec_codigo          
         FROM secao          
  --WHERE unid_codigo = @unid_codigo          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo FAIXA ETÁRIA DO LABORATÓRIO --          
if @opcao = 70          
  begin          
          
 SELECT faixa_descricao, faixa_codigo          
        FROM faixa_etaria          
-- WHERE faixa_tipo = '1'          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo FÓRMULA DO LABORATÓRIO --          
if @opcao = 71          
  begin          
          
 SELECT eleform_formula, eleform_codigo          
        FROM elemento_formula_laboratorio          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo VALOR DE REFERÊNCIA DO LABORATÓRIO -- Não Existe mais          
if @opcao = 72          
  begin          
 SELECT elemento_laboratorio.elelab_descricao,elemento_exame_laboratorio.elelab_codigo          
  FROM elemento_exame_laboratorio,          
   elemento_laboratorio          
  WHERE  elemento_Exame_laboratorio.exalab_codigo = IsNull(@codigo,elemento_Exame_laboratorio.exalab_codigo)          
  AND  elemento_exame_Laboratorio.elelab_codigo = Elemento_laboratorio.elelab_codigo          
  AND  elemento_exame_laboratorio.unid_codigo = @unid_codigo          
  AND elemento_exame_laboratorio.Ativo = 'S'          
  ORDER BY elelab_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo EXAME DO LABORATÓRIO --          
if @opcao = 73          
  begin          
          
 SELECT exalab_descricao, exalab_codigo          
        FROM exame_laboratorio          
 ORDER BY exalab_descricao          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo ELEMENTO DO LABORATÓRIO --          
if @opcao = 74          
  begin          
          
 SELECT elelab_descricao, elelab_codigo          
        FROM elemento_laboratorio          
 ORDER BY elelab_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo MÉTODO DO LABORATÓRIO --          
if @opcao = 75          
  begin          
          
 SELECT metlab_descricao, metlab_codigo          
        FROM metodo_laboratorio          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo FABRICANTE DO LABORATÓRIO --       
if @opcao = 76          
  begin          
          
 SELECT fablab_descricao, fablab_codigo          
        FROM fabricante_laboratorio          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo EQUIPAMENTO DO LABORATÓRIO --          
if @opcao = 77          
  begin          
 SELECT equiplab_descricao, equiplab_codigo          
        FROM equipamento_laboratorio          
 where unid_codigo = isnull(@unid_codigo, unid_codigo)          
  and sec_codigo = isnull(@codigo_aux,sec_codigo)          
 and ativo = 'S'           
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo MATERIAL LABORATORIO --          
if @opcao = 78          
  begin          
          
 SELECT matlab_descricao, matlab_codigo          
        FROM material_laboratorio          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo UNIDADES DE MEDIDA DO LABORATÓRIO --          
if @opcao = 79          
  begin          
          
 SELECT undmed_sigla, undmed_codigo          
        FROM unidade_medida          
 WHERE undmed_tipo = isnull(@codigo_aux,undmed_tipo)          
        --undmed_tipo ='L'          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo ATIVIDADE ECONÔMICA --          
If @opcao = 80          
  begin          
           
 SELECT descricao,Cod_cnaer           
 FROM Atividade_Economica ORDER BY descricao          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo OCUPAÇÕES --          
If @opcao = 81          
  begin          
 SELECT no_ocupacao, CO_OCUPACAO          
 FROM TB_OCUPACAO           
     WHERE isnumeric(CO_OCUPACAO) = 1          
     ORDER BY no_ocupacao          
          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo Versao da AIH --          
If @opcao = 82          
  begin          
            
  SELECT veraih_versao Descricao, veraih_versao Codigo          
 FROM Versao_Aih    
 ORDER BY  veraih_versao DESC          
          
/* SELECT substring(veraih_versao,1,2) + '.' + substring(veraih_versao,3,2) Descricao, veraih_versao Codigo          
 FROM Versao_Aih           
 ORDER BY  veraih_versao DESC          
*/          
  end          
-------------------------------------------------------------------------------------------------          
-- Combo medico auditor da aih --          
if @opcao = 83          
begin          
--    select p.prof_nome,            
--            codigo = (select top 1 p2.prof_codigo + p2.locatend_codigo          
--                      from profissional p2           
--                      where p2.prof_codigo = p.prof_codigo)          
--    from  profissional_rede p          
--    where  exists (select 1 from profissional p3           
--                    where p3.prof_codigo = p.prof_codigo          
--                    and p3.tipprof_codigo = @tipprof           
--                    and p3.unid_codigo = @unid_codigo )          
--    order by p.prof_nome            
          
select distinct p.prof_nome,          
            codigo = (select top 1 p2.locatend_codigo + p2.prof_codigo           
                      from profissional p2           
                      where p2.prof_codigo = p.prof_codigo)          
    from  profissional_rede p,profissional_lotacao PL          
    where  exists (select 1 from profissional p3          
                    where p3.prof_codigo = p.prof_codigo          
      and p3.prof_codigo = PL.prof_codigo          
                    and p3.tipprof_codigo = @tipprof            
                    and p3.unid_codigo = @unid_codigo)          
      and PL.profchefeclinica = 'S'          
    order by p.prof_nome          
          
          
          
          
          
          
end          
-------------------------------------------------------------------------------------------------          
-- Combo Dosagens por Paciente --          
If @Opcao = 84          
begin          
 select dose_sequencial,itpresc_codigo from aprazamento          
 where presc_codigo = @codigo and itpresc_codigo = @Codigo_aux  and dose_adm = '0'          
 order by itpresc_codigo,dose_sequencial           
end          
-------------------------------------------------------------------------------------------------          
-- Combo Módulos do Klinikos®2002 --          
if @opcao = 85          
begin          
 select modulo_nome, modulo_codigo from modulo          
 order by modulo_nome          
end          
-------------------------------------------------------------------------------------------------          
-- Combo Títulos dos Relatórios --          
if @opcao = 86           
  begin      
 select  right('000' + rtrim(relatorio_codigo),3) + ' - ' + relatorio_titulo as tituloRelatorio, relatorio_codigo      
 from  relatorio            
 where  relatorio_codigo = Isnull(@codigo,relatorio_codigo)            
 and  modulo_codigo = IsNull(@codigo_aux,modulo_codigo)            
 order by relatorio_titulo       
  end          
--------------------------------------------------------------------------------------------------          
-- combo Clinica + Profissional (Tela Procedimentos Realizados) --          
if @opcao = 87          
  begin          
 select p.prof_nome,           
               p.locatend_codigo + p.prof_codigo           
          from profissional p          
  where p.locatend_codigo = isnull(@codigo, p.locatend_codigo)          
    and p.tipprof_codigo = @tipprof           
           and p.prof_ativo = isnull(@prof_ativo, p.prof_ativo)           
  order by p.prof_nome            
  end          
--------------------------------------------------------------------------------------------------          
-- combo Exame Pré-Anestésico --          
if @opcao = 88          
  begin          
 select exa_descricao, exa_codigo from exames          
 where  isnumeric(exa_codigo)=1          
 order by exa_descricao          
  end          
--------------------------------------------------------------------------------------------------          
-- combo Droga Pré-Anestésico --          
if @opcao = 89          
  begin          
 select mat_descricao, mat_codigo from material          
 where mat_indicador = '1'          
  end          
-------------------------------------------------------------------------------------------------          
-- combo Porte Cirúrgico          
if @opcao = 90          
  begin          
 select por_descricao, por_codigo from porte_cirurgico          
 order by por_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo sala Cirúrgica          
if @opcao = 91          
  begin          
 select sala_descricao, sala_codigo from sala_cirurgica  
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 order by sala_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo classe Cirúrgica          
if @opcao = 92          
  begin          
 select cla_descricao, cla_codigo from classe_cirurgica          
 order by cla_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo tipo anestesia          
if @opcao = 93          
  begin          
 select tipanes_descricao, tipanes_codigo from tipo_anestesia          
 order by tipanes_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo tipo_contaminação          
if @opcao = 94          
  begin          
 select cont_descricao, cont_codigo from tipo_contaminacao          
 order by cont_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo categoria cirúrgica          
if @opcao = 95          
  begin          
 select cate_descricao, cate_codigo from categoria_cirurgica          
 order by cate_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo motivo_cirurgia          
if @opcao = 96          
  begin          
 select mot_descricao, mot_codigo from motivo_cirurgia          
 order by mot_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo material          
if @opcao = 97          
  begin          
 select mat_descricao, mat_codigo from material          
 order by mat_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo integrante da equipe          
if @opcao = 98          
  begin          
 SELECT 'L' + L.LOCATEND_CODIGO + 'P' + E.PROF_CODIGO PROFCOD,           
               L.SET_DESCRICAO + ' - ' + P.PROF_NOME PROFNOME           
   FROM PROFISSIONAL P,           
               EQUIPE_CIRURGICA E,           
               VWLOCAL_ATENDIMENTO L           
  WHERE E.PROF_CODIGO = P.PROF_CODIGO           
           AND E.LOCATEND_CODIGO = L.LOCATEND_CODIGO           
  GROUP BY 'L' + L.LOCATEND_CODIGO + 'P' + E.PROF_CODIGO,           
                  L.SET_DESCRICAO + ' - ' + P.PROF_NOME          
  end          
-------------------------------------------------------------------------------------------------          
-- combo função cirúrgica          
if @opcao = 99          
  begin          
 select funcir_descricao, funcir_codigo from funcao_cirurgica          
 order by funcir_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo coloração          
if @opcao = 100          
  begin          
 select pos_col_descricao, pos_col_codigo from coloracao          
 order by pos_col_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo nível de consciencia          
if @opcao = 101          
  begin          
 select pos_cons_descricao, pos_cons_codigo from consciencia          
 order by pos_cons_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo mobilidade          
if @opcao = 102          
  begin          
 select pos_mob_descricao, pos_mob_codigo from mobilidade          
 order by pos_mob_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo circulação          
if @opcao = 103          
  begin          
 select pos_cir_descricao, pos_cir_codigo from circulacao          
 order by pos_cir_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo respiração          
if @opcao = 104          
  begin          
 select pos_res_descricao, pos_res_codigo from respiracao          
 order by pos_res_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo tipo antibiótico          
if @opcao = 105          
  begin          
 select ant_descricao, ant_codigo from tipo_antibiotico          
 order by ant_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo item avaliação          
if @opcao = 106          
  begin          
 select item_descricao, item_codigo from item_avaliacao          
 order by item_descricao          
  end          
------------------------------------------------------------------------------------------------          
--combo atividade hospitalar          
if @opcao = 107          
begin          
 SELECT  ATV_DESCRICAO,          
  ATV_CODIGO          
 FROM  ATIVIDADE_HOSPITALAR          
        order by atv_descricao          
          
end           
-------------------------------------------------------------------------------------------------          
--combo procedimento cirurgico--          
if @opcao = 108         
begin          
 select proc_descricao,proc_codigo          
 from procedimento          
 where proc_idade_minima >= isnull(convert(int,@codigo),proc_idade_minima)          
 and proc_idade_maxima <= isnull(convert(int,@codigo_aux),proc_idade_maxima)          
 and proc_codigo between '31000000' and '49999999'          
 order by proc_descricao          
end          
          
-------------------------------------------------------------------------------------------------          
--combo equipamento da tela de interfaceamento do laboratório--          
if @opcao = 109          
begin          
 select equiplab_descricao, equiplab_codigo          
 from equipamento_laboratorio          
 order by equiplab_descricao          
end          
-------------------------------------------------------------------------------------------------          
--combo RACA          
if @opcao = 110          
begin          
 select raca_desc, raca_codigo          
 from raca          
 where raca_fl_ativo = 'S'          
 order by raca_desc          
end          
          
-------------------------------------------------------------------------------------------------          
-- carrega a listab de pacientes para impressao de relatorio da agenda de consulta          
if @opcao =111          
begin          
  SELECT HORA + SPACE(02) + DATA + SPACE(02) + PACIENTE PACIENTE,          
  SEQCONSULTA          
           From VWRCOMPROVANTECONSULTA          
          WHERE LOCATEND_CODIGO = @codigo          
            AND PROF_CODIGO     = @codigo_aux          
            AND DATA            = convert(char(10),@data,103)          
          
end          
          
-------------------------------------------------------------------------------------------------          
--Natureza_Unidade          
if @opcao = 112          
begin          
 select Nat_descricao, Nat_codigo          
 from Natureza_Unidade          
 order by Nat_descricao          
end          
          
-------------------------------------------------------------------------------------------------          
--Nivel_Hierarquia          
if @opcao = 113          
begin          
 select Niv_descricao, Niv_codigo          
 from Nivel_Hierarquia          
 order by Niv_descricao          
end          
          
-------------------------------------------------------------------------------------------------          
--Turno          
if @opcao = 114          
begin          
 select Tur_descricao, Tur_codigo          
 from Turno          
 order by Tur_descricao          
end          
          
-------------------------------------------------------------------------------------------------          
--Servico_Ambulatorial          
if @opcao = 115          
begin          
 select Serv_descricao, Serv_codigo          
 from Servico_Ambulatorial          
 order by Serv_descricao          
end          
          
-------------------------------------------------------------------------------------------------          
--Class_Servico          
if @opcao = 116          
begin          
 select ClassServ_descricao, ClassServ_codigo          
 from Classificacao_Servico          
 order by ClassServ_descricao          
end          
-------------------------------------------------------------------------------------------------          
--profissional para EQUIPE CIRUEGICA VER OPCAO 369  
if @opcao = 117            
begin            
 CREATE TABLE #tempcir(profcod char(8),profnome varchar(50))    
    
if (@CODIGO = '0003' or  @CODIGO = '0004'  or @CODIGO = '0007')    
Begin    
    
 INSERT INTO #tempcir (profcod,profnome)            
 SELECT P.LOCATEND_CODIGO + P.PROF_CODIGO PROFCOD,             
               P.PROF_NOME             
   FROM PROFISSIONAL P            
  WHERE             
--   P.TIPPROF_CODIGO = '0001'             
        P.PROF_CIRURGIA = 'S'             
           AND PROF_ATIVO = 'S'            
    AND P.FUNCIR_CODIGO in ('0003', '0004', '0007')    
                       
  GROUP BY P.PROF_NOME,             
                  P.LOCATEND_CODIGO + P.PROF_CODIGO             
 UNION              
 SELECT L.SET_CODIGO + P.PROF_CODIGO PROFCOD,             
               P.PROF_NOME             
   FROM PROFISSIONAL P, SETOR L             
  WHERE P.LOCATEND_CODIGO = L.SET_CODIGO             
--     AND P.TIPPROF_CODIGO = '0002'            
    AND P.PROF_CIRURGIA = 'S'             
           AND PROF_ATIVO = 'S'            
    AND P.FUNCIR_CODIGO in ('0003', '0004', '0007')          
  GROUP BY P.PROF_NOME,             
                  L.SET_CODIGO + P.PROF_CODIGO          
    
End    
Else    
Begin           
            
 INSERT INTO #tempcir (profcod,profnome)            
 SELECT P.LOCATEND_CODIGO + P.PROF_CODIGO PROFCOD,             
               P.PROF_NOME             
   FROM PROFISSIONAL P            
  WHERE             
--   P.TIPPROF_CODIGO = '0001'             
        P.PROF_CIRURGIA = 'S'             
           AND PROF_ATIVO = 'S'            
    AND P.FUNCIR_CODIGO = @CODIGO              
                       
  GROUP BY P.PROF_NOME,             
                  P.LOCATEND_CODIGO + P.PROF_CODIGO             
 UNION              
 SELECT L.SET_CODIGO + P.PROF_CODIGO PROFCOD,             
               P.PROF_NOME             
   FROM PROFISSIONAL P, SETOR L             
  WHERE P.LOCATEND_CODIGO = L.SET_CODIGO             
--     AND P.TIPPROF_CODIGO = '0002'            
    AND P.PROF_CIRURGIA = 'S'             
           AND PROF_ATIVO = 'S'            
    AND P.FUNCIR_CODIGO = @CODIGO            
  GROUP BY P.PROF_NOME,             
                  L.SET_CODIGO + P.PROF_CODIGO            
             
end    
    
 SELECT DISTINCT profnome,profcod             
          FROM #tempcir            
   ORDER BY profnome            
             
 DROP TABLE #tempcir            
end            
-------------------------------------------------------------------------------------------------          
--combo Profissional avaliador (Centro Cirúrgico)          
if @opcao = 118          
begin       
  
 -- Chamado 22363 - 01/07/2011 ------------------------------------------------------------   
 SELECT P.PROF_NOME AS profnome, P.PROF_CODIGO + '-' + P.LOCATEND_CODIGO AS profcod
 FROM PROFISSIONAL P   
    INNER JOIN PROFISSIONAL_LOTACAO_FUNCAO_CIRURGICA PLFC   
    ON  (P.PROF_CODIGO = PLFC.PROF_CODIGO   
    AND   P.LOCATEND_CODIGO = PLFC.LOCATEND_CODIGO )  
    INNER JOIN  FUNCAO_CIRURGICA FC    
    ON    FC.FUNCIR_CODIGO = PLFC.FUNCIR_CODIGO  
 WHERE 1=1   
 AND   FC.FUNCIR_AVALIADOR = 'S'  
 AND   FC.FUNCIR_CODIGO = @CODIGO  
  
     
--  select la.set_descricao + ' - ' + med.prof_nome mednome,           
--                '9' + med.prof_codigo + la.locatend_codigo locatendcodigo           
--      from profissional med,           
--                vwlocal_atendimento la           
--   where med.locatend_codigo = la.locatend_codigo            
--   order by la.set_descricao + ' - ' + med.prof_nome          
end          
-------------------------------------------------------------------------------------------------          
--combo Motivo de Cancelamento          
if @opcao = 119          
begin          
 select mot_descricao, mot_codigo           
 from motivo_cancelamento          
 order by mot_descricao          
end          
-------------------------------------------------------------------------------------------------          
--combo FAIXA ETARIA (BPA)          
if @opcao = 120          
begin          
           
 select CONVERT(varchar,Idade_Inicial) +  ISNULL(RTRIM(' a ' + convert(varchar,Idade_Final)),'') + ' ' + faixa_descricao faixa_descricao, faixa_codigo          
 from Faixa_Etaria          
 Where faixa_codigo < '999'          
 order by faixa_codigo          
end          
          
          
-------------------------------------------------------------------------------------------------          
--combo Tabela_Importacao          
if @opcao = 121          
begin          
        select Tabela_Nome,          
               Tabela_Codigo          
          from Tabela_Importacao          
         where Modulo_Codigo = @codigo          
           and Tabela_Origem = @codigo_aux          
end          
-------------------------------------------------------------------------------------------------          
--combo Clinicas de Leito          
if @opcao = 122          
begin          
 select locatend_descricao,locatend_codigo from vwclinica_Leito          
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 order by locatend_descricao           
end          
          
-------------------------------------------------------------------------------------------------          
-- Combo EXAMES DA RADIOLOGIA --          
if @opcao = 123          
  begin          
          
 SELECT b.exarad_descricao, a.exarad_codigo          
 FROM exame_radiologico_solicitado a, exame_radiologico b          
 WHERE pedexarad_codigo = @codigo and          
  a.exarad_codigo = b.exarad_codigo          
          
  end          
--------------------------------------------------------------------------------------------------          
-- Médico Auditor          
if @opcao = 124          
  begin          
 select  p.prof_nome,           
                p.locatend_codigo + p.prof_codigo           
        from  profissional p          
 where  p.tipprof_codigo = @tipprof           
 and  p.prof_ativo = isnull(@prof_ativo,p.prof_ativo)           
 and  p.prof_medAuditor = 'S'          
 and p.unid_codigo = @unid_codigo          
 order by p.prof_nome            
  end          
          
-- combo clinica internação setor --          
if @opcao = 125           
  begin          
 select locatend_descricao,set_codigo from vwclinica_Internacao          
 -- CENSO ON          
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 -- FIM          
 order by locatend_descricao           
  end          
-------------------------------------------------------------------------------------------------          
--Combo LEITOS LIVRES NO PERIODO (LEITOS_LIVRES_NA_DATA) a partir do censo hospitalar--          
--Combo LEITOS LIVRES NO PERIODO (LEITOS_LIVRES_NA_DATA) a partir do censo hospitalar--          
          
if @opcao = 126 or @opcao = 57 or @opcao = -126             
            
    begin            
            
    SELECT DISTINCT VW.LOCINT_DESCRICAO, VW.LOCATEND_CODIGO, vw.LEI_TIPO  
   FROM VWLEITO vw  
  INNER JOIN local_atendimento la ON  LA.SETCLI_CODIGO = VW.SET_CODIGO   
  AND LA.UNID_CODIGO = @UNID_CODIGO   
  AND VW.UNID_CODIGO = @UNID_CODIGO  
  INNER JOIN LEITO_HISTORICO LH ON LH.lei_codigo = VW.lei_codigo   
  AND LH.locatend_codigo = VW.locatend_codigo    
   WHERE  
   NOT EXISTS       
    (SELECT 1  
     FROM MOVIMENTACAO_PACIENTE M  
     WHERE M.LOCATEND_CODIGO = VW.LOCATEND_CODIGO  
       AND M.LEI_CODIGO = VW.LEI_CODIGO  
       AND M.MOVPAC_DATA <= ISNULL((Convert(datetime, @DATAFINAL, 120)), GETDATE())    
       AND Convert(datetime,@DATA, 120) <= ISNULL(M.MOVPAC_DATA_SAIDA, GETDATE()))                  
     
     AND VW.LEI_STATUS = 'L'     
     AND LA.ENF_CODIGO IS NULL                     
     AND ((@OPCAO = -126 AND VW.LEI_TIPO = '5')                
     OR (@OPCAO = 126  AND VW.LEI_TIPO <> '5')          
     OR (@OPCAO = 57) )            
     AND (@CODIGO IS NULL OR VW.LOCATEND_CODIGO = @CODIGO)          
     AND (@CODIGO_AUX IS NULL OR LA.LOCATEND_CODIGO = @CODIGO_AUX)       
  AND LH.DATA <= Convert(DATETIME,@DATA,120)             
    
  ORDER BY VW.LOCINT_DESCRICAO   
  end        
            
          
------------------------------------------------------------------------------------------------          
          
-------------------------------------------------------------------------------------------------          
-- combo procedimento ambulatorial --          
if @opcao = 127           
  begin          
 select p.procamb_descricao,          
               p.procamb_codigo           
          from procedimento_ambulatorial p          
  where right(p.procamb_codigo,2) <> '00'           
           and Not Exists(Select a.ProcApac_Codigo_Principal           
                            From Procedimento_Apac a          
                           Where a.ProcApac_Codigo_Principal = p.procamb_codigo)          
         order by p.procamb_descricao          
  end          
          
          
-------------------------------------------------------------------------------------------------          
-- combo meta procedimento ambulatorial --          
if @opcao = 128          
  begin          
 select  MP.mtproc_descricao,          
                MP.mtproc_codigo,mpa.locatend_codigo          
        from  meta_procedimento MP,          
  meta_procedimento_ambulatorial MPA          
 WHERE mp.mtproc_codigo = mpa.mtproc_codigo          
 AND   mpa.locatend_codigo = ISNULL(@codigo,mpa.locatend_codigo)          
 order by MP.mtproc_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- combo Clinica de Leito com SetCodigo --          
if @opcao = 129          
  begin          
          
 select  locatend_descricao, set_codigo + locatend_codigo Codigo          
 from  vwclinica_Leito          
 where  unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 order by locatend_descricao           
  end          
-------------------------------------------------------------------------------------------------          
-- combo Profissao --          
if @opcao = 130          
  begin          
 select  pro_desc, pro_codigo          
 from  profissao          
 order by pro_desc          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo Estado Civil --          
if @opcao = 131          
  begin          
 select  Eciv_desc, Eciv_codigo          
 from  Estado_civil          
 order by Eciv_desc          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo Tipo de Doador --          
if @opcao = 132          
  begin          
 select  TDoa_desc, TDoa_codigo          
 from  Banco_Sangue_Tipo_doacao          
 order by TDoa_desc          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo Tipo de AntiCoagulante --          
if @opcao = 133          
  begin          
 select  TAnti_desc, TAnti_codigo          
 from  Banco_Sangue_Anticoagulante          
 order by TAnti_desc          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo Tipo de intercorrências          
if @opcao = 134          
  begin          
 select  Intercor_desc, Intercor_codigo          
 from  Banco_Sangue_Intercorrencia          
 order by Intercor_desc          
  end          
-- combo Clinica de Intenacao com SetCodigo --          
if @opcao = 135          
  begin          
          
 select  locatend_descricao, set_codigo + locatend_codigo Codigo          
 from  vwclinica_internacao          
 where  unid_codigo = ISNULL(@unid_codigo, unid_codigo)          
 order by locatend_descricao           
   end          
----------------------- Enche Combo de Forma de Chegada de Ambulancia -----------------------------          
if @opcao = 136          
  begin          
 select  foramb_descricao, foramb_codigo          
  from  forma_chegada_ambulancias          
  order by foramb_descricao          
   end          
          
----------------------- Enche Combo de Tipo de Bolsa  -----------------------------          
if @opcao = 137          
  begin          
 select  TBolsa_desc, TBolsa_codigo          
  from  Banco_Sangue_Tipo_bolsa          
  order by TBolsa_desc          
   end          
          
----------------------- Enche Combo de Tipo Movimento Bolsa -----------------------------          
if @opcao = 138          
  begin          
 select  MBolsa_desc, MBolsa_codigo          
  from  Banco_Sangue_Movimento_bolsa          
  order by MBolsa_desc          
   end          
          
          
-- combo atividade profissional --          
if @opcao = 139           
  BEGIN          
 SELECT AP.atvprof_descricao,           
               AP.atvprof_codigo           
          FROM atividade_profissional AP,            
               procedimento_profissional PP          
  WHERE AP.atvprof_codigo = PP.atvprof_codigo          
    AND PP.PROCAMB_CODIGO = @CODIGO          
  ORDER BY AP.atvprof_descricao          
  END          
          
-- combo Tipo de Unidade (pezinho) --          
if @opcao = 140          
  begin          
 select petipuni_desc, petipuni_codigo from pezinho_tipouni           
 order by petipuni_desc          
  end          
          
-- combo Unidade Pezinho --          
if @opcao = 141          
  begin          
        select peuni_desuni, peuni_coduni from pezinho_unidade          
          order by  peuni_desuni          
------------ order by peuni_coduni          
  end          
          
-- combo Motivo Devolucao Pezinho --          
if @opcao = 142          
  begin          
 select pedevol_desc, pedevol_codigo from pezinho_devolucao          
 where pedevol_ativo = 'S'          
 order by pedevol_desc          
  end          
          
          
-- combo Caso Especial Pezinho --          
if @opcao = 143          
  begin          
 select ce_descricao, ce_codigo from pezinho_caso_especial          
 order by ce_descricao          
  end          
          
-- combo  Exame  Pezinho --          
if @opcao = 144          
  begin          
 select peexa_descricao, peexa_codigo from pezinho_exame          
 order by peexa_descricao          
  end          
          
-- combo Unidade para Baixa de Impressão (pezinho)--          
if @opcao = 145          
  begin          
 select distinct (pezinho_unidade.peuni_desuni),          
   pezinho_unidade.peuni_coduni          
          
 from   pezinho_unidade, pezinho_amostra PA          
          
 where   pezinho_unidade.peuni_coduni = PA.peuni_coduni and          
         PA.peamo_datimpres is null and          
   PA.pedevol_codigo is null and          
   PA.peamo_datfecres is not null          
 and   PA.peamo_flag_impressao = 'S'          
          
  -------------------------------------------------------------------------------------          
  -- Rogério - 20/09/2005: As condições abaixo visam evitar que sejam consideradas          
  -- amostras que tenham apenas um exame normal.          
  -------------------------------------------------------------------------------------          
 /* 19/04/2007          
          
  and PA.PEAMO_CODIGO = (          
          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '01' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
  and PA.PEAMO_CODIGO = (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '02' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
          
  and PA.PEAMO_CODIGO = (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '03' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
          
  and  ( Exists ( select distinct pl5.peamo_codigo           
               from pezinho_laudo_exame pl5 inner join pezinho_exame pe2           
                       on pl5.peexa_codigo = pe2.peexa_codigo           
                where  pl5.peexa_codigo = '04'           
                and    pl5.peamo_codigo = pa.peamo_codigo           
                and    pl5.pelaudo_suspeito = 'N'          
                and    convert(decimal(7,3),(case when CHARINDEX(',',pl5.pelaudo_resultado) = 0 then pl5.pelaudo_resultado else SUBSTRING(pl5.pelaudo_resultado,1,(CHARINDEX(',',pl5.pelaudo_resultado) - 1)) + '.' + SUBSTRING(pl5.pelaudo_resultado,(CHARIND
  
     
     
E        
X(',',pl5.pelaudo_resultado) + 1), (len(pl5.pelaudo_resultado)- CHARINDEX(',',pl5.pelaudo_resultado))) end)) <=  convert(decimal(7,3),PE2.PEEXA_LIMITE)           
                        )           
  or            
                datediff(d,PA.peamo_datnas,PA.peamo_datcol) > 7           
                 )           
       */          
  -------------------------------------------------------------------------------------          
           
 order by  pezinho_unidade.peuni_desuni          
  end          
          
-- combo  Datas de Baixas de Impressão efetuadas (pezinho)--          
if @opcao = 146          
  begin          
 SELECT  distinct(convert(char(10),pezinho_amostra.peamo_datimpRes,103)) AS PEAMO_DATIMPRES, 0          
 FROM  pezinho_amostra, pezinho_unidade          
 WHERE peamo_datpost_sedex is null and          
  pedevol_codigo is null and          
  pezinho_amostra.peuni_coduni = pezinho_unidade.peuni_coduni          
  end          
          
          
-- combo  Unidades que sofreram Baixas de Impressão em datas especificadas (pezinho)--          
if @opcao = 147          
  begin          
 SELECT  distinct(pezinho_unidade.peuni_desuni), pezinho_amostra.peuni_codUni          
 FROM  pezinho_amostra, pezinho_unidade          
 WHERE peamo_datimpRes is not null and pezinho_amostra.peuni_coduni = pezinho_unidade.peuni_coduni and          
  peamo_datimpRes >= @Data and peamo_datimpRes <= @DataFinal          
  end          
          
          
-- combo  Unidades que contém amostras liberadas para impressão de laudos (pezinho)--          
if @opcao = 148          
 begin          
 SELECT  PU.PEUNI_DESUNI + '  ( ' + CONVERT (VARCHAR , COUNT (PU.PEUNI_DESUNI)) + ' )' AS PEUNI_DESUNI,          
  PA.PEUNI_CODUNI          
 FROM  Pezinho_Amostra PA, Pezinho_Unidade PU          
           
 WHERE PA.PEUNI_CODUNI = PU.PEUNI_CODUNI AND          
  PA.PEAMO_DATFECRES is not null AND          
  PA.PEAMO_DATIMPRES is null          
  AND PA.PEDEVOL_CODIGO is null  -- a amostra não foi devolvida...          
  -------------------------------------------------------------------------------------          
  -- Rogério - 05/07/2005: As condições abaixo visam evitar que sejam consideradas          
  -- amostras que tenham apenas um exame normal.          
  -------------------------------------------------------------------------------------          
  /*  19/04/2007          
  and PA.PEAMO_CODIGO = (          
          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '01' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
  and PA.PEAMO_CODIGO = (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '02' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
          
  and PA.PEAMO_CODIGO = (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '03' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
          
  and  ( Exists ( select distinct pl5.peamo_codigo           
               from pezinho_laudo_exame pl5 inner join pezinho_exame pe2           
                       on pl5.peexa_codigo = pe2.peexa_codigo           
                where  pl5.peexa_codigo = '04'           
                and    pl5.peamo_codigo = pa.peamo_codigo           
                and    pl5.pelaudo_suspeito = 'N'          
                and    convert(decimal(7,3),(case when CHARINDEX(',',pl5.pelaudo_resultado) = 0 then pl5.pelaudo_resultado else SUBSTRING(pl5.pelaudo_resultado,1,(CHARINDEX(',',pl5.pelaudo_resultado) - 1)) + '.' + SUBSTRING(pl5.pelaudo_resultado,(CHARINDE
  
    
      
        
X(',',pl5.pelaudo_resultado) + 1), (len(pl5.pelaudo_resultado)- CHARINDEX(',',pl5.pelaudo_resultado))) end)) <=  convert(decimal(7,3),PE2.PEEXA_LIMITE)           
                        )           
   or            
                datediff(d,PA.peamo_datnas,PA.peamo_datcol) > 7           
                 )           
  */          
          
 GROUP BY PU.PEUNI_DESUNI,          
  PA.PEUNI_CODUNI          
          
 ORDER BY PU.PEUNI_DESUNI          
          
  end          
          
-- combo  Exames que contém ensaios liberados para impressão (pezinho)--          
if @opcao = 149          
  begin          
 SELECT DISTINCT(PE.PEEXA_DESCRICAO), PE.PEEXA_CODIGO          
           
 FROM  PEZINHO_EXAME PE,          
  PEZINHO_PLACA PP          
           
 WHERE   PE.PEEXA_CODIGO = PP.PEEXA_CODIGO AND          
  PP.PEPLACA_DATIMP IS NULL           
           
 ORDER BY PE.PEEXA_DESCRICAO          
  end          
          
          
-- combo  Baixas de Impressão com amostras liberadas para postagem (pezinho)--          
if @opcao = 150          
  begin          
          
 SELECT distinct(convert(char(10),PA.PEAMO_DATIMPRES,103)+' - Cod.: '+Convert(char(4),PU.PEUNI_CODUNI,103))+' - '+Convert(char(50),PU.PEUNI_DESUNI,103) as Baixa,0, PU.PEUNI_DESUNI          
           
 FROM PEZINHO_AMOSTRA PA,          
  PEZINHO_UNIDADE PU          
           
 WHERE PA.PEUNI_CODUNI = PU.PEUNI_CODUNI           
 AND     PA.PEAMO_DATFECRES IS NOT NULL          
 AND PA.PEAMO_DATIMPRES IS NOT NULL           
 AND  PA.PEAMO_DATPOST_SEDEX IS NULL          
  AND  PA.PEAMO_COD_SEDEX is Null          
          
 /*          
  and exists (          
          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '01' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
  and exists (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '02' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
  and exists (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '03' and l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  )          
          
  and  ( exists (          
  select distinct l.peamo_codigo from pezinho_laudo_exame l           
                              inner join pezinho_placa p on l.peplaca_codigo = p.peplaca_codigo          
  where  p.peexa_codigo = '04'           
  and    l.pelaudo_suspeito = 'N'          
  and    l.peamo_codigo = PA.PEAMO_CODIGO           
  ) or ( datediff(d, PA.peamo_datnas, PA.peamo_datcol) > 7))          
          
  -------------------------------------------------------------------------------------          
 */           
          
 ORDER BY PU.PEUNI_DESUNI          
          
  end          
          
          
-- combo  Traz datas de envio de amostras ao Hemorio (pezinho)--          
if @opcao = 151          
  begin          
 SELECT DISTINCT(CONVERT(VARCHAR,PEAMO_DATENVIO_HEMORIO,103))as DATA ,0,PEAMO_DATENVIO_HEMORIO FROM PEZINHO_AMOSTRA WHERE PEAMO_DATENVIO_HEMORIO IS NOT NULL order by PEAMO_DATENVIO_HEMORIO          
          
  end          
          
-- combo  Traz SMS (pezinho)--          
if @opcao = 152          
  begin          
 SELECT  M.mun_descricao,          
  PS.pesms_codigo          
           
 FROM Pezinho_SMS PS,          
  Municipio M,          
  Cep C,          
  Bairro B           
           
 WHERE PS.cep_sequencial = C.cep_sequencial and          
  M.mun_codigo = B.mun_codigo and          
  C.bai_codigo = B.bai_codigo and          
  C.mun_codigo = M.mun_codigo          
  end          
          
-- CENTRAL: combo unidade hospitalar --          
declare @sql varchar(1000)          
if @opcao = 153          
  begin          
 select @unid_central = unid_codigo_central from parametro_sistema          
          
 set @sql = 'select unid_descricao unidade ,unid_codigo from unidade'          
 if @unid_codigo = @unid_central           
  set @sql = @sql + ' where unid_codigo <> ''' + @unid_codigo + ''''          
 else          
  set @sql = @sql + ' where unid_codigo = ''' + @unid_codigo + ''''          
          
 set @sql = @sql + ' order by unid_descricao'          
 exec (@sql)          
  end          
          
-- CENTRAL: combo setores para agenda --          
if @opcao = 154 or @opcao = -154          
  begin          
 declare @sql154 varchar(1000)          
          
 IF @OPCAO < 0          
 BEGIN          
  set @sql154 = 'select DISTINCT vw.set_descricao , s.setcli_codigo_local, vw.locatend_codigo  from vwlocal_atendimento vw '          
  set @sql154 = @sql154 + 'inner join setor_clinica s on s.setcli_codigo = vw.set_codigo '          
          
  IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)          
   set @sql154 = @sql154 + 'inner join agenda_permissao a on (a.locatend_codigo = vw.locatend_codigo and a.usu_codigo = ' + '''' + @usu_codigo + ''')'          
          
  set @sql154 = @sql154 + 'where 1 = 1 '          
          
          
  if @codigo is not null          
   set @sql154 = @sql154 + 'And vw.unid_codigo = ''' + @codigo + ''''          
  if @codigo_aux is not null          
   set @sql154 = @sql154 + 'And s.procamb_codigo_chk = ''' + @codigo_aux + ''''          
          
  set @sql154 = @sql154 + ' order by vw.set_descricao'          
 END          
 ELSE          
 BEGIN          
  set @sql154 = 'select DISTINCT vw.set_descricao , s.setcli_codigo_local, vw.locatend_codigo  from vwlocal_atendimento vw '          
  set @sql154 = @sql154 + 'inner join setor_clinica s on s.setcli_codigo = vw.set_codigo '          
  set @sql154 = @sql154 + 'where 1 = 1 '          
          
           
  if @codigo is not null          
   set @sql154 = @sql154 + 'And vw.unid_codigo = ''' + @codigo + ''''          
  if @codigo_aux is not null          
   set @sql154 = @sql154 + 'And s.procamb_codigo_chk = ''' +  @codigo_aux + ''''          
          
  set @sql154 = @sql154 + ' order by vw.set_descricao'          
 END          
          
 exec(@sql154)          
          
          
          
  end          
          
-- CENTRAL: combo Unidades para agenda --          
if @opcao = 155          
  begin          
 set @sql = 'select DISTINCT u.unid_sigla + ''-'' + vw.unid_descricao unidade, vw.unid_codigo from vwlocal_atendimento vw, unidade u '          
 set @sql = @sql +  ' where vw.unid_codigo = u.unid_codigo '          
 if @codigo = '0001'           
  set @sql = @sql +  ' And vw.unid_codigo <> ''' + @unid_codigo + ''''          
 else          
  set @sql = @sql +  ' And vw.unid_codigo = ''' + @unid_codigo + ''''          
 if @codigo_aux is not null          
  set @sql = @sql +  ' And vw.set_codigo = ''' + @codigo_aux + ''''          
          
 set @sql = @sql + ' ORDER BY UNIDADE'          
          
 exec (@sql)          
          
  end          
-- CENTRAL: Local Atendimento pela Unidade e Setor--          
if @opcao = 156           
  begin          
 set @sql = 'select l.locatend_descricao, l.locatend_codigo, S.ProcAmb_Codigo_Chk, S.ProcAmb_Codigo_Chk_Sub, '          
 set @sql = @sql +  ' S.ProcAmb_Codigo_Chk_Extra, S.ProcAmb_Codigo_Chk_Triagem, S.ProcAmb_Codigo_Chk_Fichar, S.ProcAmb_Codigo_Chk_Retorno '          
 set @sql = @sql +  ' from vwlocal_atendimento l '          
 set @sql = @sql +  ' INNER JOIN SETOR_Clinica S ON S.SETCLI_CODIGO = L.SET_CODIGO '          
          
 if @codigo is not null and @CODIGO_aux is not null          
       begin          
  set @sql = @sql +  ' where l.unid_codigo = ''' + @codigo + ''''          
  set @sql = @sql +  ' and s.setcli_codigo_local = ''' + @CODIGO_aux + ''''          
    end          
 else          
  if @codigo = '0001'           
   set @sql = @sql +  ' where l.unid_codigo <> ''' + @codigo + ''''          
  else          
   set @sql = @sql +  ' where l.unid_codigo = ''' + @codigo + ''''          
           
 set @sql = @sql + ' order by l.locatend_descricao'           
          
 exec (@sql)          
          
  end          
          
-- Combo Usuário da Unidade--          
if @opcao = 157          
  begin          
 select u.usu_nome, u.usu_codigo           
 from USUARIO_LOCAL_ATENDIMENTO lot, usuario u, vwlocal_unidade vw          
 where lot.locatend_codigo = vw.locatend_codigo          
 and lot.usu_codigo = u.usu_codigo          
 and vw.unid_codigo = @unid_codigo          
 order by usu_nome           
  end          
          
if @opcao = 158          
begin          
 select  exadia_descricao,exadia_codigo  from Exame_Diagnose order by exadia_descricao          
end          
          
-- Combo Exame de Laboratorio da Agenda --          
if @opcao = 159          
begin          
          
 select ex.exalab_descricao, ex.exalab_codigo          
 from vwSolicitacao_Pedido P          
  inner join Solicitacao_Pedido_exame PE on PE.ped_codigo = p.ped_codigo           
  inner join exame_laboratorio ex on (pe.solpedexa_Codigo_Exame=ex.exalab_codigo)          
 where p.solped_codigo = @codigo          
 and p.solped_TipoSolicitacao = 7          
          
end          
          
-- Combo Exame de Radiologia da Agenda --          
if @opcao = 160          
begin          
 select ex.exarad_descricao, ex.exarad_codigo          
 from vwSolicitacao_Pedido P          
  inner join Solicitacao_Pedido_exame PE on PE.ped_codigo = p.ped_codigo           
  inner join exame_radiologico ex on (pe.solpedexa_Codigo_Exame = ex.exarad_codigo)          
 where p.solped_codigo = @codigo          
 and p.solped_TipoSolicitacao = 8          
end          
          
          
-- Combo Exame de Diagnose da Agenda --          
if @opcao = 161          
begin          
 select ex.exadia_descricao, ex.exadia_codigo          
 from vwSolicitacao_Pedido P          
  inner join Solicitacao_Pedido_exame PE on PE.ped_codigo = p.ped_codigo           
  inner join exame_Diagnose ex on (pe.solpedexa_Codigo_Exame=ex.exadia_codigo)          
 where p.solped_codigo = @codigo          
 and p.solped_TipoSolicitacao = 9          
          
end          
          
          
-- Combo Usuário da Unidade--          
if @opcao = 162          
  begin          
      SELECT   LOCATEND_DESCRICAO, LOCATEND_CODIGO           
      FROM     VWCLINICASOLICITACIRURGIA          
      WHERE UNID_CODIGO = @UNID_CODIGO          
      ORDER BY LOCATEND_DESCRICAO           
  end          
          
-- Feito Por Leonardo Lima          
-- Combo Motivo do cadastro Modulo registro          
if @opcao = 163          
  begin          
 create table #TempMotCad(Mot_Codigo  char(2),           
    Mot_Descricao   varchar(100))           
           
 insert into #TempMotCad (Mot_Codigo, Mot_Descricao)           
  select '01', 'Cadastramento de Usuário de Terapias Renais Substitutivas'          
          
 insert into #TempMotCad (Mot_Codigo, Mot_Descricao)           
  select '02', 'Cadastramento de Gestante'          
          
 insert into #TempMotCad (Mot_Codigo, Mot_Descricao)           
  select '03', 'Cadastramento de Recém-Nato'          
          
 insert into #TempMotCad (Mot_Codigo, Mot_Descricao)           
  select '99', 'Outros'          
          
          
 select Mot_Descricao,Mot_Codigo          
 from #TempMotCad          
 order by Mot_Codigo          
          
 drop table #TempMotCad          
  end          
          
-- Feito Por Sergio Salles          
-- Combo Motivo do cadastro Modulo Cirugia          
if @opcao = 164          
  begin          
 select la.set_descricao + ' - ' + med.prof_nome mednome, '9'+med.prof_codigo+la.locatend_codigo locatendcodigo           
 from equipe_cirurgica ec, profissional med, vwlocal_atendimento la           
 where med.locatend_codigo = la.locatend_codigo            
   and ec.prof_codigo = med.prof_codigo          
   and ec.locatend_codigo = med.locatend_codigo          
   and ec.cir_codigo = @codigo          
 order by la.set_descricao + ' - ' + med.prof_nome          
  end          
          
-- Feito Por Sergio Salles          
-- Combo Profissional Referência do Laboratório          
if @opcao = 165          
  begin          
 select profref_nome, profref_codigo          
 from profissional_referencia          
 where unidref_codigo = @codigo          
   and unid_codigo = @unid_codigo          
 order by profref_nome          
  end          
          
-- Combo Usuario Sistema --           
if @opcao = 166          
  begin          
 select distinct u.usu_nome, u.usu_codigo           
   from usuario_sistema usu           
  inner join usuario u on (u.usu_codigo=usu.usu_codigo)           
  where usu.sis_codigo = @codigo           
    and usu.usu_codigo = u.usu_codigo           
  order by u.usu_nome           
  end          
          
if @opcao = 167          
  begin          
 select TpRX_Descricao, TpRX_codigo          
 from TipoRX          
 order by TpRX_Descricao          
  end          
          
if @opcao = 168          
  begin          
 select modelo_descricao, relatorio_codigo          
 from modelo_laudo          
 order by modelo_descricao          
  end          
          
if @opcao = 169          
  begin          
 select estcivil_descricao, estcivil_codigo          
 from EstadoCivil          
 order by estcivil_descricao          
  end          
          
-- ------------------------------------------------------------------------------------------------------------          
-- 02/03/2006: Seleção do(s) município(s) a serem pesquisados.          
-- ------------------------------------------------------------------------------------------------------------          
If @opcao = 170 -- era código 166          
   BEGIN          
          
          
 select  distinct m.mun_descricao, m.mun_codigo          
 from pezinho_unidade pu inner join (cep  inner join municipio m on cep.mun_codigo = m.mun_codigo)          
    on pu.cep_sequencial = cep.cep_sequencial          
          
 where m.uf_codigo = 'RJ'          
 order by m.mun_descricao          
          
          
   END          
          
-------------------------------------------------------------------------------------------------          
-- Rogério - 02/03/2006: Seleciona as unidades do pezinho de acordo com o nível municipal.          
-------------------------------------------------------------------------------------------------          
if @opcao = 171 -- era código 167          
 begin          
/* consulta original          
  select peuni_desuni, peuni_coduni           
  from   pezinho_unidade          
  where  peuni_coduni = pesms_filtro          
  and    peuni_coduni <> peses_filtro          
*/          
  select u.peuni_desuni, u.peuni_coduni           
  from   pezinho_unidade u inner join cep on u.cep_sequencial = cep.cep_sequencial           
  where  cep.mun_codigo = @codigo          
 end          
          
-------------------------------------------------------------------------------------------------          
-- Rogério - 18/04/2006: Lista os motivos de desistência para busca ativa.          
-------------------------------------------------------------------------------------------------          
if @opcao = 172 -- era código 168          
 begin          
  select pemotdesi_des, pemotdesi_cod           
  from   pezinho_motivos_desistencias          
 end          
          
          
-------------------------------------------------------------------------------------------------          
-- Rogério - 01/06/2006: Obtem a relação de Cap's de determinado município.          
-------------------------------------------------------------------------------------------------          
if @opcao = 173          
 begin          
/*          
  select u.peuni_coduni, u.peuni_desuni, u.cep_sequencial, u.pesms_codigo           
  , cep.cep_cep          
  , m.mun_codigo, m.uf_codigo, m.mun_descricao           
  from pezinho_unidade u inner join (cep inner join (municipio m left join pezinho_caps c           
          on m.mun_codigo = c.mun_codigo)          
             
       on cep.mun_codigo = m.mun_codigo)          
            
     on u.cep_sequencial = cep.cep_sequencial             
          
*/          
  select c.pecap_descricao, c.pecap_codigo          
            
  from pezinho_caps c inner join municipio m on c.mun_codigo = m.mun_codigo          
            
  where m.uf_codigo = 'RJ' and m.mun_codigo = @codigo          
            
  order by c.pecap_descricao          
          
 end          
          
-------------------------------------------------------------------------------------------------          
-- Rogério - 30/06/2006: Lista os tipos de reclamação do call center.          
-------------------------------------------------------------------------------------------------          
if @opcao = 174           
 begin          
  select PETIPRECL_DESC, PETIPRECL_CODIGO          
  from   PEZINHO_TIPO_RECLAMACAO          
  order by PETIPRECL_CODIGO          
 end          
-------------------------------------------------------------------------------------------------          
-- OS 8545: Leito Livre  de Hospital Dia          
-------------------------------------------------------------------------------------------------          
if @opcao = 175          
  begin          
 SELECT  left(SC.setCLI_descricao,20) + SPACE(20 - LEN(RTRIM(left(SC.setCLI_descricao,20)))) + ' ' + enf.enf_codigo_local + '/' + T.lei_codigo LocInt_Descricao,          
         L.locatend_codigo          
          
 FROM    Local_Atendimento L,          
  Setor_CLINICA SC,          
  Leito T,          
  enfermaria enf          
 WHERE L.setCLI_codigo  = SC.setCLI_codigo            
 AND L.locatend_codigo = T.locatend_codigo          
 AND  T.Lei_Status   <> 'D' --Ignorar Desativados          
 And T.lei_tipo   = '4'          
 AND     L.enf_codigo    = enf.enf_codigo          
 and  L.unid_codigo  = @unid_codigo          
          
  end          
-- KLINIKOS.CENTRAL: GrupoProcedimento (162)          
if @opcao = 176          
  begin          
 select  T.Descricao, T.IdTipoEvento          
 from  TipoEvento T, UNIDADE_TipoEvento U          
 where u.IdTipoEvento = t.IdTipoEvento           
 and u.unid_codigo = @unid_codigo          
 ORDER BY t.Descricao          
          
          end          
-- KLINIKOS.CENTRAL: Exames_Central (163)          
if (@opcao = 177) or  (@opcao = -177)          
  begin          
 declare @sql177 varchar(2000)          
          
 if @codigo = '7'          
 begin          
  set @sql177 = 'Select DISTINCT case when e.exalab_tipo_agenda = ''E'' then ''[E]'' else '''' end + E.exalab_descricao Descricao, e.exalab_Codigo Codigo '          
  set @sql177 = @sql177 + 'From Procedimento_Ambulatorial PA '          
  set @sql177 = @sql177 + 'Inner join exame_laboratorio E '          
  set @sql177 = @sql177 + 'on PA.procamb_codigo = E.procamb_codigo '          
  if @codigo_aux is not null          
    set @sql177 = @sql177 + ' and E.SEC_CODIGO = ' + @codigo_aux          
  if @opcao < 0          
   set @sql177 = @sql177 + 'Where E.exalab_tipo_agenda <> ''N'' '          
          
 end          
 if @codigo = '8'          
 begin          
  set @sql177 = 'Select DISTINCT case when e.exarad_tipo_agenda = ''E'' then ''[E]'' else '''' end + E.exarad_descricao Descricao, e.exarad_Codigo Codigo '          
  set @sql177 = @sql177 + 'From Procedimento_Ambulatorial PA '          
  set @sql177 = @sql177 + 'Inner join exame_radiologico E '          
  set @sql177 = @sql177 + 'on PA.procamb_codigo = E.procamb_codigo and ISNULL(E.EXARAD_ATIVO,1) = 1'          
  if @opcao < 0 begin          
   set @sql177 = @sql177 + 'Where E.exarad_tipo_agenda <> ''N'' '          
   if @codigo_aux is not null          
    set @sql177 = @sql177 + ' and E.GRUEXA_CODIGO = ' + @codigo_aux          
   if @usu_codigo is not null begin          
    set @sql177 = @sql177 + ' and exists (select 1 from exame_radiologico_profissional erp '          
    set @sql177 = @sql177 + ' where erp.exarad_codigo = e.exarad_codigo and erp.prof_codigo = ' + @usu_codigo + ') '          
   end          
          
  end          
 end          
 if @codigo = '9'          
 begin          
  set @sql177 = 'Select DISTINCT case when e.exadia_tipo_agenda = ''E'' then ''[E]'' else '''' end + E.exadia_descricao Descricao, e.exadia_Codigo Codigo, e.exadia_cbo as cbo '          
  set @sql177 = @sql177 + 'From Procedimento_Ambulatorial PA '          
  set @sql177 = @sql177 + 'Inner join exame_diagnose E '          
  set @sql177 = @sql177 + 'on PA.procamb_codigo = E.procamb_codigo '          
  if @opcao < 0          
   set @sql177 = @sql177 + 'Where E.exadia_tipo_agenda <> ''N'' '          
          
 end          
 if @codigo = '521'          
 begin                                                                                             
  set @sql177 = 'Select DISTINCT S.setCli_descricao Descricao, PA.ProcAmb_Codigo +  LA.locatend_codigo Codigo '          
      set @sql177 = @sql177 + 'From Procedimento_Ambulatorial PA '          
  set @sql177 = @sql177 + 'Inner join Setor_clinica S '          
         set @sql177 = @sql177 + 'inner join local_atendimento la on (s.setcli_codigo = la.setcli_codigo AND LA.ENF_CODIGO IS NULL) '          
  IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)          
  BEGIN             
   set @sql177 = @sql177 + 'inner join agenda_permissao a on (a.locatend_codigo = la.locatend_codigo and a.usu_codigo = ' + '''' + @usu_codigo + ''') '          
  END          
          
  set @sql177 = @sql177 + 'on PA.procamb_codigo = S.ProcAmb_Codigo_Chk '          
     set @sql177 = @sql177 + 'WHERE LA.unid_codigo = ''' + @unid_codigo + ''''          
 end          
          
          
 set @sql177 = @sql177 + ' Order by 1'          
          
 exec (@sql177)          
  end          
          
-- KLINIKOS.CENTRAL: Clinica_Central_Procedimento (164)          
if @opcao = 178          
  begin          
 declare @sql178 varchar(1000)          
          
 set @sql178 = 'select DISTINCT vw.set_descricao , s.setcli_codigo_local from vwlocal_atendimento vw '          
 set @sql178 = @sql178 + 'inner join setor_clinica s on s.setcli_codigo = vw.set_codigo '          
 set @sql178 = @sql178 + 'inner join setor_clinica s2 on isnull(s2.procamb_codigo_chk,'''') = isnull(s.procamb_codigo_chk,'''') '          
 set @sql178 = @sql178 + 'where 1 = 1 '          
          
 if @codigo is not null          
  set @sql178 = @sql178 + 'And vw.unid_codigo = ''' + @codigo + ''''          
 if @codigo_aux is not null          
  set @sql178 = @sql178 + 'And s2.setcli_codigo_local = ' + @codigo_aux          
          
 set @sql178 = @sql178 + ' order by vw.set_descricao'          
          
 exec(@sql178)          
          
          
  end          
-- KLINIKOS.CENTRAL: Central_Grupo_Procedimento (169)          
if @opcao = 179          
  begin          
          
--  Select procamb_descricao, procamb_codigo          
--  from  vwprocamb_grupo           
--  order by procamb_descricao          
           
 select NO_GRUPO,CO_GRUPO from tb_grupo          
 order by NO_GRUPO          
          
  end          
          
-- KLINIKOS.CENTRAL: Clinca da Unidade de REfefencia          
if @opcao = 180          
  begin          
          
 select cliref_descricao, cliref_codigo          
 from clinica_referencia          
 where unidref_codigo = @codigo          
 order by cliref_descricao          
  end          
-- KLINIKOS.CENTRAL: Undiade + unidade de Referencia          
if @opcao = 181            
  begin           
 select unid_descricao DESCRICAO ,unid_codigo CODIGO , 1 ordem          
 from unidade          
 where unid_codigo = @unid_codigo          
          
 UNION ALL          
          
 select unidref_descricao DESCRICAO ,unidref_codigo CODIGO, 2 ordem          
 from unidade_referencia          
        where unid_codigo = isnull(@unid_codigo, unid_codigo)          
    and unidref_tipo = @codigo_aux          
 order by ordem, Descricao          
  end          
-- Ambulatorio Dinâmico: Dominio          
if @opcao = 182          
  begin           
          
 if @codigo is null           
   begin          
  Select Text, IdDominio          
  From Dominio          
  Where idDominioPai is null          
  Order by Text          
    end          
 else          
    begin          
  Select D.Text, D.IdDominio          
  From Dominio D inner join Pergunta P on P.IdDominio = D.idDominioPai          
  Where P.IdPergunta = @codigo          
  Order by D.Text          
    end          
            
  end          
          
-- Ambulatorio Dinâmico: Questionario          
if @opcao = 183          
  begin           
 Select Descricao, IdQuestionario          
 From Questionario          
 Where Ativo = 'S'          
 Order by Descricao          
            
  end          
-- Ambulatorio Dinâmico: Grupo de Perguntas          
if @opcao = 184          
  begin           
 Select Descricao, IdGrupoPergunta          
 From GrupoPergunta          
 Where IdQuestionarioVersao = (Select max(VQ.IdQuestionarioVersao)           
     from QuestionarioVersao VQ          
     where VQ.IdQuestionario = @codigo)          
 Order by IdGrupoPergunta          
            
  end          
-- Ambulatorio Dinâmico: Perguntas          
if @opcao = 185          
  begin           
 Select '<Nova Pergunta>' Descricao, 0 IdPergunta          
          
 union all          
          
 Select Descricao, IdPergunta          
 From Pergunta          
 Where IdPergunta not in ( Select  PGP.idPergunta           
     from  Pergunta_GrupoPergunta PGP inner join GrupoPergunta PG on PG.IdGrupoPergunta = PGP.IdGrupoPergunta          
     Where   PG.IdQuestionarioVersao =           
     (Select max(VQ.IdQuestionarioVersao)           
      from QuestionarioVersao VQ          
      where VQ.IdQuestionario = @codigo) )          
 Order by Descricao          
            
  end          
          
-- Ambulatorio Dinâmico: Pergunta Interface          
if @opcao = 186          
  begin           
          
 Select Descricao, IdPerguntaUI          
 From PerguntaUI          
 Order by idPerguntaUI          
            
  end          
          
-- Combo Kit de Laboratorio - Klinikos Multi - HGB          
if @opcao = 187          
  begin          
          
 SELECT kitlab_descricao, kitlab_codigo          
        FROM kit_laboratorio          
 where unid_codigo = isnull(@unid_codigo, unid_codigo)          
          
  end          
          
-- combo clinica de internação --          
if @opcao = 188          
  begin          
 select locatend_descricao,locatend_codigo from vwClinica_LeitoInternacao          
 -- CENSO ON          
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 -- FIM          
 order by locatend_descricao           
  end          
          
if @opcao = 189 --Motivo de Autorização (CENTRAL)          
  begin           
          
 Select motaut_descricao, motaut_codigo          
 From Motivo_Autorizacao          
 where motaut_Tipo = @codigo          
 Order by motaut_descricao          
           
  end          
          
          
if @opcao = 190 --Motivo de Bloqueio (CENTRAL)          
  begin           
          
 Select motblo_descricao, motblo_codigo          
 From MotivoBloqueio WHERE motblo_codigo > '0000'          
 Order by motblo_descricao          
           
  end          
          
if @opcao = 191 --Texto Padrão Laboratório          
  begin           
          
 Select TPAD_desc, TPAD_codigo          
 From Texto_Padrao          
 Where TPAD_Modulo = 'LABORATORIO'          
 Order by TPAD_desc          
           
  end          
          
if @opcao = 192 --Classificacao Laboartorio          
  begin           
          
 Select claexalab_descricao, claexalab_codigo          
 From Classificacao_Exame_Laboratorio          
 where exalab_codigo = isnull(@codigo_aux, exalab_codigo)          
 Order by claexalab_descricao          
           
  end          
          
if @opcao = 193 --Fornecedor          
  begin           
 select  DISTINCT F.For_RazaoSocial + space(100) + F.For_Cnpj,          
  0 CODIGO          
          
 from  Fornecedor F          
 inner join Fornecedor_TipoProcedimento FT on FT.for_codigo = F.for_codigo          
          
 WHERE  F.unid_codigo  = @unid_codigo          
 and  FT.tipproc_codigo = @codigo          
          
 Order by 1          
          
  end          
          
-- Combo Kit de Laboratorio - Klinikos Multi - HGB          
if @opcao = 194          
  begin          
          
 SELECT Recipientelab_descricao, Recipientelab_codigo          
        FROM Recipiente_laboratorio          
 where unid_codigo = isnull(@unid_codigo, unid_codigo)          
          
  end          
          
-- Combo Usuário de Agenda          
if @opcao = 195          
  begin          
          
 select u.usu_nome, u.usu_codigo          
 from usuario u          
 where exists (select 1          
        from usuario_permissao up          
        where up.usu_codigo = u.usu_codigo          
          and up.ace_codigo = '203')          
   or exists (select 1          
        from grupo_usuario gu, grupo_permissao gp          
        where gu.usu_codigo = u.usu_codigo          
          and gu.grp_codigo = gp.grp_codigo          
          and gp.ace_codigo = '203')     
 order by u.usu_nome    
  end          
--MotivoConsultaExame = 196          
if @opcao = 196          
  begin          
 select mc.MotConExa_Descricao, mc.MotConExa_Codigo          
 from Motivo_Consulta_Exame mc          
 order by mc.MotConExa_Codigo          
  end          
--PrioridadeConsultaExame = 197          
if @opcao = 197          
  begin          
 select pc.PriConExa_Descricao, pc.PriConExa_Codigo          
 from Prioridade_Consulta_Exame pc          
 where PriConExa_Tipo = @codigo          
 order by pc.PriConExa_Descricao          
  end          
          
-- combo profissional --          
if @opcao = 198            
  begin          
        if @CODIGO is null          
          
           select p.prof_nome, p.prof_codigo          
             from profissional_rede p          
            order by p.prof_nome            
          
        else           
          
  if @opcao < 0          
  begin          
   IF EXISTS (SELECT 1 FROM AGENDA_PERMISSAO WHERE USU_CODIGO = @USU_CODIGO)          
          
           select p.prof_nome, p.prof_codigo            
           from agenda_permissao a, profissional p          
           where p.locatend_codigo = @CODIGO          
             and (p.tipprof_codigo = @tipprof or @tipprof is Null)          
             and (p.prof_ativo = @prof_ativo or @prof_ativo is Null)          
      and (p.prof_movimenta_prontuario = 'S')          
      and (p.locatend_codigo = a.locatend_codigo and (p.prof_codigo = a.prof_codigo or a.prof_codigo is null))          
      and a.usu_codigo = @usu_codigo          
           order by p.prof_nome            
  end          
  else          
          select p.prof_nome, p.prof_codigo            
               from profissional p          
              where p.locatend_codigo = @CODIGO          
         and (p.tipprof_codigo = @tipprof or @tipprof is Null)          
                  and (p.prof_ativo = @prof_ativo or @prof_ativo is Null)          
     and (p.prof_movimenta_prontuario = 'S')          
              order by p.prof_nome            
          
  end          
          
          
-------------------------------------------------------------------------------------------------          
-- combo materiais que não estejam em determinado kit cirurgico         
if @opcao = 199          
  begin          
          
 IF EXISTS (SELECT 1 FROM KIT_CIRURGICO WHERE kit_origem_material = 'K' and  kit_sequencial  = @codigo_aux)          
 -- A origem dos materiais é a tabela de 'material' do klinikos          
          
  select m.mat_descricao, m.mat_codigo from material m          
         where  not exists (select k.mat_codigo from Kit_Cirurgico_Materiais k           
       where  k.mat_codigo  = m.mat_codigo           
       and    k.unid_codigo = @unid_codigo          
         and    k.kit_sequencial  = @codigo_aux)          
  order by m.mat_descricao          
           
 ELSE -- A origem dos materiais está no sistema de estoque           
          
  declare @banco  varchar(100)          
          
      SELECT @banco= parcirurg_banco FROM Parametro_Cirurgico WHERE unid_codigo = @unid_codigo          
            
  set @sql =        ' select  i.DESINS as mat_descricao, i.CODINS as mat_codigo '          
  set @sql = @sql + ' from ' + @banco + '.dbo.insumo i  inner join ' + @banco + '.dbo.estoque e  '           
  set @sql = @sql + '             on (i.CODINS = e.CODINS) '               
  set @sql = @sql + '           inner join parametro_cirurgico p '          
  set @sql = @sql + '            on (e.CODDEP = p.PARCIRURG_CODDEP and e.CODUNISAU = p.PARCIRURG_CODUNISAU) '          
  set @sql = @sql + ' where  i.INSBLO = ''0'''          
  set @sql = @sql + ' AND    not exists (select k.mat_codigo from Kit_Cirurgico_Materiais k '          
  set @sql = @sql + '           where  k.codins  = e.codins '          
  set @sql = @sql + '          and    k.unid_codigo = ''' + @unid_codigo + ''''          
  set @sql = @sql + '          and    k.kit_sequencial  = ''' + @codigo_aux + ''')'          
  set @sql = @sql + ' ORDER BY i.CODINS '          
          
  exec(@sql)          
          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo materiais que estejam em determinado kit cirurgico          
if @opcao = 200          
  begin          
/*          
 select (m.mat_descricao + ' - ( ' + cast(k.kit_qtd_material as varchar(20)) + ' )') as mat_descricao, m.mat_codigo           
 from material m  inner join Kit_Cirurgico_Materiais k on m.mat_codigo = k.mat_codigo          
 where    k.unid_codigo     = @unid_codigo          
 and      k.kit_sequencial  = @codigo_aux          
 order by m.mat_descricao          
*/          
          
 --IF EXISTS (SELECT 1 FROM PARAMETRO_CIRURGICO WHERE parcirurg_origem_material = 'K')          
 IF EXISTS (SELECT 1 FROM KIT_CIRURGICO WHERE kit_origem_material = 'K' and  kit_sequencial  = @codigo_aux)          
 -- A origem dos materiais é a tabela de 'material' do klinikos          
          
  select (m.mat_descricao + ' - ( ' + cast(k.kit_qtd_material as varchar(20)) + ' )') as mat_descricao, m.mat_codigo           
  from material m  inner join Kit_Cirurgico_Materiais k on m.mat_codigo = k.mat_codigo          
  where    k.unid_codigo     = @unid_codigo          
  and      k.kit_sequencial  = @codigo_aux          
  order by m.mat_descricao          
          
 ELSE -- A origem dos materiais está no sistema de estoque           
          
  declare @nome_stok as varchar(50)          
          
  SELECT @nome_stok = parcirurg_banco          
  FROM PARAMETRO_CIRURGICO          
  WHERE UNID_CODIGO = @UNID_CODIGO          
          
  set @sql =        'select (i.DESINS  + ' + '''' + ' - ( ' + '''' + ' + cast(k.kit_qtd_material as varchar(20)) + ' + '''' + ' )' + '''' + ') as mat_descricao, i.CODINS as mat_codigo '          
  set @sql = @sql + '  from ' + @nome_stok + '.dbo.insumo i  inner join ' + @nome_stok + '.dbo.estoque e '          
  set @sql = @sql + '       on i.CODINS = e.CODINS '          
  set @sql = @sql + '       inner join parametro_cirurgico p'          
  set @sql = @sql + '        on (e.CODDEP = p.PARCIRURG_CODDEP and e.CODUNISAU = p.PARCIRURG_CODUNISAU)'          
  set @sql = @sql + '       inner join Kit_Cirurgico_Materiais k'          
  set @sql = @sql + '       on i.codins = k.codins'          
  set @sql = @sql + '  where  i.INSBLO = ' + '''' + '0' + ''''          
  set @sql = @sql + '  and    k.unid_codigo = ' + '''' + @unid_codigo + ''''          
  set @sql = @sql + '  and   k.kit_sequencial  = ' + '''' + @codigo_aux + ''''          
          
  set @sql = @sql + '  ORDER BY i.CODINS'          
          
  exec(@sql)          
          
  end          
-------------------------------------------------------------------------------------------------          
-- combo kit cirúrgico (de uma determinada unidade)...          
if @opcao = 201          
  begin          
 select k.kit_descricao, k.kit_sequencial           
 from   kit_cirurgico k inner join parametro_cirurgico p            
          on k.kit_origem_material =  p.parcirurg_origem_material          
 where  k.unid_codigo = @unid_codigo          
 order by k.kit_descricao          
          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo Clinica  e Local de Internação --          
if @opcao = 202           
  begin          
 select distinct locatend_descricao,locatend_codigo from vwClinica_Leito          
 where unid_codigo = isnull(@unid_codigo, unid_codigo)          
          
    union          
          
 select distinct locatend_descricao,locatend_codigo from vwclinica_Internacao          
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 order by locatend_descricao           
  end          
          
--------------------------------------------------------------------------------------------------          
--Forma de Chegada = 203          
if @opcao = 203          
  begin          
          
 select foramb_descricao, foramb_codigo          
 from forma_chegada_ambulancias          
 order by foramb_descricao          
          
  end          
          
--------------------------------------------------------------------------------------------------          
--profissional para equipe cirurgica cadastrado pela clínica solicitante          
if @opcao = 204          
begin          
 CREATE TABLE #tempProfCadastrado(profcod char(8),profnome varchar(50))          
          
 INSERT INTO #tempProfCadastrado (profcod,profnome)          
 SELECT P.LOCATEND_CODIGO + P.PROF_CODIGO PROFCOD,           
               P.PROF_NOME           
   FROM PROFISSIONAL P, SETOR L           
  WHERE P.LOCATEND_CODIGO = @codigo           
    AND P.LOCATEND_CODIGO = L.SET_CODIGO           
--     AND P.TIPPROF_CODIGO = '0001'           
    AND P.PROF_CIRURGIA = 'S'          
    AND P.FUNCIR_CODIGO = @codigo_aux           
       AND PROF_ATIVO = 'S'          
                           
  GROUP BY P.PROF_NOME,           
                  P.LOCATEND_CODIGO + P.PROF_CODIGO           
 UNION            
 SELECT L.SET_CODIGO + P.PROF_CODIGO PROFCOD,           
               P.PROF_NOME           
   FROM PROFISSIONAL P, SETOR L           
  WHERE P.LOCATEND_CODIGO = @codigo           
    AND P.LOCATEND_CODIGO = L.SET_CODIGO           
--     AND P.TIPPROF_CODIGO = '0002'          
    AND P.PROF_CIRURGIA = 'S'           
    AND P.FUNCIR_CODIGO = @codigo_aux          
       AND PROF_ATIVO = 'S'          
  GROUP BY P.PROF_NOME,           
                  L.SET_CODIGO + P.PROF_CODIGO          
           
 SELECT profnome,profcod           
          FROM #tempProfCadastrado          
   ORDER BY profnome          
           
 DROP TABLE #tempProfCadastrado          
end          
          
          
--Profissional de uma clínica          
if @opcao = 205          
  begin          
          
 select vwlocal_atendimento.locatend_descricao, vwlocal_atendimento.locatend_codigo          
 from vwlocal_atendimento, profissional          
 where vwlocal_atendimento.unid_codigo = isnull(@unid_codigo, vwlocal_atendimento.unid_codigo)          
   and vwlocal_atendimento.locatend_codigo = profissional.locatend_codigo          
   and profissional.prof_codigo = @codigo          
 order by locatend_descricao          
          
  end          
          
--Enche Combo de Tipo de Ocorrência--------------------------------------------------------------          
if @opcao = 206          
  begin          
    select tipocor_descricao, tipocor_codigo          
 from Tipo_Ocorrencia    
where bloqueado = 'N'        
 order by tipocor_descricao            
   end          
          
          
--Enche Combo CNES Regiao Saude--------------------------------------------------------------          
if @opcao = 230          
  begin          
    select RegSau_descricao, RegSau_codigo          
 from CNES_Regiao_Saude          
 order by RegSau_descricao            
   end          
          
          
--Enche Combo CNES Micro Regiao Saude--------------------------------------------------------------          
if @opcao = 231          
  begin          
    select MicReg_descricao, MicReg_codigo          
 from CNES_Micro_Regiao          
 order by MicReg_descricao            
   end          
          
--Enche Combo CNES Mod Assistencial--------------------------------------------------------------          
if @opcao = 232          
  begin          
    select ModAss_descricao, ModAss_codigo          
 from CNES_Modulo_Assistencial          
 order by ModAss_descricao            
   end          
          
--Enche Combo CNES Esfera Administrativa--------------------------------------------------------------          
if @opcao = 233          
  begin          
    select EsfAdm_descricao, EsfAdm_codigo          
 from CNES_Esfera_Adm          
 order by EsfAdm_descricao            
   end          
          
--Enche Combo CNES Atividade Ensino--------------------------------------------------------------          
if @opcao = 234          
  begin          
    select AtiEns_descricao, AtiEns_codigo          
 from CNES_Ativ_Ensino          
 order by AtiEns_descricao            
   end          
          
--Enche Combo CNES Natureza Organizacao--------------------------------------------------------------          
if @opcao = 235          
  begin          
    select NatOrg_descricao, NatOrg_codigo          
 from CNES_Natureza_Organizacao          
 order by NatOrg_descricao            
   end          
          
--Enche Combo CNES Tipo Atencao (Nivel Atencao)--------------------------------------------------------------          
if @opcao = 236          
  begin          
    select TipAte_descricao, TipAte_codigo          
 from CNES_Tipo_Atencao          
 order by TipAte_descricao            
   end          
          
--Enche Combo CNES Tipo Atencao Atividade--------------------------------------------------------------          
if @opcao = 237          
  begin          
    select TipAteAti_descricao, TipAteAti_codigo          
 from CNES_Tipo_Atencao_Atividade          
 order by TipAteAti_descricao            
   end          
          
--Enche Combo CNES Retencao Tributaria--------------------------------------------------------------          
if @opcao = 238          
  begin          
    select RetTri_descricao, RetTri_codigo          
 from CNES_Retencao_Tributaria          
 order by RetTri_descricao            
   end          
          
--Enche Combo CNES Fluxo Clientela--------------------------------------------------------------          
if @opcao = 239          
  begin          
    select FluCli_descricao, FluCli_codigo          
 from CNES_Fluxo_Clientela          
 order by FluCli_descricao            
   end          
          
--Enche Combo CNES Tipo Atendimento Prestado--------------------------------------------------------------          
if @opcao = 240          
  begin          
    select TipAtnPre_descricao, TipAtnPre_codigo          
 from CNES_Tipo_Atend_Prestado          
 order by TipAtnPre_descricao            
   end          
          
--Enche Combo CNES Tipo Servico Referenciado--------------------------------------------------------------          
if @opcao = 241          
  begin          
    select SerRef_descricao, SerRef_codigo          
 from CNES_Servico_Referenciado          
 where TipSerRef_codigo=2          
 order by SerRef_descricao               
  end          
          
--Enche Combo CNES Cargo Formalizacao--------------------------------------------------------------          
if @opcao = 242          
  begin          
    select CarFor_descricao, CarFor_codigo          
 from CNES_Cargo_Formalizacao          
 where TipSerRef_codigo=2          
 order by CarFor_descricao               
  end          
          
--Enche Combo CNES COMISSÃO--------------------------------------------------------------          
if @opcao = 243          
  begin          
 SELECT Com_descricao,Com_codigo          
 FROM CNES_Comissao            
 order by Com_descricao          
  end          
          
--Enche Combo CNES AVALIAÇÃO--------------------------------------------------------------          
if @opcao = 244          
  begin          
 SELECT AcrAva_descricao ,AcrAva_codigo          
 FROM CNES_Acreditacao_Avaliacao           
 order by AcrAva_codigo               
  end          
          
          
-- Enche Combo Profissional Exame Radiologico --          
if @opcao = 245          
  begin          
 select   p.prof_nome, ep.prof_codigo          
 from     exame_radiologico_profissional ep          
 inner join  profissional_rede p          
 on  ep.prof_codigo = p.prof_codigo          
        where   ep.exarad_codigo = @codigo          
 order by  p.prof_nome          
  end          
          
--Enche Combo CNES SubTipo--------------------------------------------------------------          
if @opcao = 246          
  begin          
 SELECT SubIns_descricao,SubIns_codigo           
 FROM CNES_SubTipo_Instalacao            
 order by SubIns_descricao               
  end          
          
--Enche Combo CNES Tipo Instalação--------------------------------------------------------------          
if @opcao = 247          
  begin          
 SELECT TipIns_descricao,TipIns_codigo          
 FROM CNES_Tipo_Instalacao          
 order by TipIns_descricao               
  end          
          
--Enche Combo CNES Programa--------------------------------------------------------------          
if @opcao = 248          
  begin          
 SELECT TipPro_descricao ,TipPro_codigo          
 FROM CNES_Tipo_Programa           
 order by TippRO_descricao               
  end          
          
--Enche Combo vias de administração-------------------------------------------------------------          
if @opcao = 249          
  begin          
          
 SELECT   viamed_descricao ,viamed_codigo          
 FROM     via_medicamento          
 order by viamed_descricao               
          
--  SELECT   ViasAdmin_descricao ,ViasAdmin_codigo          
--  FROM     Vias_Administracao          
--  order by ViasAdmin_descricao               
          
  end          
          
-------------------------------------------------------------------------------------------------          
-- combo motivo de cobrança ambulatorial --          
if @opcao = 250           
  begin          
 select motcobunid_descricao,motcob_codigo from motivo_cobranca_unidade          
 order by motcobunid_descricao          
  end          
-------------------------------------------------------------------------------------------------          
-- Se pode receber solicitacao de Parecer ---          
if @opcao = 251          
  begin          
 SELECT  L.locatend_codigo as LOCATEND_CODIGO,           
  SC.setCLI_descricao as LOCATEND_DESCRICAO          
 FROM  Local_Atendimento L,           
  unidade U,           
  setor_clinica SC          
 WHERE  L.unid_codigo =  U.unid_codigo           
 AND  l.SETCLI_codigo = sc.SETCLI_codigo          
 AND  L.enf_codigo IS NULL              
 AND  (SC.set_recebe_parecer = 'S')          
      AND U.unid_codigo = isnull(@unid_codigo, U.unid_codigo)          
      ORDER BY LOCATEND_DESCRICAO           
  end          
-------------------------------------------------------------------------------------------------          
-- Se pode receber Encaminhamento Interno com retorno ---          
if @opcao = 252          
  begin          
 SELECT  L.locatend_codigo as LOCATEND_CODIGO,           
  SC.setCLI_descricao as LOCATEND_DESCRICAO          
 FROM  Local_Atendimento L,           
  unidade U,           
  setor_clinica SC          
 WHERE  L.unid_codigo =  U.unid_codigo           
 AND  l.SETCLI_codigo = sc.SETCLI_codigo          
 AND  L.enf_codigo IS NULL              
 AND  (SC.set_encaminhamento_interno = 'S')          
      AND U.unid_codigo = isnull(@unid_codigo, U.unid_codigo )          
      ORDER BY LOCATEND_DESCRICAO           
  end          
          
--Enche Combo CBO-------------------------------------------------------------          
if @opcao = 253          
  begin          
 SELECT  no_ocupacao, co_ocupacao FROM tb_ocupacao           
 ORDER BY no_ocupacao               
  end          
          
--Enche Combo Tipo Segmento-------------------------------------------------------------          
if @opcao = 254          
  begin          
 SELECT TipSeg_descricao,TipSeg_codigo FROM CNES_Tipo_Segmento           
 order by TipSeg_descricao               
  end          
          
--Enche Combo CNES Tipo Servico Referenciado--------------------------------------------------------------          
if @opcao = 255          
  begin          
    select SerRef_descricao, SerRef_codigo          
 from CNES_Servico_Referenciado          
 where TipSerRef_codigo=1          
 order by SerRef_descricao               
  end          
          
--Enche Combo CNES Cargo Formalizacao--------------------------------------------------------------          
if @opcao = 256          
  begin          
    select CarFor_descricao, CarFor_codigo          
 from CNES_Cargo_Formalizacao          
 where TipSerRef_codigo=1          
 order by CarFor_descricao               
  end          
          
--Enche Combo CNES Tipo Servico Referenciado--------------------------------------------------------------          
if @opcao = 257          
  begin          
    select SerRef_descricao, SerRef_codigo          
 from CNES_Servico_Referenciado          
 where TipSerRef_codigo=3          
 order by SerRef_descricao               
  end          
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 258          
  begin          
    select CarFor_descricao, CarFor_codigo          
 from CNES_Cargo_Formalizacao          
 where TipSerRef_codigo=3          
 order by CarFor_descricao               
  end          
          
--Enche Combo Grupo_Exame--------------------------------------------------------------          
          
if @opcao = 259          
  begin          
 SELECT GruExa_Descricao,GruExa_Codigo FROM Grupo_Exame
 WHERE unid_codigo = @unid_codigo          
 order by GruExa_Descricao               
  end          
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 260          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento          
 WHERE TipEqu_codigo = '001' or TipEqu_codigo = '201'          
    ORDER BY Equ_descricao            
end           
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 261          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento          
 WHERE TipEqu_codigo = '002' or TipEqu_codigo = '202'          
    ORDER BY Equ_descricao          
  end           
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 262          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento          
 WHERE TipEqu_codigo = '003' or TipEqu_codigo = '203'          
    ORDER BY Equ_descricao          
  end           
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 263          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento          
 WHERE TipEqu_codigo = '004' or TipEqu_codigo = '204'          
    ORDER BY Equ_descricao          
  end           
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 264          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento          
 WHERE TipEqu_codigo = '005' or TipEqu_codigo = '205'            ORDER BY Equ_descricao          
  end           
          
--Enche Combo CNES Equipamento--------------------------------------------------------------          
if @opcao = 265          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento          
 WHERE TipEqu_codigo = '006' or TipEqu_codigo = '206'          
    ORDER BY Equ_descricao          
  end           
          
--Enche Combo CNES Tipo Equipe--------------------------------------------------------------          
if @opcao = 266          
  begin          
    SELECT TipEqp_descricao,TipEqp_codigo          
    FROM CNES_Tipo_Equipe          
    ORDER BY TipEqp_descricao            
  end           
          
--Enche Combo Profissional Radiologico--------------------------------------------------------------          
if @opcao = 267          
  begin          
 SELECT Distinct p.prof_nome, p.prof_codigo          
 From Grupo_Exame GE          
  inner join Exame_Radiologico ER on ER.GRUEXA_CODIGO = GE.GRUEXA_CODIGO          
  inner join exame_radiologico_profissional ERP on ERP.exarad_codigo = ER.exarad_codigo          
  inner join profissional_rede P on P.prof_codigo = ERP.prof_codigo          
 Where GE.GruExa_Codigo = @codigo          
 Order by p.prof_nome          
           
  end           
          
--Enche Combo CNES Segmento--------------------------------------------------------------          
if @opcao = 268          
  begin          
 SELECT Seg_descricao,Seg_codigo --,TipSeg_codigo,Mun_codigo           
 FROM CNES_Segmento_Territorial            
        ORDER BY Seg_descricao          
  end           
          
--Enche Combo CNES Tipo Segmento--------------------------------------------------------------          
if @opcao = 269          
  begin          
 SELECT TipSeg_descricao ,TipSeg_codigo          
 FROM CNES_Tipo_Segmento          
        ORDER BY TipSeg_descricao            
  end           
          
--Enche Combo CNES Area--------------------------------------------------------------          
if @opcao = 270          
  begin          
 SELECT Are_descricao,Are_codigo --,Seg_codigo,Mun_codigo           
 FROM CNES_Area            
        ORDER BY Are_descricao          
  end           
          
--Enche Combo CNES Tipo Desativacao--------------------------------------------------------------          
if @opcao = 271          
  begin          
 SELECT TipDesEqp_descricao,TipDesEqp_codigo           
 FROM CNES_Tipo_Desat_Equipe            
        ORDER BY TipDesEqp_descricao          
  end           
          
--Enche Combo CNES Motivo Desativacao--------------------------------------------------------------          
if @opcao = 272          
  begin          
 SELECT MotDesEqp_descricao,MotDesEqp_codigo          
 FROM CNES_Motivo_Desat_Equipe          
 WHERE TipEqp_codigo <> '05'            
 ORDER BY MotDesEqp_descricao          
  end           
          
--Enche Combo CNES Micro Area--------------------------------------------------------------          
if @opcao = 273          
  begin          
 SELECT MicAre_descricao,MicAre_codigo          
 FROM CNES_MicroArea            
 ORDER BY MicAre_descricao          
  end           
          
--Enche Combo CNES CH Diferenciada--------------------------------------------------------------          
if @opcao = 274          
  begin          
 SELECT TipCarHor_descricao,TipCarHor_codigo          
 FROM CNES_Carga_Horaria_Diferenciada            
 ORDER BY TipCarHor_descricao          
  end           
          
--Enche Combo CNES CH Diferenciada--------------------------------------------------------------          
if @opcao = 275          
  begin          
 SELECT AtvProf_descricao,AtiPro_codigo           
 FROM Atividade_Profissional           
 order by AtvProf_descricao               
  end           
          
-- combo clinica de emergência --          
if @opcao = 276          
  begin          
 select locatend_descricao,locatend_codigo from vwLocal_Emergencia          
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 order by locatend_descricao           
  end          
          
          
-- combo profissional / conselho ----------------------------------------------------------------          
if @opcao = 277          
  begin          
           
 -- T=23192; C=5339 ----------------------------------------------------------------------          
 SELECT DISTINCT  PROFISSIONAL =  PROF_NOME + (select CASE WHEN MAX(pl.prof_numconselho) IS NULL          
          THEN '                 '  -- 17 CARACTERES          
          ELSE ' (' + MAX(pl.prof_numconselho) + ')'          
          END           
             from Profissional_Lotacao pl           
            where pl.prof_codigo = pr.prof_codigo)            
         , PROF_CODIGO          
 from profissional_rede pr          
 ORDER BY PROFISSIONAL          
          
--  select DISTINCT  profissional =  case when PROF_NUMCONSELHO  is null then PROF_NOME else PROF_NOME + ' ( ' + PROF_NUMCONSELHO  + ' ) ' end, PROF_CODIGO          
--  from profissional          
--  ORDER BY PROFISSIONAL          
 -- ---------------------------------------------------------------------------------------          
          
  end          
          
-- Enche combo CNES Tipo Vinculo Profissional----------------------------------------------------------------          
if @opcao = 278          
  begin          
 SELECT TipVin_descricao ,TipVin_codigo          
 FROM CNES_Tipo_Vinculo_Profissional          
 ORDER BY TipVin_descricao          
  end          
          
-- Enche combo Profissional----------------------------------------------------------------          
if @opcao = 279          
  begin          
 SELECT Prof_nome ,Prof_codigo          
 FROM Profissional_Rede          
 ORDER BY Prof_nome          
  end          
          
-- Tipo de Saída - Boletim de Emergência ---------------------------------------------------          
          
if @opcao = 280          
    begin              
      select tipsai_Descricao,tipsai_codigo          
      from tipo_saida          
      where tipsai_be= 'S'           
      order by tipsai_Descricao          
    end          
          
-- Tipo de Saída - Pronto Atendimento ------------------------------------------------------          
          
if @opcao = 281          
    begin          
      select tipsai_Descricao,tipsai_codigo          
      from tipo_saida          
      where tipsai_pa = 'S'          
      order by tipsai_Descricao          
    end           
          
-- Destino do Corpo - Óbito ----------------------------------------------------------------          
          
if @opcao = 282          
    begin          
      select descor_Descricao, descor_codigo          
      from destino_corpo          
      order by descor_Descricao          
    end          
          
          
-- Declaração --------------------------------------------------------------------------------          
if @opcao = 283          
  begin          
 select  dec_descricao, dec_codigo           
 from  declaracao          
 order by dec_descricao          
  end          
          
-- Tipo Eventos --------------------------------------------------------------------------------          
if @opcao = 284          
  begin          
 select  descricao, idtipoevento          
 from  tipoevento          
 order by descricao          
  end          
          
-- combo leito livre de observação e extra-----------------------------------------------------          
if @opcao = 285          
  begin          
 select locint_descricao,locatend_codigo locatend_codigo from vwleito          
 where 1 = 1  and locatend_codigo = isnull(@codigo,locatend_codigo)           
 and set_codigo = isnull(@codigo_aux, set_codigo)          
 and lei_status = 'L'          
 and unid_codigo = @unid_codigo          
 AND (Lei_Tipo = '5'          
     OR Lei_Tipo = '4')          
 order by locint_descricao          
  end          
          
--Enche Combo CNES Leito Especialidade Cirurgica--------------------------------------------------------------          
if @opcao = 286          
  begin          
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo ='0231'           
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Leito Especialidade Obstétrica--------------------------------------------------------------          
if @opcao = 287          
  begin          
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo ='0232'           
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Leito Especialidade Pediátricos--------------------------------------------------------------          
if @opcao = 288          
  begin          
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo ='0233'           
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Leito Especialidade Clínicos--------------------------------------------------------------          
if @opcao = 289          
  begin     
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo ='0234'           
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Leito Outras Especialidades--------------------------------------------------------------          
if @opcao = 290          
  begin          
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo ='0235'           
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Leito Hospitalar--------------------------------------------------------------          
if @opcao = 291          
  begin          
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo ='0236'           
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Leito Complementares--------------------------------------------------------------          
if @opcao = 292          
  begin          
 SELECT LeiEsp_descricao,LeiEsp_codigo          
 FROM CNES_Leito_Especialidade          
 WHERE TipEspLei_codigo IN ('0241','0242','0243','0244','0245','0246')          
 ORDER BY LeiEsp_descricao          
  end           
          
--Enche Combo CNES Regras Contratuais--------------------------------------------------------------        
if @opcao = 293          
  begin          
 SELECT RegCon_descricao,RegCon_codigo          
 FROM CNES_Regra_Contratual           
 ORDER BY RegCon_descricao          
  end           
          
--Enche Combo CNES Habilitações--------------------------------------------------------------          
if @opcao = 294          
  begin          
 SELECT Hab_descricao,Hab_codigo          
 FROM CNES_Habilitacao           
 ORDER BY Hab_descricao          
  end           
          
--Enche Combo CNES Habilitações--------------------------------------------------------------          
if @opcao = 295          
  begin          
 SELECT TipEspLei_descricao,TipEspLei_codigo          
 FROM CNES_Tipo_Especialidade_Leito           
 ORDER BY TipEspLei_descricao          
  end           
          
--Enche Combo Enfermaria de Emergência--------------------------------------------------------          
if @opcao = 296          
  begin          
          
 declare @SqlC varchar(2000)  
set @SqlC = 'SELECT E.locatend_descricao,E.locatend_codigo '          
set @SqlC = @SqlC + ' FROM vwEnfermaria E '          
set @SqlC = @SqlC + ' INNER JOIN vwLocal_Emergencia C '         
set @SqlC = @SqlC + ' ON E.unid_codigo = C.unid_codigo '          
set @SqlC = @SqlC + ' AND E.LocAtend_Codigo_Clinica = C.locatend_codigo '         
set @SqlC = @SqlC + ' left join enfermaria enf on (e.enf_codigo = enf.enf_codigo) '  
 if @codigo_aux is null  
begin  
 set @SqlC = @SqlC + ' WHERE e.unid_codigo = ''' + @unid_codigo + ''''  
end  
else  
begin  
 set @SqlC = @SqlC + ' WHERE (enf.enf_operacional = ''' + @codigo_aux + ''' or enf.enf_operacional is null) and e.unid_codigo = ''' + @unid_codigo + ''''  
end  
           
exec(@SqlC)  
  end          
          
--Enche Combo CNES Serviços de Apoio--------------------------------------------------------------          
if @opcao = 297          
  begin          
 SELECT SerApo_descricao ,SerApo_codigo          
 FROM CNES_Servico_Apoio           
 ORDER BY SerApo_descricao          
  end           
          
--Enche Combo CNES Serviços/Classificação/CBO--------------------------------------------------------------          
if @opcao = 298          
  begin          
 SELECT DISTINCT Ser_Classificacao_descricao, Ser_Classificacao_codigo          
 FROM CNES_Servico_Classif_CBO          
 WHERE ser_codigo = isnull (@codigo_aux, ser_codigo)           
 ORDER BY Ser_Classificacao_descricao          
  end           
          
--Enche Combo CNES Serviços/Classificação/CBO--------------------------------------------------------------          
if @opcao = 299          
  begin         SELECT TipCar_descricao ,TipCar_codigo          
 FROM CNES_Tipo_Caracteristica          
 ORDER BY TipCar_descricao          
  end           
          
--Enche Combo Centro cirúrgico ------------------------------------------------------------------          
          
if @opcao = 300          
  begin           
          
 SELECT CentroCir_descricao, CentroCir_codigo          
 FROM   Centro_Cirurgico_Salas          
 WHERE  unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 ORDER BY centroCir_descricao          
  end          
          
--Enche Combo Tipo Certidão ------------------------------------------------------------------          
          
if @opcao = 301          
begin           
 SELECT TipCer_descricao ,TipCer_codigo          
 FROM CNES_Tipo_Certidao          
 ORDER BY TipCer_descricao          
end          
          
--Enche Combo Raca ------------------------------------------------------------------          
          
if @opcao = 302          
begin           
 SELECT Raca_Desc,Raca_Codigo_SUS           
 FROM Raca          
 ORDER BY Raca_Desc          
end          
          
--Enche Combo Tipo Escolaridade ------------------------------------------------------------------          
          
if @opcao = 303          
begin           
 SELECT TipEsc_descricao,TipEsc_codigo          
 FROM CNES_Tipo_Escolaridade           
 ORDER BY TipEsc_descricao          
end          
          
--Enche Combo Situação Familiar ------------------------------------------------------------------          
          
if @opcao = 304          
begin           
 SELECT SitFam_descricao ,SitFam_codigo          
 FROM CNES_Situacao_Familiar          
 ORDER BY SitFam_descricao          
end          
          
--Enche Combo Nacionalidade País ------------------------------------------------------------------          
          
if @opcao = 305          
begin           
 SELECT Nac_descricao ,Nac_codigo          
 FROM CNES_Nacionalidade_Pais          
 ORDER BY Nac_descricao          
end          
          
--Enche Combo Requisitante do Stok-----------------------------------------------------------------          
          
if @opcao = 306          
begin           
          
  declare @sql306  varchar(2000)          
  declare @banco306  varchar(100)          
  declare @UnidadeStok306 char(2)          
          
      SELECT @banco306       = parcirurg_banco  FROM Parametro_Cirurgico WHERE unid_codigo = @unid_codigo          
      SELECT @UnidadeStok306 = parcirurg_codunisau FROM Parametro_Cirurgico WHERE unid_codigo = @unid_codigo          
          
  set @sql306 =           ' select  desreq as reqstok_descricao, codreq as reqstok_codigo '          
  set @sql306 = @sql306 + ' from ' + @banco306 + '.dbo.requisitante  '           
  set @sql306 = @sql306 + ' where   codunisau = ''' + @UnidadeStok306 + ''''          
  set @sql306 = @sql306 + ' order by  desreq '          
          
  exec(@sql306)          
          
end          
          
-- combo Unidade Pezinho Especifica para Emissão de Etiquetas Sedex  --------------------------------------------------------          
if @opcao = 307          
  begin          
        select  peuni_coduni + '         ' + peuni_desuni as Codigo_Unidade, peuni_desuni, peuni_coduni   from pezinho_unidade          
----- select peuni_desuni, peuni_coduni from pezinho_unidade          
 order by peuni_coduni          
  end          
-- combo Função do Profissional (AIH)  --------------------------------------------------------          
if @opcao = 308          
begin          
 select idEqu_Descricao, idEqu_Codigo          
 from Identificador_Equipe_SUS          
 order by idEqu_Codigo          
end          
          
-- Tipo de Saída - Pronto Atendimento ------------------------------------------------------          
          
if @opcao = 309          
    begin          
      select tipsai_Descricao,tipsai_codigo          
      from tipo_saida          
      where tipsai_Checkin = 'S'          
      order by tipsai_Descricao          
    end           
          
-- combo meta procedimento ambulatorial --          
if @opcao = 310          
  begin          
 select  MP.mtproc_descricao,          
                MP.mtproc_codigo          
        from  meta_procedimento MP,          
  meta_procedimento_ambulatorial MPA          
 WHERE MP.mtproc_codigo = mpa.mtproc_codigo        AND          
    MPA.locatend_codigo = ISNULL(@codigo,MPA.locatend_codigo) AND          
           MPA.mtproc_ordem IS NULL          
 order by MP.mtproc_descricao          
  end          
          
-- combo Declarações Unidade --          
if @opcao = 311          
  begin          
 SELECT   d.dec_descricao,de.dec_codigo          
 FROM   declaracao_unidade de          
 INNER JOIN  declaracao d          
 ON   de.dec_codigo = d.dec_codigo          
 INNER JOIN  relatorio r          
 ON   de.relatorio_codigo = r.relatorio_codigo          
 WHERE   de.unid_codigo = @unid_codigo          
 ORDER BY d.dec_descricao          
  end          
          
-- Tipo Eventos somente com exames          
if @opcao = 312          
  begin          
 select  descricao, idtipoevento          
 from  tipoevento          
    where idtipoevento <> 521          
 order by descricao          
  end          
          
-- Nível de Gestao Hospitalar          
if @opcao = 313          
  begin          
 select  NivGes_descricao, NivGes_codigo          
   from  CNES_Nivel_Gestao          
            order by NivGes_codigo          
  end          
          
-- Modalidade do Exame Radiologico          
if @opcao = 314          
  begin          
 select  '[' + radmod_Sigla + '] ' + radmod_Descricao radmod_Descricao, radmod_Sigla          
   from  Radiologia_Modalidade          
            order by radmod_Descricao          
  end          
          
-- Situacao Exame Coleta          
if @opcao = 315          
begin           
 SELECT SituExa_Descricao,SituExa_Codigo           
 FROM Coleta_Situacao_Exame          
 ORDER BY SituExa_Descricao          
end          
          
-- Profissional origem          
if @opcao = 316          
begin           
 select p.prof_nome, p.prof_codigo            
      from profissional p          
     where p.locatend_codigo = @CODIGO AND p.unid_codigo = @CODIGO_AUX          
     order by p.prof_nome            
end          
          
-- Leitos regulaveis sem reserva          
if @opcao = 317          
begin          
          
 set @data = convert(smalldatetime, convert(char(19),@data,101))                     
 set @datafinal = convert(smalldatetime, convert(char(19),@datafinal,101))            
          
 select  l.locint_descricao, l.locatend_codigo locatend_codigo, l.lei_codigo          
 from vwleito l          
 where l.tipesplei_codigo = @codigo          
 and  l.lei_regulavel = 'S'          
 and l.unid_codigo = @unid_codigo          
 and not exists (  select 1          
     from reserva_leito rl        
     where rl.locatend_codigo = l.locatend_codigo          
     and rl.lei_codigo = l.lei_codigo          
     and (reslei_dtInicial between @data and @datafinal or reslei_dtFinal between @data and @datafinal)          
     and reslei_status is null )          
          
end          
          
-- Status da Reserva de Leito          
if @opcao = 318          
begin          
 select  reslei_descricao, reslei_status from reserva_leito_status          
 order by reslei_status          
          
end          
          
-- Layout Mapa de Trabalho Laboratorio          
if @opcao = 319          
begin           
 select distinct t.Layout_descricao, t.Layout_codigo          
      from Layout_Mapa t          
     where t.unid_codigo = isnull(@unid_codigo, t.unid_codigo)          
    and t.Layout_codigo = isnull(@codigo, t.Layout_codigo)               
 order by t.Layout_descricao            
end          
          
-- Combo Usuario do Grupo          
if @opcao = 320          
  begin          
 select distinct u.usu_nome, u.usu_codigo           
   from grupo_usuario gu           
  inner join usuario u on (u.usu_codigo=gu.usu_codigo)           
  where gu.grp_codigo = isnull(@codigo ,gu.grp_codigo)        
    and gu.unid_codigo = isnull(@unid_codigo,gu.unid_codigo)          
    and u.usu_bloqueado = 'N'          
  order by u.usu_nome           
  end          
          
--Enche Combo CNES Equipamento para Centro Cirurgico--------------------------------------------------------------          
if @opcao = 321          
  begin          
    SELECT Equ_descricao,Equ_codigo          
 FROM CNES_Equipamento  -- Todos os Materiais          
    ORDER BY Equ_descricao            
end           
          
--Enche Combo CNES Equipamento para Centro Cirurgico--------------------------------------------------------------          
if @opcao = 323          
  begin          
    SELECT SUBTIPO_DESCRICAO,SUBTIPO_CODIGO          
 FROM CNES_SUBTIPO_UNIDADE  -- Todos os Materiais          
    ORDER BY SUBTIPO_DESCRICAO            
end           
          
-------------------------------------------------------------------------------------------------          
-- combo função cirúrgica, somente com profissionais avaliadores no pré-anestésico...          
if @opcao = 324          
  begin          
 select funcir_descricao, funcir_codigo from funcao_cirurgica          
 where  funcir_avaliador = 'S'          
 order by funcir_descricao          
  end          
          
--Enche Combo Centro cirúrgico ------------------------------------------------------------------          
          
if @opcao = 326          
  begin           
 SELECT Res_Nome_Ref, Res_codigo          
 FROM   CNES_Residencia_Unidade          
 WHERE  unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 ORDER BY Res_Nome_Ref          
  end          
            
            
 --Enche Combo Serviço Especializao (Tipo de Serviço) ------------------------------------------------------------------          
          
if @opcao = 327          
  begin           
 SELECT Ser_descricao, Ser_codigo          
 FROM   CNES_Servico_Especializado           
 ORDER BY Ser_descricao          
  end          
            
 --Enche Combo CNES_Terceiro_Servico_Especializado ------------------------------------------------------------------          
          
if @opcao = 328          
  begin           
 select CNES_Codigo + ' - ' + Razao_Social as Descricao, CNES_Codigo          
 FROM   dbo.CNES_Terceiro_Servico_Especializado          
 WHERE Ser_codigo = isnull (@codigo_aux, Ser_codigo)           
 ORDER BY CNES_Codigo + ' - ' + Razao_Social          
  end          
            
 --Enche Combo Exame_Rede ------------------------------------------------------------------          
          
if @opcao = 329          
begin           
 select SERE_CODIGO as exared_codigo, SERE_DESCRICAO as exared_descricao    
 from dbo.servico_rede    
 where IdTipoEvento = isnull(@codigo, IdTipoEvento)    
 order by sere_descricao    
end          
          
 --Enche Combo Unidades Consumidoras ------------------------------------------------------------------          
          
if @opcao = 330          
  begin           
 select unid_codigo, (isnull(unid_sigla,'') + ' - ' + unid_descricao) as unid_descricao          
 FROM   dbo.unidade          
 ORDER BY  case when unid_codigo = @unid_codigo then 0 else 1 end , isnull(unid_sigla,'') + ' - ' + unid_descricao  end            
      
 --Enche Combo Unidades Profissional por CBO ---------------------------------------------------------------          
          
if @opcao = 331          
begin        
   select Prof_nome, Prof_codigo    
   from profissional     
   WHERE unid_codigo = @unid_codigo  
    and  prof_ativo  = @prof_ativo   
    and  cbo_codigo  = @codigo_aux   
   order by Prof_nome     
       
end             
    
--Enche Combo Enfermaria de Internacao--------------------------------------------------------          
if @opcao = 332    
begin          
declare @sqlB varchar(2000)  
set @sqlB = 'SELECT E.locatend_descricao,E.locatend_codigo     '    
set @sqlB = @sqlB + ' FROM vwEnfermaria E  '               
set @sqlB = @sqlB + ' INNER JOIN vwLocal_Emergencia C '         
set @sqlB = @sqlB + ' ON E.unid_codigo = C.unid_codigo AND E.LocAtend_Codigo_Clinica = C.locatend_codigo '                 
set @sqlB = @sqlB + ' left join enfermaria enf on e.enf_codigo = enf.enf_codigo_local '  
if @codigo_aux is null  
begin  
 set @sqlB = @sqlB + ' WHERE e.unid_codigo = ''' + @unid_codigo + ''''  
end  
else  
begin  
 set @sqlB = @sqlB + ' WHERE (enf.enf_operacional = ''' + @codigo_aux + ''' or enf.enf_operacional is null) and e.unid_codigo = ''' + @unid_codigo + ''''  
end  
    
 set @sqlB = @sqlB + ' union '   
  
 set @sqlB = @sqlB + 'select E.locatend_descricao,E.locatend_codigo '  
 set @sqlB = @sqlB + ' from vwenfermaria E        '  
 set @sqlB = @sqlB + ' inner join vwClinica_LeitoInternacao l  '  
 set @sqlB = @sqlB + ' on E.unid_codigo = l.unid_codigo and E.locatend_codigo_clinica = l.locatend_codigo        '  
 set @sqlB = @sqlB + ' left join enfermaria enf on (e.enf_codigo = enf.enf_codigo_local) '  
 if @codigo_aux is null  
begin  
 set @sqlB = @sqlB + ' WHERE e.unid_codigo = ''' + @unid_codigo + ''''  
end  
else  
begin  
 set @sqlB = @sqlB + ' WHERE (enf.enf_operacional = ''' + @codigo_aux + ''' or enf.enf_operacional is null) and e.unid_codigo = ''' + @unid_codigo + ''''  
end  
  
exec (@SqlB)  
    
end          
    
--Enche Combo Motivo de Cobran�a da AIH     
if @opcao = 333    
begin          
 select  motcob_codigo, motcob_descricao from motivo_cobranca_aih where motcob_ativo = 'S'    
 order by motcob_descricao    
end          
      
      
--Enche Combo Modelo Laudo (Modelo Laudo) ------------------------------------------------------------------          
          
if @opcao = 350          
  begin           
 select m.modelo_descricao,m.relatorio_codigo    
 from modelo_laudo m    
 inner join parametro_relatorio a on (m.relatorio_codigo=a.relatorio_codigo)    
 where a.unid_codigo= @unid_codigo    
 ORDER BY m.relatorio_codigo          
  end          
    
if @opcao = 351      
begin              
 select  proate_codigo, proate_descricao from protocolo_acolhimento      
 where proate_ativo = isnull(@codigo_aux, proate_ativo)            
 order by proate_descricao      
end                
-------------------------------------------------------------------------------------------------          
-- Combo FAIXA ETÁRIA DO LABORATÓRIO --          
if @opcao = 352          
  begin          
          
 SELECT  Idade_Inicial + ' A ' + idade_Final + ' ' + faixa_descricao as faixa_descricao, faixa_codigo          
 FROM faixa_etaria      
 WHERE faixa_codigo != '000'        
end       
-- Combo Risco Acolhimento --            
if @opcao = 353        
begin                
  select RISACO_GRAVIDADE ,RISACO_DESCRICAO from RISCO_ACOLHIMENTO       
  where proate_codigo = @codigo    
 order by RISACO_CODIGO    
end    
    
-- Combo Unidade de Referencia --            
if @opcao = 354        
  begin                 
 select unidref_descricao,unidref_codigo from unidade_referencia                
 order by unidref_descricao                
  end                
        
-- Combo Posto Enfermagem --            
if @opcao = 355    
  begin                 
                
 SELECT pst_descricao, pst_codigo                
 FROM   Posto_Enfermagem                
 WHERE  unid_codigo = ISNULL(@unid_codigo,unid_codigo)                
 ORDER BY pst_descricao                
  end                
      
-- Tipo de Saída - Boletim de Emergência / SPA ---------------------------------------------------          
if @opcao = 356          
    begin              
      select tipsai_Descricao,tipsai_codigo          
      from tipo_saida          
      where tipsai_be= 'S'    
      or tipsai_pa = 'S'           
      order by tipsai_Descricao          
    end    
    
-- Combo PROFISSIONAL PELO CBO --        
if @opcao = 357  
begin  
 SELECT DISTINCT P.PROF_NOME,P.PROF_CODIGO  
 FROM PROFISSIONAL P  
 INNER JOIN PROFISSIONAL_LOTACAO PL ON (PL.PROF_CODIGO=P.PROF_CODIGO)  
 WHERE PL.CBO_CODIGO = ISNULL(@CODIGO_AUX,PL.CBO_CODIGO)  
 AND P.UNID_CODIGO = ISNULL(@UNID_CODIGO,P.UNID_CODIGO)  
 ORDER BY P.PROF_NOME  
end     
  
--Enche Combo CNES Equipamento--------------------------------------------------------------        
if @opcao = 358        
  begin        
    SELECT Equ_descricao,Equ_codigo        
 FROM CNES_Equipamento        
 WHERE TipEqu_codigo = '007' or TipEqu_codigo = '207'        
    ORDER BY Equ_descricao        
  end  
    
--Enche Combo CNES Equipamento--------------------------------------------------------------        
if @opcao = 359        
  begin        
    SELECT Equ_descricao,Equ_codigo        
 FROM CNES_Equipamento        
 WHERE TipEqu_codigo = '008' or TipEqu_codigo = '208'        
    ORDER BY Equ_descricao        
  end  
    
--Enche Combo CNES_Terceiro_Servico_Especializado Demanda ------------------------------------------------------------------        
        
if @opcao = 360        
  begin         
 --select CNES_Codigo + ' - ' + Razao_Social as Descricao, CNES_Codigo        
 --FROM   dbo.CNES_Terceiro_Servico_Especializado        
 --WHERE Ser_codigo = isnull (@codigo, Ser_codigo)         
 --and (CNES_Codigo + ' - ' + Razao_Social) like '''' + @codigo_aux + '%' + ''''  
 --ORDER BY CNES_Codigo + ' - ' + Razao_Social        
   
 --O correto é o de cima que está comentado... temporariamente usaremos este porque os CNES cadastrados na base atualmente  
 --não possuem codservico.  
 select CNES_Codigo + ' - ' + Razao_Social as Descricao, CNES_Codigo        
 FROM   dbo.CNES_Terceiro_Servico_Especializado        
 WHERE (CNES_Codigo + ' - ' + Razao_Social) like '' + '%' + @codigo_aux + '%' + ''  
 ORDER BY CNES_Codigo + ' - ' + Razao_Social        
   
  end  
    
  
  
-- Grupos procedimentos - APACs ---------------------------------------------------        
if @opcao = 361        
  begin        
        
  select NO_GRUPO,CO_GRUPO from tb_grupo        
  order by NO_GRUPO        
        
  end        
  
-- combo motivo de Saida UTI NEO --          
if @opcao = 362           
  begin          
 select motsai_descricao,motsai_codigo   
 from motivo_saida_UTI_NEO          
 order by motsai_descricao          
  end      
  
-- combo motivo de Saida Tipo_Unidade_REFERENCIA --          
if @opcao = 365  
  begin          
 select TpUnidRef_descricao,TpUnidRef_Codigo  
 from Tipo_Unidade_REFERENCIA          
 order by TpUnidRef_descricao          
  end      
  
    
-- combo Etnias --          
if @opcao = 366           
  begin          
  select etnia_codigo, etnia_desc   
  from Etnias         
  order by etnia_desc    
  end     
-------------------------------------------------------------------------------------------------          
--profissional FUNCAO CIRUGICA PARA EQUIPE EM SEU LOCAL DE ATENDIMENTO                   
  
if @opcao = 369            
begin            
 CREATE TABLE #tempFUNCIR(profcod char(8),profnome varchar(50))    
    
 INSERT INTO #tempFUNCIR (profcod,profnome)            
 SELECT P.LOCATEND_CODIGO + P.PROF_CODIGO PROFCOD,P.PROF_NOME             
 FROM PROFISSIONAL P   
    INNER JOIN PROFISSIONAL_LOTACAO_FUNCAO_CIRURGICA F    
    ON (P.prof_codigo = F.prof_codigo)         
 WHERE             
  P.PROF_CIRURGIA = 'S'   
  AND PROF_ATIVO = 'S'   
  AND F.FUNCIR_CODIGO = @CODIGO
  --AND F.LOCATEND_CODIGO = @codigo_aux     
 --GROUP BY P.PROF_NOME,P.LOCATEND_CODIGO + P.PROF_CODIGO       
                      
  SELECT DISTINCT profnome,profcod             
     FROM #tempFUNCIR            
    ORDER BY profnome            
              
  DROP TABLE #tempFUNCIR            
end         
  
-- Orgãos emissores de identidade  
if @opcao = 370  
begin  
 SELECT OrgEmi_codigo, OrgEmi_codigo + '-' + OrgEmi_descricao as 'OrgEmi_descricao' FROM CNES_ORGAO_EMISSOR  
end  
-- Serviço      
IF @opcao = 373        
BEGIN      
 SELECT DISTINCT      
  S.CO_SERVICO,      
  S.DT_COMPETENCIA,      
  RTRIM(S.NO_SERVICO) AS NO_SERVICO  
 FROM      
  RL_PROCEDIMENTO_SERVICO RPS INNER JOIN TB_SERVICO S ON (RPS.CO_SERVICO = S.CO_SERVICO)  
 WHERE      
  RPS.CO_PROCEDIMENTO = @CODIGO       
END      
      
-- Classificação        
IF @opcao = 374         
BEGIN        
 SELECT DISTINCT  
  RPS.CO_PROCEDIMENTO,  
  RPS.CO_SERVICO,        
  S.CO_CLASSIFICACAO,        
  S.DT_COMPETENCIA,    
  RTRIM(S.NO_CLASSIFICACAO) AS NO_CLASSIFICACAO    
 FROM        
  RL_PROCEDIMENTO_SERVICO RPS INNER JOIN TB_SERVICO_CLASSIFICACAO S ON (RPS.CO_SERVICO = S.CO_SERVICO)    
 WHERE        
  RPS.CO_PROCEDIMENTO = @CODIGO
  AND RPS.CO_SERVICO = @CODIGO_AUX  
  AND S.CO_CLASSIFICACAO IN (SELECT CO_CLASSIFICACAO FROM RL_PROCEDIMENTO_SERVICO WHERE CO_PROCEDIMENTO=@CODIGO AND CO_SERVICO=@CODIGO_AUX)  
END   
 
-- LOCAL INTERNAÇÃO E LOCAL EMERGENCIA
IF @opcao = 375
BEGIN
 select locatend_descricao,set_codigo from vwLocal_Emergencia
 where unid_codigo = ISNULL(@unid_codigo,unid_codigo)          
 union 
 select  locatend_descricao,set_codigo   
 from  vwclinica_Leito          
 where  unid_codigo = ISNULL(@unid_codigo,unid_codigo)  

END
-------------------------------------------------------------------------------------------------          
--profissional FUNCAO CIRUGICA PARA EQUIPE          
  
if @opcao = 376            
begin            
 CREATE TABLE #tempFUNCIR2(profcod char(8),profnome varchar(50))    
    
 INSERT INTO #tempFUNCIR2 (profcod,profnome)            
 SELECT P.LOCATEND_CODIGO + P.PROF_CODIGO PROFCOD,P.PROF_NOME             
 FROM PROFISSIONAL P   
    INNER JOIN PROFISSIONAL_LOTACAO_FUNCAO_CIRURGICA F    
    ON (P.prof_codigo = F.prof_codigo)         
 WHERE             
  P.PROF_CIRURGIA = 'S'   
  AND PROF_ATIVO = 'S'   
  AND F.FUNCIR_CODIGO = @CODIGO     
 --GROUP BY P.PROF_NOME,P.LOCATEND_CODIGO + P.PROF_CODIGO       
                      
  SELECT DISTINCT profnome,profcod             
     FROM #tempFUNCIR2            
    ORDER BY profnome            
              
  DROP TABLE #tempFUNCIR2            
end   

if @opcao = 377      
begin  
SELECT	distinct pr.prof_nome, pl.prof_codigo
FROM Profissional_Lotacao pl WITH(NOLOCK) 
INNER JOIN agenda_consulta ac WITH(NOLOCK) ON pl.prof_codigo = ac.prof_codigo
inner join Profissional pr with(nolock) on pl.prof_codigo = pr.prof_codigo
WHERE pl.prof_ambulatorio = 'S'
and pl.locatend_codigo = @codigo
and ac.agd_datahora > GETDATE()
end 

IF(@opcao = 378)
BEGIN 
 SELECT er.exarad_descricao, er.exarad_codigo      
 FROM exame_radiologico er  
 INNER JOIN Grupo_Exame ge on ge.GruExa_Codigo = er.GRUEXA_CODIGO
 WHERE 1 =1  --ge.ATIVO = 'S'   
 and ge.unid_codigo = @unid_codigo
 and ge.GruExa_Codigo = cast(@codigo as int)
 ORDER BY exarad_descricao    
END

if @opcao = 379
begin        
   select distinct Prof_nome, Prof_codigo    
   from profissional     
   inner join ParametroCboRadiologia pcr on pcr.codigocbo = cbo_codigo
   WHERE unid_codigo = @unid_codigo  
    and  prof_ativo  = @prof_ativo   
   order by Prof_nome     
       
end     
  ---  FIM DA PROCEDURE  -----------------------------------------------------------------------------------------------------------------------        
        
SET NOCOUNT OFF        
if (@@ERROR <> 0)        
       begin        
  RAISERROR('ERRO !! - ksp_enche_combo.',1,1)        
       end
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_profissional]...';


GO
ALTER PROCEDURE [dbo].[ksp_profissional]
@prof_codigo CHAR (4), @prof_cpf CHAR (11), @prof_nome CHAR (50), @tp_pesq SMALLINT, @opcao SMALLINT, @usuario CHAR (4)=null, @usu_nome VARCHAR (60)=NULL, @locatend_codigo CHAR (4)=null, @prof_CNS CHAR (15)=null, @Prof_PisPasep VARCHAR (11)=NULL, @Prof_sexo CHAR (1)=NULL, @Prof_nome_Mae VARCHAR (60)=NULL, @Prof_nome_Pai VARCHAR (60)=NULL, @Prof_datNascimento DATETIME=NULL, @Prof_mun_codigo_nascimento CHAR (7)=NULL, @Prof_uf_codigo_nascimento CHAR (2)=NULL, @Rac_codigo CHAR (2)=NULL, @TipCer_codigo CHAR (2)=NULL, @Prof_nome_Cartorio VARCHAR (50)=NULL, @Prof_livro VARCHAR (8)=NULL, @Prof_folha VARCHAR (4)=NULL, @Prof_termo VARCHAR (8)=NULL, @Prof_datEmissao_certidao DATETIME=NULL, @Prof_Identidade VARCHAR (14)=NULL, @Prof_OrgEmissor VARCHAR (50)=NULL, @Prof_uf_codigo_orgao CHAR (2)=NULL, @Prof_dtEmissao_identidade DATETIME=NULL, @Prof_registro_conselho VARCHAR (20)=null, @Prof_orgao_registro VARCHAR (20)=null, @Prof_tipo_nacionalidade CHAR (4)=NULL, @Pai_codigo CHAR (4)=NULL, @Pros_datEntrada DATETIME=NULL, @Prof_datNaturalizacao DATETIME=NULL, @Prof_portaria VARCHAR (16)=NULL, @Prof_titulo_eleitor VARCHAR (13)=NULL, @Prof_zona VARCHAR (4)=NULL, @Prof_secao VARCHAR (4)=NULL, @Prof_ctps VARCHAR (7)=NULL, @Prof_serie VARCHAR (5)=NULL, @Prof_uf_codigo_ctps CHAR (2)=NULL, @Prof_datEmissao_ctps DATETIME=NULL, @TipEsc_codigo CHAR (2)=NULL, @SitFam_codigo CHAR (2)=NULL, @Prof_ind_frequenta_escola CHAR (1)=NULL, @Prof_logradouro VARCHAR (60)=NULL, @Prof_num_logradouro VARCHAR (60)=NULL, @Prof_complemento VARCHAR (60)=NULL, @Prof_cep_sequencial CHAR (6)=NULL, @Prof_Banco VARCHAR (10)=NULL, @Prof_Agencia VARCHAR (50)=NULL, @Prof_conta_corrente VARCHAR (14)=NULL, @Prof_DDD CHAR (3)=NULL, @Prof_telefone VARCHAR (20)=NULL, @prof_codigoRH INT=null, @Cod_SUS_Tiplogr CHAR (3)=NULL, @unid_codigo CHAR (4)=null, @Prof_Carga_Horaria_Ambulatorial VARCHAR (4)=NULL, @Prof_Carga_Horaria_Hospitalar VARCHAR (50)=NULL, @Prof_Carga_Horaria_Outros VARCHAR (14)=NULL, @Prof_Cadastramento_SUS CHAR (1)=NULL
AS
SET NOCOUNT ON

   Declare @sql Varchar(2000)
   Declare @par varchar(255)
   Declare @var1 varchar(255)

----------------------------- Selecao para Carga dos Dados ------------------------------------

if @opcao = 0
   BEGIN	
 set @Sql = 'SELECT p.prof_codigo,' +  
     'p.atvprof_codigo,' +  
     'p.prof_nome,' +  
     'p.prof_cpf,' +  
     'p.prof_codigoRH,' +  
     'pa.prof_asseletronica,' +  
     'p.prof_cns,' +  
     'p.usu_codigo, ' +  
     'p.Prof_PisPasep,   '  +  
     'p.Prof_sexo,   '  +  
     'p.Prof_nome_Mae,   '  +  
     'p.Prof_nome_Pai,   '  +  
     'p.Prof_datNascimento,   '  +  
     'p.Prof_mun_codigo_nascimento,   '  +  
     'p.Prof_uf_codigo_nascimento,   '  +  
     'p.Rac_codigo,   '  +  
     'p.TipCer_codigo,   '  +  
     'p.Prof_nome_Cartorio,   '  +  
     'p.Prof_livro,   '  +  
     'p.Prof_folha,   '  +  
     'p.Prof_termo,   '  +  
     'p.Prof_datEmissao_certidao,   '  +  
     'p.Prof_Identidade,   '  +  
     'p.Prof_OrgEmissor,   '  +  
     'p.Prof_uf_codigo_orgao,   '  +  
     'p.Prof_dtEmissao_identidade,   '  +  
     'l.Prof_registro_conselho,   '  +  
     'p.Prof_Orgao_registro,   '  +  
     'p.Prof_tipo_nacionalidade,   '  +  
     'p.Pai_codigo,   '  +  
     'p.Pros_datEntrada,   '  +  
     'p.Prof_datNaturalizacao,   '  +  
     'p.Prof_portaria,   '  +  
     'p.Prof_titulo_eleitor,   '  +  
     'p.Prof_zona,   '  +  
     'p.Prof_secao,   '  +  
     'p.Prof_ctps,   '  +  
     'p.Prof_serie,   '  +  
     'p.Prof_uf_codigo_ctps,   '  +  
     'p.Prof_datEmissao_ctps,   '  +  
     'p.TipEsc_codigo,   '  +  
     'p.SitFam_codigo,   '  +  
     'p.Prof_ind_frequenta_escola,   '  +  
     'p.Prof_logradouro,   '  +  
     'p.Prof_num_logradouro,   '  +  
     'p.Prof_complemento,   '  +  
     'p.Prof_cep_sequencial,   '  +  
     'p.Prof_Banco,   '  +  
     'p.Prof_Agencia,   '  +  
     'p.Prof_conta_corrente, ' +  
     'p.Prof_DDD, ' +  
     'p.Prof_telefone, ' +  
     'l.cbo_codigo, ' +  
     'p.Cod_SUS_Tiplogr,
	  l.locatend_codigo, 
	  S.SETCLI_DESCRICAO, ' + 
	 'p.Prof_Carga_Horaria_Ambulatorial, ' + 
	 'p.Prof_Carga_Horaria_Hospitalar, ' +
	 'p.Prof_Carga_Horaria_Outros, ' +
	 'l.prof_numconselho, ' +
	 'p.prof_cadastramento_sus ' + 
  
   'FROM profissional_rede p ' +   
            'LEFT JOIN profissional_lotacao l ON        p.prof_codigo = l.prof_codigo ' +   
            'LEFT JOIN profissional_rede_assinatura pa ON        p.prof_codigo = pa.prof_codigo ' +   
			'LEFT JOIN LOCAL_ATENDIMENTO LA ON L.LOCATEND_CODIGO = LA.LOCATEND_CODIGO
			 LEFT JOIN SETOR_CLINICA S ON S.SETCLI_CODIGO = LA.SETCLI_CODIGO 
     WHERE 1=1 and l.prof_ativo = ''S'''    

	if @prof_codigo is not null
	   begin
	    Set @var1 = convert(varchar,@prof_codigo)
	    Exec ksp_ParametroPesquisa @var1,"p.prof_codigo",@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
	   end

	if @prof_nome is not null
	   begin
	    Set @var1 = convert(varchar(50),@prof_nome)
            Exec ksp_ParametroPesquisa @var1,"p.prof_nome" ,@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
           end

	if @usuario is not null
	   begin
	    Set @var1 = convert(varchar,@usuario)
            Exec ksp_ParametroPesquisa @var1,"p.usu_codigo" ,@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
           end

	if @prof_cpf is not null
	   begin
	    Set @var1 = convert(varchar,@prof_cpf)
            Exec ksp_ParametroPesquisa @var1,"p.prof_cpf" ,@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
           end

	if @locatend_codigo is not null
	   begin
	    Set @var1 = convert(varchar,@locatend_codigo)
	    Exec ksp_ParametroPesquisa @var1,"l.locatend_codigo",@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
	   end
	
	if @Prof_registro_conselho is not null
	   begin
	    Set @var1 = convert(varchar,@Prof_registro_conselho)
	    Exec ksp_ParametroPesquisa @var1,"p.Prof_registro_conselho",@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
	   end   
	   
	if @prof_CNS is not null
	   begin
	    Set @var1 = convert(varchar,@prof_CNS)
        Exec ksp_ParametroPesquisa @var1,"p.prof_cns" ,@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
        end
	   
	Set @Sql = @Sql + ' order by p.prof_nome '
	--print @locatend_codigo
	--print @prof_codigo
	exec(@Sql)

   END

------------------------Insercao------------------------------------------
IF (@opcao = 1)
   BEGIN

	EXEC ksp_controle_sequencial @Unidade    = @unid_codigo , 
				     @Chave      = 'PROFISSIONAL_REDE',
                                     @DATA       = NULL,
                                     @OPCAO      = 1, 
                                     @ZEROS      = 4,
                                     @PROXIMO    = NULL,
				     @NovoCodigo = @prof_codigo OUTPUT

	INSERT INTO profissional_rede
		(
		Prof_codigo,
		prof_nome,
		prof_cpf,
		usu_codigo,
		Prof_PisPasep,
		Prof_sexo,
		Prof_nome_Mae,
		Prof_nome_Pai,
		Prof_datNascimento,
		Prof_mun_codigo_nascimento,
		Prof_uf_codigo_nascimento,
		Rac_codigo,
		TipCer_codigo,
		Prof_nome_Cartorio,
		Prof_livro,
		Prof_folha,
		Prof_termo,
		Prof_datEmissao_certidao,
		Prof_Identidade,
		Prof_OrgEmissor,
		Prof_uf_codigo_orgao,
		Prof_dtEmissao_identidade,
		Prof_registro_conselho,
		Prof_Orgao_registro,
		Prof_tipo_nacionalidade,
		Pai_codigo,
		Pros_datEntrada,
		Prof_datNaturalizacao,
		Prof_portaria,
		Prof_titulo_eleitor,
		Prof_zona,
		Prof_secao,
		Prof_ctps,
		Prof_serie,
		Prof_uf_codigo_ctps,
		Prof_datEmissao_ctps,
		TipEsc_codigo,
		SitFam_codigo,
		Prof_ind_frequenta_escola,
		Prof_logradouro,
		Prof_num_logradouro,
		Prof_complemento,
		Prof_cep_sequencial,
		Prof_Banco,
		Prof_Agencia,
		Prof_conta_corrente,
		Prof_DDD,
		Prof_telefone,
		prof_codigoRH
               ,Cod_SUS_Tiplogr,
   		Prof_Carga_Horaria_Ambulatorial,
		Prof_Carga_Horaria_Hospitalar,
		Prof_Carga_Horaria_Outros,
		Prof_Cadastramento_SUS
		)
	VALUES	
		(
		@prof_codigo,
		@prof_nome,
		@prof_cpf, 
		@usuario,
		@Prof_PisPasep,
		@Prof_sexo,
		@Prof_nome_Mae,
		@Prof_nome_Pai,
		@Prof_datNascimento,
		@Prof_mun_codigo_nascimento,
		@Prof_uf_codigo_nascimento,
		@Rac_codigo,
		@TipCer_codigo,
		@Prof_nome_Cartorio,
		@Prof_livro,
		@Prof_folha,
		@Prof_termo,
		@Prof_datEmissao_certidao,
		@Prof_Identidade,
		@Prof_OrgEmissor,
		@Prof_uf_codigo_orgao,
		@Prof_dtEmissao_identidade,
		@Prof_registro_conselho,
		@Prof_Orgao_registro,
		@Prof_tipo_nacionalidade,
		@Pai_codigo,
		@Pros_datEntrada,
		@Prof_datNaturalizacao,
		@Prof_portaria,
		@Prof_titulo_eleitor,
		@Prof_zona,
		@Prof_secao,
		@Prof_ctps,
		@Prof_serie,
		@Prof_uf_codigo_ctps,
		@Prof_datEmissao_ctps,
		@TipEsc_codigo,
		@SitFam_codigo,
		@Prof_ind_frequenta_escola,
		@Prof_logradouro,
		@Prof_num_logradouro,
		@Prof_complemento,
		@Prof_cep_sequencial,
		@Prof_Banco,
		@Prof_Agencia,
		@Prof_conta_corrente,
		@Prof_DDD,
		@Prof_telefone,
		@prof_codigoRH
               ,@Cod_SUS_Tiplogr,
   		@Prof_Carga_Horaria_Ambulatorial,
		@Prof_Carga_Horaria_Hospitalar,
		@Prof_Carga_Horaria_Outros,
		@Prof_Cadastramento_SUS
		)

        SELECT @prof_codigo PROF_CODIGO

   END

------------------------Alteracao-----------------------------------------
IF (@opcao = 2)
   BEGIN
	UPDATE profissional_rede 
           SET 
		prof_CNS			= 	@prof_CNS,
		prof_nome 			= 	@prof_nome,
		prof_cpf 			= 	@prof_cpf,
		usu_codigo 			= 	@usuario,
		Prof_PisPasep 			=	@Prof_PisPasep,
		Prof_sexo 			=	@Prof_sexo,
		Prof_nome_Mae 			=	@Prof_nome_Mae,
		Prof_nome_Pai 			=	@Prof_nome_Pai,
		Prof_datNascimento 		=	@Prof_datNascimento,
		Prof_mun_codigo_nascimento 	= 	@Prof_mun_codigo_nascimento,
		Prof_uf_codigo_nascimento 	= 	@Prof_uf_codigo_nascimento,
		Rac_codigo 			=	@Rac_codigo,
		TipCer_codigo 			=	@TipCer_codigo,
		Prof_nome_Cartorio 		=	@Prof_nome_Cartorio,
		Prof_livro 			=	@Prof_livro,
		Prof_folha 			=	@Prof_folha,
		Prof_termo 			=	@Prof_termo,
		Prof_datEmissao_certidao 	= 	@Prof_datEmissao_certidao,
		Prof_Identidade 		=	@Prof_Identidade,
		Prof_OrgEmissor 		=	@Prof_OrgEmissor,
		Prof_uf_codigo_orgao 		=	@Prof_uf_codigo_orgao,
		Prof_dtEmissao_identidade 	= 	@Prof_dtEmissao_identidade,
		Prof_registro_conselho		=	@Prof_registro_conselho,
		Prof_Orgao_registro		=	@Prof_Orgao_registro,
		Prof_tipo_nacionalidade 	= 	@Prof_tipo_nacionalidade,
		Pai_codigo 			=	@Pai_codigo,
		Pros_datEntrada 		=	@Pros_datEntrada,
		Prof_datNaturalizacao 		= 	@Prof_datNaturalizacao,
		Prof_portaria 			=	@Prof_portaria,
		Prof_titulo_eleitor 		=	@Prof_titulo_eleitor,
		Prof_zona 			=	@Prof_zona,
		Prof_secao 			= 	@Prof_secao,
		Prof_ctps 			=	@Prof_ctps,
		Prof_serie 			=	@Prof_serie,
		Prof_uf_codigo_ctps 		=	@Prof_uf_codigo_ctps,
		Prof_datEmissao_ctps 		=	@Prof_datEmissao_ctps,
		TipEsc_codigo 			=	@TipEsc_codigo,
		SitFam_codigo 			=	@SitFam_codigo,
		Prof_ind_frequenta_escola 	= 	@Prof_ind_frequenta_escola,
		Prof_logradouro 		=	@Prof_logradouro,
		Prof_num_logradouro 		=	@Prof_num_logradouro,
		Prof_complemento 		= 	@Prof_complemento,
		Prof_cep_sequencial 		= 	@Prof_cep_sequencial,
		Prof_Banco 			=	@Prof_Banco,
		Prof_Agencia 			=	@Prof_Agencia,
		Prof_conta_corrente		=	@Prof_conta_corrente,
		Prof_DDD 			=	@Prof_DDD,
		Prof_telefone 			=	@Prof_telefone,
		prof_codigoRH			=	@prof_codigoRH
               ,Cod_SUS_Tiplogr                 =       @Cod_SUS_Tiplogr,
   		Prof_Carga_Horaria_Ambulatorial =	@Prof_Carga_Horaria_Ambulatorial,
		Prof_Carga_Horaria_Hospitalar   =	@Prof_Carga_Horaria_Hospitalar,
		Prof_Carga_Horaria_Outros	=	@Prof_Carga_Horaria_Outros,
		Prof_Cadastramento_SUS		=   @Prof_Cadastramento_SUS

	 WHERE prof_codigo = @prof_codigo
   END

------------------------Exclusao Logica------------------------------------

if(@opcao = 3)
   BEGIN
	--Atualiza campo de prof_ativo - Prof. UpdCadastro
		DELETE FROM PROFISSIONAL_REDE
		WHERE PROF_CODIGO = @prof_codigo
   END

if(@opcao = 8)
   BEGIN
		Select prof_codigo FROM PROFISSIONAL_REDE
		WHERE usu_codigo = @usuario
		and prof_codigo <> @prof_codigo
		AND @usuario IS NOT NULL 
		AND @prof_codigo IS NOT NULL

   END

-------------------------- Profissional Ativo---------------------------------
if(@opcao = 9)
BEGIN 
    	SELECT 
		prof_nome, 
		set_descricao,
		prof_ativo
	FROM 	
		profissional_rede pr
		inner join profissional_lotacao pl on pr.prof_codigo = pl.prof_codigo
		inner join vwlocal_unidade l on pl.locatend_codigo = l.locatend_codigo
	WHERE 
		pl.prof_codigo = @prof_codigo
	AND 	pl.locatend_codigo = @locatend_codigo
    
END 


if(@opcao = 10)
BEGIN 
    	SELECT 
		pr.*, pra.prof_asseletronica
	FROM 	
		profissional_rede pr
		left join profissional_rede_assinatura pra on pr.prof_codigo = pra.prof_codigo
	WHERE 
		pr.prof_codigo = @prof_codigo

    
END 
-- -------------------------------------------------------------------------------------------------


if @opcao = 11
   BEGIN	
	set @Sql = 'SELECT distinct p.prof_codigo, p.prof_nome, p.prof_cpf, p.usu_codigo, u.usu_nome, p.prof_cns ' +
	           'FROM profissional_rede p left join usuario u on (p.usu_codigo = u.usu_codigo) ' + 
	           'WHERE 1=1 '	

	if @prof_codigo is not null
	   begin
	    Set @var1 = convert(varchar,@prof_codigo)
	    Exec ksp_ParametroPesquisa @var1,"p.prof_codigo",@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
	   end

	if @prof_nome is not null
	   begin
	    Set @var1 = convert(varchar,@prof_nome)
            Exec ksp_ParametroPesquisa @var1,"p.prof_nome" ,@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
           end
           
    if @prof_cpf is not null
	    begin
       	     Set @var1 = convert(varchar,@prof_cpf)
	     Exec ksp_ParametroPesquisa @var1,"p.prof_cpf" ,@tp_pesq, "t", @par output
	     Set @Sql = @Sql + ' AND ' + @par
	   end

	if @usu_nome is not null
	   begin
	    Set @var1 = convert(varchar,@usu_nome)
            Exec ksp_ParametroPesquisa @var1,"u.usu_nome" ,@tp_pesq, "t", @par output
     	    Set @Sql = @Sql + ' AND ' + @par
           end	

	exec(@Sql)
	
   END
----------------------------------------------------------------------------------------------------
if @opcao = 12
   BEGIN	
	set @Sql = 'SELECT * ' +
	           'FROM ecorh.dbo.ecorh_vw_funcionarioklinikos f ' + 
	           'WHERE numinternofuncionario = '	+ convert(varchar, @prof_codigoRH)

	exec(@Sql)
	
   END

----------------------------- VERIFICACAO DA AGENDA DE CONSULTAS ------------------------------

IF @OPCAO = 15

	BEGIN

		SELECT COUNT(PROF_CODIGO) AS CONSULTAS
		FROM 	AGENDA_CONSULTA
		WHERE 	PROF_CODIGO = @prof_codigo
	END

----------------------------- VERIFICACAO DE CPF ------------------------------

IF @OPCAO = 16

	BEGIN

		SELECT PROF_CODIGO, PROF_NOME
		FROM 	PROFISSIONAL_REDE
		WHERE 	PROF_CPF = @prof_CPF
	END
----------------------------------------------------------------------------------------------------
----------------------------- LISTA TODOS OS PROFISSIONAL ONDE O CPF É DIFERENTE DE NULL ------------------------------

IF @OPCAO = 18

	BEGIN

	 SELECT p.prof_codigo,
     p.atvprof_codigo, 
     p.prof_nome,
     p.prof_cpf,
     p.prof_codigoRH,
     p.prof_cns,
     p.usu_codigo,
     p.Prof_PisPasep,
     p.Prof_sexo,
     p.Prof_nome_Mae,
     p.Prof_nome_Pai,
     p.Prof_datNascimento,
     p.Prof_mun_codigo_nascimento, 
     p.Prof_uf_codigo_nascimento,
     p.Rac_codigo,
     p.TipCer_codigo,
     p.Prof_nome_Cartorio,
     p.Prof_livro,
     p.Prof_folha,
     p.Prof_termo,
     p.Prof_datEmissao_certidao,
     p.Prof_Identidade,
     p.Prof_OrgEmissor,
     p.Prof_uf_codigo_orgao,
     p.Prof_dtEmissao_identidade,
     p.Prof_Orgao_registro,
     p.Prof_tipo_nacionalidade,
     p.Pai_codigo,
     p.Pros_datEntrada,
     p.Prof_datNaturalizacao,
     p.Prof_portaria,
     p.Prof_titulo_eleitor,
     p.Prof_zona,
     p.Prof_secao,
     p.Prof_ctps,
     p.Prof_serie,
     p.Prof_uf_codigo_ctps,
     p.Prof_datEmissao_ctps,
     p.TipEsc_codigo,
     p.SitFam_codigo,
     p.Prof_ind_frequenta_escola,
     p.Prof_logradouro,
     p.Prof_num_logradouro,
     p.Prof_complemento,
     p.Prof_cep_sequencial,
     p.Prof_Banco,
     p.Prof_Agencia,
     p.Prof_conta_corrente,
     p.Prof_DDD,
     p.Prof_telefone,
     p.Cod_SUS_Tiplogr,
	 p.Prof_Carga_Horaria_Ambulatorial,
	 p.Prof_Carga_Horaria_Hospitalar,
	 p.Prof_Carga_Horaria_Outros,
	 p.prof_cadastramento_sus
   FROM profissional_rede p
     WHERE LEN(p.prof_cpf) > 0

	END
----------------------------------------------------------------------------------------------------


if (@@ERROR <> 0)
      	BEGIN
		Select @sql = 'ERRO - Tabela de Profissional. OpÃƒÂ§ÃƒÂ£o : ' + convert(varchar,@opcao)
         	RAISERROR(@sql,1,1)
         	 
      	END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Relatorio_Central_Boleto]...';


GO
ALTER PROCEDURE [dbo].[ksp_Relatorio_Central_Boleto]
@CODIGO CHAR (12), @AgdEve_TipoEvento CHAR (1)
AS
set nocount on

DECLARE @sql VARCHAR(4000)

	IF @AgdEve_TipoEvento = '1' --CONSULTA
		BEGIN
			SELECT 	RTRIM(UNID_MARC.UNID_DESCRICAO) UNIDADE,
				UNID_MARC.UNID_TELEFONE		UNID_FONE,
				CEP_UNID.CEP_LOGRADOURO + ', '
				+ UNID_MARC.UNID_ENDERECO_NUM	UNID_ENDERECO,

				'C'	TIPO,
				'COMPROVANTE DE AGENDAMENTO DE CONSULTA'  TITULO,

				ac.agd_sequencial 	NUMERO,
				ac.agdcon_senha  	SENHA,
				convert(char(10),ac.agd_datahora,103)	DATA,
				ac.agd_hora_marcada		HORA,
				Usu.USU_login			OPERADOR,
				convert(char(10),ac.agdcon_data_marcacao,103)	DATA_MARCACAO,
				CONVERT(CHAR(5),AC.agdcon_data_marcacao,108)	HORA_MARCACAO,
				CONVERT(CHAR(5),AC.agd_datahora,108) HORA_AGD,

				P.PAC_NOME			PACIENTE,
				CASE 
				  WHEN PIM.PacIdMun_Codigo IS NOT NULL THEN 'NR CARTAO MUNICIPAL:'
				  WHEN P.pac_cartao_nsaude IS NOT NULL THEN 'NR CARTAO NAC.SAUDE:'
				  WHEN P.PAC_CODIGO IS NOT NULL THEN 'NR PROVISORIO      :'
				END 				IDENTIFICACAO,

				case
				  WHEN PIM.PacIdMun_Codigo IS NOT NULL THEN PIM.PacIdMun_Codigo
				  WHEN P.pac_cartao_nsaude IS NOT NULL THEN P.pac_cartao_nsaude
				  WHEN P.PAC_CODIGO IS NOT NULL THEN P.PAC_CODIGO
				END 				CODIGO_PACIENTE,

				LOC.SET_DESCRICAO	CLINICA,
				PROF.PROF_NOME		MEDICO,
				space(50)			EXAME,
				AE.agdeve_Mensagem1,
				AE.agdeve_Mensagem2,
				AE.agdeve_Mensagem3,
				CASE	WHEN AC.AGD_TPHORARIO = 3 THEN '(EXTRA)'
				        ELSE ''
				END TipoHorario,
                cast('' as varchar (1)) as preparo,
				pp.Pac_Prontuario_Numero,
				ac.urlteleconsulta,
				ac.SenhaTeleConsulta,
				upr.cabecalho_report1, upr.cabecalho_report2,
				upr.cabecalho_report3, upr.logo

			From	agenda_consulta ac left join profissional prof on prof.locatend_codigo = ac.locatend_codigo and prof.prof_codigo = ac.prof_codigo
			  left join vwlocal_unidade loc on loc.locatend_codigo = ac.locatend_codigo
			  left join usuario usu on usu.usu_codigo = ac.usu_codigo
			  left join unidade UNID_MARC on UNID_MARC.UNID_CODIGO = loc.unid_codigo
			  left join cep CEP_UNID on CEP_UNID.cep_sequencial = UNID_MARC.cep_sequencial
			  left join municipio MUN_UNID on MUN_UNID.mun_codigo = CEP_UNID.mun_codigo
			  LEFT JOIN paciente p on p.pac_codigo = ac.pac_codigo
			  left join PACIENTE_IDENTIFICACAO_MUNICIPIO PIM on PIM.pac_codigo = p.pac_codigo
			  left join AGENDA_EVENTOS AE ON AE.AgdEve_Codigo = AC.AgdEve_Codigo
			  LEFT JOIN Paciente_Prontuario pp ON p.pac_codigo = pp.pac_codigo and pp.unid_codigo = ac.unid_codigo
			  LEFT JOIN unidade_parametro_relatorio upr ON upr.unid_codigo = loc.unid_codigo
				
			WHERE ac.agd_sequencial = @CODIGO
		END
	
	IF @AgdEve_TipoEvento = '9' --TELECONSULTA
		BEGIN
			SELECT 	RTRIM(UNID_MARC.UNID_DESCRICAO) UNIDADE,
				UNID_MARC.UNID_TELEFONE		UNID_FONE,
				CEP_UNID.CEP_LOGRADOURO + ', '
				+ UNID_MARC.UNID_ENDERECO_NUM	UNID_ENDERECO,

				'C'	TIPO,
				'COMPROVANTE DE AGENDAMENTO DE TELECONSULTA'  TITULO,

				ac.agd_sequencial 	NUMERO,
				ac.agdcon_senha  	SENHA,
				convert(char(10),ac.agd_datahora,103)	DATA,
				ac.UrlTeleConsulta		HORA,
				Usu.USU_login			OPERADOR,
				convert(char(10),ac.agdcon_data_marcacao,103)	DATA_MARCACAO,
				CONVERT(CHAR(5),AC.agdcon_data_marcacao,108)	HORA_MARCACAO,
				CONVERT(CHAR(5),AC.agd_datahora,108) HORA_AGD,

				P.PAC_NOME			PACIENTE,
				CASE 
				  WHEN PIM.PacIdMun_Codigo IS NOT NULL THEN 'NR CARTAO MUNICIPAL:'
				  WHEN P.pac_cartao_nsaude IS NOT NULL THEN 'NR CARTAO NAC.SAUDE:'
				  WHEN P.PAC_CODIGO IS NOT NULL THEN 'NR PROVISORIO      :'
				END 				IDENTIFICACAO,

				case
				  WHEN PIM.PacIdMun_Codigo IS NOT NULL THEN PIM.PacIdMun_Codigo
				  WHEN P.pac_cartao_nsaude IS NOT NULL THEN P.pac_cartao_nsaude
				  WHEN P.PAC_CODIGO IS NOT NULL THEN P.PAC_CODIGO
				END 				CODIGO_PACIENTE,

				LOC.SET_DESCRICAO	CLINICA,
				PROF.PROF_NOME		MEDICO,
				space(50)			EXAME,
				AE.agdeve_Mensagem1,
				AE.agdeve_Mensagem2,
				AE.agdeve_Mensagem3,
				AC.SenhaTeleConsulta AS TipoHorario,
                cast('' as varchar (1)) as preparo,
				pp.Pac_Prontuario_Numero,
				ac.urlteleconsulta,
				ac.SenhaTeleConsulta,
				upr.cabecalho_report1, upr.cabecalho_report2,
				upr.cabecalho_report3, upr.logo

			From	agenda_consulta ac left join profissional prof on prof.locatend_codigo = ac.locatend_codigo and prof.prof_codigo = ac.prof_codigo
			  left join vwlocal_unidade loc on loc.locatend_codigo = ac.locatend_codigo
			  left join usuario usu on usu.usu_codigo = ac.usu_codigo
			  left join unidade UNID_MARC on UNID_MARC.UNID_CODIGO = loc.unid_codigo
			  left join cep CEP_UNID on CEP_UNID.cep_sequencial = UNID_MARC.cep_sequencial
			  left join municipio MUN_UNID on MUN_UNID.mun_codigo = CEP_UNID.mun_codigo
			  LEFT JOIN paciente p on p.pac_codigo = ac.pac_codigo
			  left join PACIENTE_IDENTIFICACAO_MUNICIPIO PIM on PIM.pac_codigo = p.pac_codigo
			  left join AGENDA_EVENTOS AE ON AE.AgdEve_Codigo = AC.AgdEve_Codigo
			  LEFT JOIN Paciente_Prontuario pp ON p.pac_codigo = pp.pac_codigo and pp.unid_codigo = ac.unid_codigo
			  LEFT JOIN unidade_parametro_relatorio upr ON upr.unid_codigo = loc.unid_codigo
				
			WHERE ac.agd_sequencial = @CODIGO
		END

	IF @AgdEve_TipoEvento <> '1' AND @AgdEve_TipoEvento <> '9' --Exames
		BEGIN

			SET @sql =   ' SELECT 	RTRIM(UNID_MARC.UNID_DESCRICAO) UNIDADE, '
			SET @sql = @sql +  ' 	UNID_MARC.UNID_TELEFONE		UNID_FONE, '
			SET @sql = @sql +  ' 	CEP_UNID.CEP_LOGRADOURO + '', '' +  UNID_MARC.UNID_ENDERECO_NUM	UNID_ENDERECO, '

			SET @sql = @sql +  ' 	''E''		TIPO, '
			SET @sql = @sql +  ' 	''COMPROVANTE DE AGENDAMENTO DE EXAME''	TITULO, '

			SET @sql = @sql +  ' 	ae.AgeExa_Codigo 	NUMERO, '
			SET @sql = @sql +  ' 	ae.AgeExa_Senha  	SENHA, '

			SET @sql = @sql +  ' 	convert(char(10),ae.AgeExa_DataHora,103)		DATA, '
			--SET @sql = @sql +  ' 	AgeExa_hora_marcada 		HORA, '
			SET @sql = @sql +  ' 	convert(char(10),ae.AgeExa_DataHora,108)  		HORA, '

			SET @sql = @sql +  ' 	Usu.USU_login	OPERADOR, '
			SET @sql = @sql +  ' 	CONVERT(CHAR(10),ae.AgeExa_DataHora_Marcacao,103)	DATA_MARCACAO, '
			SET @sql = @sql +  ' 	CONVERT(CHAR(5),ae.AgeExa_DataHora_Marcacao,108)	HORA_MARCACAO, '

			SET @sql = @sql +  ' 	P.PAC_NOME		PACIENTE, '
			SET @sql = @sql +  ' 	CASE '
			SET @sql = @sql +  ' 	WHEN PIM.PacIdMun_Codigo IS NOT NULL THEN ''NR CARTAO MUNICIPAL:'' '
			SET @sql = @sql +  ' 	WHEN P.pac_cartao_nsaude IS NOT NULL THEN ''NR CARTAO NAC.SAUDE:'' '
			SET @sql = @sql +  ' 	WHEN P.PAC_CODIGO IS NOT NULL THEN ''NR PROVISORIO:      '' '
			SET @sql = @sql +  ' 	END 				IDENTIFICACAO, '

			SET @sql = @sql +  ' 	case '
			SET @sql = @sql +  ' 	WHEN PIM.PacIdMun_Codigo IS NOT NULL THEN PIM.PacIdMun_Codigo '
			SET @sql = @sql +  ' 	WHEN P.pac_cartao_nsaude IS NOT NULL THEN P.pac_cartao_nsaude '
			SET @sql = @sql +  ' 	WHEN P.PAC_CODIGO IS NOT NULL THEN P.PAC_CODIGO '
			SET @sql = @sql +  ' 	END 				CODIGO_PACIENTE, '

			SET @sql = @sql +  ' 	space(50)	CLINICA, '
			SET @sql = @sql +  ' 	space(50)	MEDICO, '
			SET @sql = @sql +  ' 	spe.solpedexa_Codigo_Exame + ''-'' + spe.solpedexa_descricao EXAME, '
			SET @sql = @sql +  ' 	AEV.agdeve_Mensagem1, '
			SET @sql = @sql +  ' 	AEV.agdeve_Mensagem2, '
			SET @sql = @sql +  ' 	AEV.agdeve_Mensagem3, '
			SET @sql = @sql +  ' 	'''' TipoHorario, '


            if @AgdEve_TipoEvento = '7'
                SET @sql = @sql +  ' isnull(el.exalab_Preparo,'''') preparo, '

            if @AgdEve_TipoEvento = '8'
                SET @sql = @sql +  ' case when er.impressaopreparo = ''A'' then isnull(er.preparo, '''')  end preparo, ' 

            if @AgdEve_TipoEvento = '9'
                SET @sql = @sql +  ' '''' as preparo, ' 
  

            if @AgdEve_TipoEvento <> '1' and @AgdEve_TipoEvento <> '7' and @AgdEve_TipoEvento <> '8' and @AgdEve_TipoEvento <> '9'
                SET @sql = @sql +  ' '''' as preparo, ' 

            SET @sql = @sql +  ' 	pp.Pac_Prontuario_Numero, '

			SET @sql = @sql +  ' 	upr.cabecalho_report1, upr.cabecalho_report2, upr.cabecalho_report3, upr.logo '

			SET @sql = @sql +  ' From agenda_exame ae '
			SET @sql = @sql +  ' left join usuario usu on usu.usu_codigo = ae.usu_codigo '
			SET @sql = @sql +  ' left join unidade UNID_MARC on UNID_MARC.unid_codigo = ae.unid_codigo '
			SET @sql = @sql +  ' left join cep CEP_UNID on CEP_UNID.cep_sequencial = UNID_MARC.cep_sequencial '
			SET @sql = @sql +  ' left join municipio MUN_UNID on MUN_UNID.mun_codigo = CEP_UNID.mun_codigo '
			SET @sql = @sql +  ' LEFT JOIN paciente p on p.pac_codigo = ae.pac_codigo '
			SET @sql = @sql +  ' left join PACIENTE_IDENTIFICACAO_MUNICIPIO PIM on PIM.pac_codigo = p.pac_codigo '
			SET @sql = @sql +  ' LEFT JOIN solicitacao_pedido_exame spe on spe.ped_codigo = ae.ped_codigo '

            --if @AgdEve_TipoEvento <> '7'
            --    SET @sql = @sql +  ' and spe.solpedexa_Codigo_Exame = ae.solpedexa_Codigo_Exame '

			SET @sql = @sql +  ' left join AGENDA_EVENTOS AEV ON AEV.AgdEve_Codigo = AE.AgdEve_Codigo '
			SET @sql = @sql +  ' LEFT JOIN Paciente_Prontuario pp ON p.pac_codigo = pp.pac_codigo and pp.unid_codigo = ae.unid_codigo '

            if @AgdEve_TipoEvento = '7'
                SET @sql = @sql +  ' join exame_laboratorio el on el.exalab_codigo = spe.solpedexa_Codigo_Exame '

            if @AgdEve_TipoEvento = '8'
                SET @sql = @sql +  ' join exame_radiologico er on er.exarad_codigo = spe.solpedexa_Codigo_Exame '

			SET @sql = @sql +  ' LEFT JOIN unidade_parametro_relatorio upr ON upr.unid_codigo = UNID_MARC.unid_codigo  '

			SET @sql = @sql +  ' WHERE ae.AgeExa_Codigo = ''' + @CODIGO + ''''
			
			print(@sql)

            execute (@sql)
		END


If (@@ERROR <> 0)
   BEGIN
	RAISERROR('ERRO - ksp_Relatorio_Central_Boleto.',1,1)
   END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[KSP_Baixa_Automatica_EvolucaoUti]...';


GO
ALTER PROCEDURE [dbo].[KSP_Baixa_Automatica_EvolucaoUti]  
    @PROF_CODIGO CHAR(4) = null,  
 @LOCAL_ATENDIMENTO CHAR(4) = null,  
 @INTER_CODIGO CHAR(12) = null,  
 @EVOLUCAO_ATUAL INT = null,  
 @BAIXAR_TODOS CHAR(1) = 'N'  
      
    AS   
 BEGIN  
  
 DECLARE @TIPPROF_CODIGO CHAR(4) = null  
 DECLARE @COD_CBO CHAR(6) = null  
   
 IF(@BAIXAR_TODOS = 'N')  
   BEGIN  
   SELECT @TIPPROF_CODIGO = TIPPROF_CODIGO, @COD_CBO = CBO_CODIGO  FROM profissional_lotacao WHERE PROF_CODIGO = @PROF_CODIGO AND LOCATEND_CODIGO = @LOCAL_ATENDIMENTO  
   

   UPDATE EvolucaoUtiIntercorrencia 
     SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE prof_codigo IN (SELECT PROF_CODIGO FROM profissional_lotacao WHERE  TIPPROF_CODIGO = @TIPPROF_CODIGO AND CBO_CODIGO = @COD_CBO AND prof_ativo = 'S')  
   AND INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
   AND evouti_codigo NOT IN (@EVOLUCAO_ATUAL)  

   UPDATE EvolucaoUtiDiurna  
     SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE prof_codigo IN (SELECT PROF_CODIGO FROM profissional_lotacao WHERE  TIPPROF_CODIGO = @TIPPROF_CODIGO AND CBO_CODIGO = @COD_CBO AND prof_ativo = 'S')  
   AND INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
   AND evouti_codigo NOT IN (@EVOLUCAO_ATUAL)  
  
   UPDATE EvolucaoUtiNoturna  
      SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE prof_codigo IN (SELECT PROF_CODIGO FROM profissional_lotacao WHERE  TIPPROF_CODIGO = @TIPPROF_CODIGO AND CBO_CODIGO = @COD_CBO AND prof_ativo = 'S')  
   AND INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
         AND evouti_codigo NOT IN (@EVOLUCAO_ATUAL)  
  
   UPDATE UPA_Evolucao  
      SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE prof_codigo IN (SELECT PROF_CODIGO FROM profissional_lotacao WHERE  TIPPROF_CODIGO = @TIPPROF_CODIGO AND CBO_CODIGO = @COD_CBO AND prof_ativo = 'S')  
   AND INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
   AND upaevo_codigo NOT IN (@EVOLUCAO_ATUAL)  
     END   
     IF(@BAIXAR_TODOS = 'S')   
  BEGIN  
   UPDATE EvolucaoUtiDiurna  
     SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE  INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
     
  
   UPDATE EvolucaoUtiNoturna  
      SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE  INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
           
  
   UPDATE UPA_Evolucao  
      SET Rascunho = 0, FECHAMENTO_AUTOMATICO = 'S'  
   WHERE  INTER_CODIGO = @INTER_CODIGO  
   AND ISNULL(RASCUNHO,0) = 1  
     
  END   
 END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Evolucao_Uti_Diurna]...';


GO
ALTER PROCEDURE [dbo].[ksp_Evolucao_Uti_Diurna]
@evouti_codigo int  = null, @DataInclusao datetime = null, @inter_codigo char(12) = null, @prof_codigo char(4) = null,
@locatend_codigo char(4) = null, @Diagnosticos varchar(8000) = null, @ExamesComplementares varchar(500) = null, @Acessos varchar(200) = null, @Drenos varchar(100) = null, 
@Dripping varchar(100) = null, @Antibioticos varchar(200) = null, @Pas varchar(100) = null, @Pad varchar(100) = null, @Pam varchar(100) = null, @Fc varchar(100) = null, 
@Pic varchar(100) = null, @Tax varchar(100) = null, @Spo2 varchar(100) = null, @Hgt varchar(100) = null, @Insul varchar(100) = null, @Fr varchar(100) = null, 
@Entradas varchar(4) = null, @saidas varchar(4) = null, @diurese1 varchar(4) = null, @diurese2 varchar(100) = null, @hemodialise varchar(4) = null, 
@rg varchar(100) = null, @FuncaoIntestinal varchar(100) = null, @Outros varchar(4) = null, @total varchar(100) = null, @Modalidade varchar(30) = null, @PesoPredito varchar(100) = null, 
@PInspPSup varchar(100) = null, @Peep varchar(30) = null, @Vc varchar(30) = null, @Fio2 varchar(30) = null, @FrVentilatorios varchar(100) = null, @TInsp varchar(100) = null, 
@ExameFisico varchar(2000) = null, @Condutas varchar(2000) = null, @opcao int = null, @Rascunho bit= null, @OrigemCopiaID int = null, @Cultura varchar(200) = null, @Covid varchar(200) = null,
@Modelo varchar(30) = null, @SatO2ParVet varchar(30) = null, @Pf varchar(30) = null
as 
BEGIN
	IF (@opcao = 0)
	BEGIN 
		select evouti_codigo
			,DataInclusao
			,inter_codigo
			,prof_codigo
			,locatend_codigo
			,Diagnosticos
			,ExamesComplementares
			,Acessos
			,Drenos
			,Dripping
			,Antibioticos
			,Pas
			,Pad
			,Pam
			,Fc
			,Pic
			,Tax
			,Spo2
			,Hgt
			,Insul
			,Fr
			,Entradas
			,saidas
			,diurese1
			,diurese2
			,hemodialise
			,rg
			,FuncaoIntestinal
			,total
			,Modalidade
			,PesoPredito
			,PInspPSup
			,Peep
			,Vc
			,Fio2
			,FrVentilatorios
			,TInsp
			,ExameFisico
			,Condutas
			,Outros
			,isnull(Rascunho,0) as 'Rascunho'
			,DataUltimaAlteracao 
			,OrigemCopiaID
			,Cultura
			, Covid
			, Modelo
			, SatO2ParVet
			, PF
		from EvolucaoUtiDiurna 
		where (evouti_codigo = @evouti_codigo or @evouti_codigo is null)
		and (inter_codigo = @inter_codigo or @inter_codigo is null)
		order by DataInclusao desc
	END

	IF (@opcao = 1)
	BEGIN
		insert into EvolucaoUtiDiurna 
		(DataInclusao, inter_codigo, prof_codigo, locatend_codigo, Diagnosticos, ExamesComplementares, Acessos, Drenos, 
		 Dripping, Antibioticos, Pas, Pad, Pam, Fc, Pic, Tax, Spo2, Hgt, Insul, Fr, Entradas, saidas, diurese1, diurese2, hemodialise, rg, 
		 FuncaoIntestinal, Outros, total, Modalidade, PesoPredito, PInspPSup, Peep, Vc, Fio2, FrVentilatorios, TInsp, ExameFisico, Condutas, Rascunho, FECHAMENTO_AUTOMATICO, OrigemCopiaID,
		 Cultura, Covid, Modelo, SatO2ParVet, PF) 
		values 
		(@DataInclusao, @inter_codigo, @prof_codigo, @locatend_codigo, @Diagnosticos, @ExamesComplementares, @Acessos, @Drenos, 
		 @Dripping, @Antibioticos, @Pas, @Pad, @Pam, @Fc, @Pic, @Tax, @Spo2, @Hgt, @Insul, @Fr, @Entradas, @saidas, @diurese1, @diurese2, @hemodialise, @rg, 
		 @FuncaoIntestinal, @Outros, @total, @Modalidade, @PesoPredito, @PInspPSup, @Peep, @Vc, @Fio2, @FrVentilatorios, @TInsp, @ExameFisico, @Condutas, @Rascunho, CASE WHEN ISNULL(@Rascunho,0) = 0 THEN 'N' ELSE NULL END, @OrigemCopiaID,
		 @Cultura, @Covid, @Modelo, @SatO2ParVet, @PF) 

		  select @evouti_codigo = IDENT_CURRENT('EvolucaoUtiDiurna')
		  select IDENT_CURRENT('EvolucaoUtiDiurna')
		  if(@inter_codigo is not null)
		  begin 
		   EXEC  KSP_Baixa_Automatica_EvolucaoUti @prof_codigo, @locatend_codigo, @inter_codigo, @evouti_codigo
		  end 
	END

	IF (@opcao = 2)
	BEGIN
		update EvolucaoUtiDiurna
		set  inter_codigo = @inter_codigo, prof_codigo = @prof_codigo, 
			 locatend_codigo = @locatend_codigo, Diagnosticos = @Diagnosticos, ExamesComplementares = @ExamesComplementares, Acessos = @Acessos, Drenos = @Drenos, 
			 Dripping = @Dripping, Antibioticos = @Antibioticos, Pas = @Pas, Pad = @Pad, Pam = @Pam, Fc = @Fc, Pic = @Pic, Tax = @Tax, Spo2 = @Spo2, Hgt = @Hgt, Insul = @Insul, 
			 Fr = @Fr, Entradas = @Entradas, saidas = @saidas, diurese1 = @diurese1, diurese2 = @diurese2, hemodialise = @hemodialise, rg = @rg, FuncaoIntestinal = @FuncaoIntestinal, Outros = @Outros, total = @total, 
			 Modalidade = @Modalidade, PesoPredito = @PesoPredito, PInspPSup = @PInspPSup, Peep = @Peep, Vc = @Vc, Fio2 = @Fio2, FrVentilatorios = @FrVentilatorios, TInsp = @TInsp, ExameFisico = @ExameFisico, Condutas = @Condutas, 
			 Rascunho = @Rascunho,  DataUltimaAlteracao = getdate(), FECHAMENTO_AUTOMATICO = CASE WHEN ISNULL(@Rascunho,0) = 0 THEN 'N' ELSE NULL END,
			 Cultura = @Cultura, Covid = @Covid, Modelo = @Modelo, SatO2ParVet = @SatO2ParVet, PF = @PF
		where evouti_codigo = @evouti_codigo

		  if(@inter_codigo is not null)
		  begin 
		   EXEC  KSP_Baixa_Automatica_EvolucaoUti @prof_codigo, @locatend_codigo, @inter_codigo, @evouti_codigo
		  end 
	END
	IF (@opcao = 3)
	BEGIN 
		select * from EvolucaoUtiDiurna
	END
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_UPA_Evolucao]...';


GO
ALTER PROCEDURE [dbo].[ksp_UPA_Evolucao]
@UPAEVO_CODIGO INT, 
@UPAEVO_DATAHORA DATETIME, 
@UPAEVO_DESCRICAO VARCHAR (2000),
@PROF_CODIGO CHAR (4), 
@LOCATEND_CODIGO CHAR (4), 
@ATENDAMB_CODIGO CHAR (12), 
@upaevo_pa VARCHAR (50), 
@upaevo_pulso VARCHAR (50), 
@upaevo_frequencia_respiratoria VARCHAR (50), 
@upaevo_temperatura VARCHAR (50), 
@upaevo_satO2 VARCHAR (50), 
@upaevo_hgt VARCHAR (50), 
@cid_codigo_primario CHAR (9), 
@cid_codigo_secundario CHAR (9), 
@inter_codigo CHAR (12), 
@upaevo_temperatura_local INT, 
@upaevo_pa_sistolica VARCHAR (3), 
@upaevo_pa_diastolica VARCHAR (3), 
@upaevo_pa_posicao INT, 
@upaevo_pa_local INT, 
@upaevo_frequencia_cardiaca VARCHAR (50), 
@upaevo_frequencia_respiratoria_ritmo INT, 
@upaevo_frequencia_respiratoria_expansibilidade INT, 
@tp_pesq SMALLINT=NULL, 
@opcao SMALLINT, 
@TipoEvolucao VARCHAR (30),
@proc_codigo CHAR(10) = null, --Adicionado
@spa_codigo char(12) = null,
@emer_codigo char(12) = null,
@upaevo_tipo_local char(1) = null,
@upaevo_escalador int = null,
@Rascunho bit = null,
@Upaevo_CodigoOrigemCopia int = null
AS
DECLARE @SQL  VARCHAR(8000)

If @opcao = 0
BEGIN

Set @SQL = 'SELECT '
Set @SQL = @SQL + ' E.UPAEVO_CODIGO, E.ATENDAMB_CODIGO, E.UPAEVO_DATAHORA, E.UPAEVO_DESCRICAO, E.PROF_CODIGO, E.LOCATEND_CODIGO, '	
Set @SQL = @SQL + ' P.PROF_NOME, LU.SET_DESCRICAO, E.UPAEVO_PA, E.UPAEVO_PULSO, E.UPAEVO_FREQUENCIA_RESPIRATORIA, '
Set @SQL = @SQL + ' E.UPAEVO_TEMPERATURA, E.UPAEVO_SATO2, E.UPAEVO_HGT, E.CID_CODIGO_PRIMARIO, E.CID_CODIGO_SECUNDARIO, E.INTER_CODIGO, '
SET @SQL = @SQL + ' E.UPAEVO_TEMPERATURA_LOCAL, E.UPAEVO_PA_SISTOLICA, E.UPAEVO_PA_DIASTOLICA, E.UPAEVO_PA_POSICAO, E.UPAEVO_PA_LOCAL, e.upaevo_tipo_local, e.upaevo_escalador,'
SET @SQL = @SQL + ' E.UPAEVO_FREQUENCIA_CARDIACA, E.UPAEVO_FREQUENCIA_RESPIRATORIA_RITMO, E.UPAEVO_FREQUENCIA_RESPIRATORIA_EXPANSIBILIDADE, E.Tipo, e.proc_codigo, lu.LocAtend_descricao, pl.prof_registro_conselho as prof_numconselho, T.NO_OCUPACAO AS "tipprof_descricao",  isnull(E.rascunho, 0) as Rascunho' --Alterado
Set @SQL = @SQL + ' FROM '
Set @SQL = @SQL + ' UPA_EVOLUCAO E '
Set @SQL = @SQL + ' LEFT JOIN ATENDIMENTO_AMBULATORIAL AA ON E.ATENDAMB_CODIGO = AA.ATENDAMB_CODIGO '
Set @SQL = @SQL + ' INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = E.PROF_CODIGO '
Set @SQL = @SQL + ' INNER JOIN PROFISSIONAL_LOTACAO PL ON PL.PROF_CODIGO = E.PROF_CODIGO and pl.locatend_codigo = e.locatend_codigo' -- Alterado
Set @SQL = @SQL + ' INNER JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = E.LOCATEND_CODIGO '
SET @SQL = @SQL + ' INNER JOIN Tipo_Profissional TP ON TP.tipprof_codigo = PL.tipprof_codigo '
SET @SQL = @SQL + 'INNER JOIN TB_OCUPACAO T ON T.CO_OCUPACAO = PL.cbo_codigo'
Set @SQL = @SQL + ' WHERE 1 = 1 '

If @ATENDAMB_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.ATENDAMB_CODIGO = ''' + @ATENDAMB_CODIGO + ''''
  End

If @UPAEVO_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.UPAEVO_CODIGO = ' + CONVERT(VARCHAR,@UPAEVO_CODIGO)
  End

If @INTER_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.INTER_CODIGO = ''' + @INTER_CODIGO + ''''
  End

  If @PROF_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.PROF_CODIGO = ''' + @PROF_CODIGO + ''''
  End

  if @TipoEvolucao is not null
  begin 
	set @SQL = @SQL + 'and e.tipo = ''' + @TipoEvolucao + ''''
  end

Set @SQL = @SQL + '	ORDER BY UPAEVO_DATAHORA DESC '

print (@SQL)
EXEC (@SQL)

END

IF @opcao = 1
BEGIN

	INSERT INTO UPA_EVOLUCAO (
		ATENDAMB_CODIGO		, 
		UPAEVO_DATAHORA		,
		UPAEVO_DESCRICAO	,
		PROF_CODIGO		,
		LOCATEND_CODIGO		,
		upaevo_pa	        ,
	   	upaevo_pulso       ,
	   	upaevo_frequencia_respiratoria ,
	   	upaevo_temperatura  ,
	   	upaevo_satO2        ,
	   	upaevo_hgt          ,
	   	cid_codigo_primario ,
	   	cid_codigo_secundario,
	   	inter_codigo,
		upaevo_temperatura_local,
		upaevo_pa_sistolica,
		upaevo_pa_diastolica,
		upaevo_pa_posicao,
		upaevo_pa_local,
		upaevo_frequencia_cardiaca,
		upaevo_frequencia_respiratoria_ritmo,
		upaevo_frequencia_respiratoria_expansibilidade,
		Tipo,
		proc_codigo,
		upaevo_tipo_local,
		upaevo_escalador,
		Rascunho,
		FECHAMENTO_AUTOMATICO,
		Upaevo_CodigoOrigemCopia) --Alterado
	VALUES (
		@ATENDAMB_CODIGO	, 
		@UPAEVO_DATAHORA	,
		@UPAEVO_DESCRICAO	,
		@PROF_CODIGO		,
		@LOCATEND_CODIGO	,
		@upaevo_pa	        ,
	   	@upaevo_pulso       ,
	   	@upaevo_frequencia_respiratoria ,
	   	@upaevo_temperatura  ,
	   	@upaevo_satO2        ,
	   	@upaevo_hgt          ,
	   	@cid_codigo_primario ,
	   	@cid_codigo_secundario,
	   	@inter_codigo,
		@upaevo_temperatura_local,
		@upaevo_pa_sistolica,
		@upaevo_pa_diastolica,
		@upaevo_pa_posicao,
		@upaevo_pa_local,
		@upaevo_frequencia_cardiaca,
		@upaevo_frequencia_respiratoria_ritmo,
		@upaevo_frequencia_respiratoria_expansibilidade,
		@TipoEvolucao,
		@proc_codigo,
		@upaevo_tipo_local,
		@upaevo_escalador,
		@Rascunho,
		CASE WHEN ISNULL(@Rascunho,0) = 0 THEN 'N' ELSE NULL END,
		@Upaevo_CodigoOrigemCopia)
	
   select @UPAEVO_CODIGO = IDENT_CURRENT('UPA_EVOLUCAO')
   select IDENT_CURRENT('UPA_EVOLUCAO')
	
	 if(@inter_codigo is not null)
		  begin 
		   EXEC  KSP_Baixa_Automatica_EvolucaoUti @prof_codigo, @LOCATEND_CODIGO, @inter_codigo, @UPAEVO_CODIGO
		  end 

END

IF @OPCAO = 3
BEGIN 
UPDATE UPA_EVOLUCAO SET	ATENDAMB_CODIGO	= @ATENDAMB_CODIGO,
		UPAEVO_DATAHORA	= @UPAEVO_DATAHORA,
		UPAEVO_DESCRICAO = @UPAEVO_DESCRICAO,
		PROF_CODIGO	= @PROF_CODIGO,
		LOCATEND_CODIGO	= @LOCATEND_CODIGO,
		upaevo_pa = @upaevo_pa,
	   	upaevo_pulso = @upaevo_pulso     ,
	   	upaevo_frequencia_respiratoria = @upaevo_frequencia_respiratoria,
	   	upaevo_temperatura = @upaevo_temperatura,
	   	upaevo_satO2 = @upaevo_satO2,
	   	upaevo_hgt = @upaevo_hgt,
	   	cid_codigo_primario = @cid_codigo_primario,
	   	cid_codigo_secundario = @cid_codigo_secundario,
	   	inter_codigo = @inter_codigo,
		upaevo_temperatura_local = @upaevo_temperatura_local,
		upaevo_pa_sistolica = @upaevo_pa_sistolica,
		upaevo_pa_diastolica = @upaevo_pa_diastolica,
		upaevo_pa_posicao = @upaevo_pa_posicao,
		upaevo_pa_local = @upaevo_pa_local,
		upaevo_frequencia_cardiaca = @upaevo_frequencia_cardiaca,
		upaevo_frequencia_respiratoria_ritmo = @upaevo_frequencia_respiratoria_ritmo,
		upaevo_frequencia_respiratoria_expansibilidade = @upaevo_frequencia_respiratoria_expansibilidade,
		Tipo = @TipoEvolucao,
		proc_codigo = @proc_codigo,
		upaevo_tipo_local = @upaevo_tipo_local,
		upaevo_escalador = @upaevo_escalador,
		Rascunho = @Rascunho,
		DataUltimaAlteracao = GETDATE(),
		FECHAMENTO_AUTOMATICO = CASE WHEN ISNULL(@Rascunho,0) = 0 THEN 'N' ELSE NULL END
	WHERE  upaevo_codigo = @UPAEVO_CODIGO

	 if(@inter_codigo is not null)
		  begin 
		   EXEC  KSP_Baixa_Automatica_EvolucaoUti @prof_codigo, @LOCATEND_CODIGO, @inter_codigo, @UPAEVO_CODIGO
		  end 
END

--OPCAO QUE CARREGA A LISTA DE HISTORICO DE CID´S
IF @OPCAO = 5          
BEGIN

	IF(@ATENDAMB_CODIGO IS NOT NULL)
		BEGIN

		   SELECT UE.UPAEVO_CODIGO, UE.UPAEVO_DATAHORA, UE.PROF_CODIGO, UE.CID_CODIGO_PRIMARIO, UE.CID_CODIGO_SECUNDARIO,				   UE.ATENDAMB_CODIGO, P.PROF_NOME, TC.NO_CID AS CID_PRIMARIO, TC1.NO_CID AS CID_SECUNDARIO, ISNULL(UE.RASCUNHO,0) AS 'RASCUNHO'
		   
		   FROM UPA_EVOLUCAO UE

		   LEFT JOIN PROFISSIONAL P
		    ON P.LOCATEND_CODIGO = UE.LOCATEND_CODIGO AND P.PROF_CODIGO = UE.PROF_CODIGO

		   INNER JOIN TB_CID TC
		    ON UE.CID_CODIGO_PRIMARIO = TC.CO_CID

		   LEFT JOIN TB_CID TC1
		    ON UE.CID_CODIGO_SECUNDARIO = TC1.CO_CID

		   WHERE UE.ATENDAMB_CODIGO = @ATENDAMB_CODIGO
		   AND (UE.CID_CODIGO_PRIMARIO IS NOT NULL OR UE.CID_CODIGO_SECUNDARIO IS NOT NULL)
		   ORDER BY UE.UPAEVO_DATAHORA DESC

		END

END 

If @opcao = 6
BEGIN

Set @SQL = 'SELECT '
Set @SQL = @SQL + ' E.cid_codigo_primario'	
Set @SQL = @SQL + ' FROM upa_evolucao e'
Set @SQL = @SQL + ' WHERE 1 = 1 '

If @INTER_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.INTER_CODIGO = ''' + @INTER_CODIGO + ''''
	Set @SQL = @SQL + ' and upaevo_datahora = (select max(e1.upaevo_datahora) from upa_evolucao e1 where e1.cid_codigo_primario is not null and inter_codigo = ''' + @inter_codigo + ''') '
End

EXEC (@SQL)

END

If @opcao = 7
BEGIN

Set @SQL = 'SELECT '
Set @SQL = @SQL + ' E.cid_codigo_secundario'	
Set @SQL = @SQL + ' FROM upa_evolucao e'
Set @SQL = @SQL + ' WHERE 1 = 1 '

If @INTER_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.INTER_CODIGO = ''' + @INTER_CODIGO + ''''
	Set @SQL = @SQL + ' and upaevo_datahora = (select max(e1.upaevo_datahora) from upa_evolucao e1 where e1.cid_codigo_secundario is not null and inter_codigo = ''' + @inter_codigo + ''') '
End

EXEC (@SQL)

END

If @opcao = 8
BEGIN

Set @SQL = 'SELECT '
Set @SQL = @SQL + ' E.proc_codigo'	
Set @SQL = @SQL + ' FROM upa_evolucao e'
Set @SQL = @SQL + ' WHERE 1 = 1 '

If @INTER_CODIGO IS NOT NULL
  Begin        
	Set @SQL = @SQL + ' AND E.INTER_CODIGO = ''' + @INTER_CODIGO + ''''
	Set @SQL = @SQL + ' and upaevo_datahora = (select max(e1.upaevo_datahora) from upa_evolucao e1 where e1.proc_codigo is not null and inter_codigo = ''' + @inter_codigo + ''') '
End

EXEC (@SQL)

END        

if (@opcao = 9)
BEGIN
	select a.id, a.intercodigo, a.data, a.profnome, a.tipoprofissional, a.TipoFormulario
	from
	(select	faal.id, faal.intercodigo, faal.DataInclusao as data, pr.prof_nome as profnome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from   profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where  pl.prof_codigo = faal.profcodigo) as tipoprofissional, 
			'Ficha de Admissão' as TipoFormulario
	from	FichaAdmissaoAdmitirLeito faal
	inner join profissional_rede pr on pr.prof_codigo = faal.profcodigo
	where (faal.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (faal.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (faal.InterCodigo = @inter_codigo or @inter_codigo is null)
	union all
	select	efal.id, efal.intercodigo, efal.DataInclusao, pr.prof_nome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where pl.prof_codigo = efal.profcodigo) as tipoprofissional, 
			'Exame Físico' as TipoFormulario
	from	ExameFisicoAdmitirLeito efal
	inner join profissional_rede pr on pr.prof_codigo = efal.profcodigo
	where (efal.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (efal.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (efal.InterCodigo = @inter_codigo or @inter_codigo is null)
	union all
	select	efalh.id, efalh.intercodigo, efalh.DataInclusao, pr.prof_nome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where pl.prof_codigo = efalh.profcodigo) as tipoprofissional, 
			'Exame Físico' as TipoFormulario
	from ExameFisicoAdmitirLeitoHistorico efalh
	inner join profissional_rede pr on pr.prof_codigo = efalh.profcodigo
	where (efalh.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (efalh.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (efalh.InterCodigo = @inter_codigo or @inter_codigo is null)
	union all
	select	prqal.id, prqal.intercodigo, prqal.DataInclusao, pr.prof_nome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where pl.prof_codigo = prqal.profcodigo) as tipoprofissional, 
			'Protocolo de quedas' as TipoFormulario
	from ProtocoloRiscoQuedaAdmitirLeito prqal
	inner join profissional_rede pr on pr.prof_codigo = prqal.profcodigo
	where (prqal.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (prqal.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (prqal.InterCodigo = @inter_codigo or @inter_codigo is null)
	union all
	select	prqalh.id, prqalh.intercodigo, prqalh.DataInclusao, pr.prof_nome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where pl.prof_codigo = prqalh.profcodigo) as tipoprofissional, 
			'Protocolo de quedas' as TipoFormulario
	from ProtocoloRiscoQuedaAdmitirLeitoHistorico prqalh
	inner join profissional_rede pr on pr.prof_codigo = prqalh.profcodigo
	where (prqalh.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (prqalh.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (prqalh.InterCodigo = @inter_codigo or @inter_codigo is null)
	union all
	select	dpeal.id, dpeal.intercodigo, dpeal.DataInclusao, pr.prof_nome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where pl.prof_codigo = dpeal.profcodigo) as tipoprofissional, 
			'Diagnóstico e prescrição de enfermagem' as TipoFormulario
	from diagnosticoPrescricaoEnfermagemAdmitirLeito dpeal
	inner join profissional_rede pr on pr.prof_codigo = dpeal.profcodigo
	where (dpeal.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (dpeal.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (dpeal.InterCodigo = @inter_codigo or @inter_codigo is null)
	union all
	select	dpealh.id, dpealh.intercodigo, dpealh.DataInclusao, pr.prof_nome, 
		   (select top 1 TP.TIPPROF_DESCRICAO 
			from profissional_lotacao pl inner join Tipo_Profissional tp on TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO 
			where pl.prof_codigo = dpealh.profcodigo) as tipoprofissional, 
			'Diagnóstico e prescrição de enfermagem' as TipoFormulario
	from DiagnosticoPrescricaoEnfermagemAdmitirLeitoHistorico dpealh
	inner join profissional_rede pr on pr.prof_codigo = dpealh.profcodigo
	where (dpealh.spa_codigo = @spa_codigo or @SPA_CODIGO is null)
	and   (dpealh.emer_codigo = @emer_codigo or @emer_codigo is null)
	and   (dpealh.InterCodigo = @inter_codigo or @inter_codigo is null)) a
	order by a.data desc
END	  

 if @opcao = 10
 begin

 SELECT CODIGO, UPAEVO_DATAHORA, PROF_NOME,  TIPPROF_DESCRICAO, TIPO, 0 AS RASCUNHO FROM(
	select null AS CODIGO, data AS UPAEVO_DATAHORA, p.prof_nome, TP.TIPPROF_DESCRICAO, 'ADMISSÃO MÉDICA' TIPO 
	from Internacao_Pep ip
	INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = IP.PROF_CODIGO 
	INNER JOIN PROFISSIONAL_LOTACAO PL ON (PL.PROF_CODIGO = ip.PROF_CODIGO AND PL.LOCATEND_CODIGO = ip.LOCATEND_CODIGO) 
	INNER JOIN TIPO_PROFISSIONAL TP ON TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO
	INNER JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = ip.LOCATEND_CODIGO      
	WHERE IP.inter_codigo = @inter_codigo  
	UNION ALL
	SELECT e.UPAEVO_CODIGO, e.UPAEVO_DATAHORA, p.prof_nome, TP.TIPPROF_DESCRICAO, E.TIPO
	FROM UPA_EVOLUCAO E 
	LEFT JOIN ATENDIMENTO_AMBULATORIAL AA ON E.ATENDAMB_CODIGO = AA.ATENDAMB_CODIGO 
	INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = E.PROF_CODIGO 
	INNER JOIN PROFISSIONAL_LOTACAO PL ON (PL.PROF_CODIGO = E.PROF_CODIGO AND PL.LOCATEND_CODIGO = E.LOCATEND_CODIGO) 
	INNER JOIN TIPO_PROFISSIONAL TP ON TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO
	INNER JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = E.LOCATEND_CODIGO        
	WHERE E.atendamb_codigo = @ATENDAMB_CODIGO or e.inter_codigo = @inter_codigo      
	union all
	select null, faal.DataInclusao AS UPAEVO_DATAHORA, p.prof_nome, TP.TIPPROF_DESCRICAO, 'ADMISSÃO ENFERMAGEM' AS TIPO
	from FichaAdmissaoAdmitirLeito faal
	INNER JOIN INTERNACAO I ON I.INTER_CODIGO = faal.intercodigo
	INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = FAAL.PROFCODIGO 
	INNER JOIN PROFISSIONAL_LOTACAO PL ON (PL.PROF_CODIGO = FAAL.PROFCODIGO AND PL.LOCATEND_CODIGO = i.LOCATEND_CODIGO) 
	INNER JOIN TIPO_PROFISSIONAL TP ON TP.TIPPROF_CODIGO = PL.TIPPROF_CODIGO
	WHERE faal.InterCodigo = @inter_codigo) T
end
 if @opcao = 11
 begin
	SELECT	E.UPAEVO_CODIGO, E.UPAEVO_DATAHORA, E.LOCATEND_CODIGO, P.PROF_NOME, lu.LocAtend_descricao, pl.prof_registro_conselho as prof_numconselho, 'ROTINA' as LocalEvolucao, case when isnull(E.rascunho, 0) = 1 then 'Aberta' else 'Fechada' end RascunhoStatus, DataUltimaAlteracao, isnull(E.rascunho, 0) as Rascunho, tp.tipprof_descricao
			FROM 
			UPA_EVOLUCAO E 
			LEFT JOIN ATENDIMENTO_AMBULATORIAL AA ON E.ATENDAMB_CODIGO = AA.ATENDAMB_CODIGO 
			INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = E.PROF_CODIGO 
			INNER JOIN PROFISSIONAL_LOTACAO PL ON PL.PROF_CODIGO = E.PROF_CODIGO and pl.locatend_codigo = e.locatend_codigo
			INNER JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = E.LOCATEND_CODIGO 
			INNER JOIN Tipo_Profissional TP ON TP.tipprof_codigo = PL.tipprof_codigo 
			INNER JOIN TB_OCUPACAO T ON T.CO_OCUPACAO = PL.cbo_codigo
			WHERE e.inter_codigo = @inter_codigo
	UNION ALL
	SELECT	UD.evouti_codigo, UD.DataInclusao, UD.locatend_codigo, P.PROF_NOME, lu.LocAtend_descricao, pl.prof_registro_conselho as prof_numconselho, 'CTI DIURNA' as LocalEvolucao, case when isnull(UD.rascunho, 0) = 1 then 'Aberta' else 'Fechada' end RascunhoStatus, DataUltimaAlteracao, isnull(UD.rascunho, 0) as Rascunho, tp.tipprof_descricao
			FROM EvolucaoUtiDiurna UD 
			INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = UD.PROF_CODIGO 
			left JOIN PROFISSIONAL_LOTACAO PL ON PL.PROF_CODIGO = UD.PROF_CODIGO and pl.locatend_codigo = UD.locatend_codigo
			left JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = UD.LOCATEND_CODIGO 
			left JOIN Tipo_Profissional TP ON TP.tipprof_codigo = PL.tipprof_codigo
			WHERE UD.inter_codigo = @inter_codigo
	UNION ALL
	SELECT	UN.evouti_codigo, UN.DataInclusao, UN.locatend_codigo, P.PROF_NOME, lu.LocAtend_descricao, pl.prof_registro_conselho as prof_numconselho, 'CTI NOTURNA' as LocalEvolucao, case when isnull(UN.rascunho, 0) = 1 then 'Aberta' else 'Fechada' end RascunhoStatus, DataUltimaAlteracao, isnull(UN.rascunho, 0) as Rascunho, tp.tipprof_descricao
			FROM EvolucaoUtiNoturna UN
			INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = UN.PROF_CODIGO 
			left JOIN PROFISSIONAL_LOTACAO PL ON PL.PROF_CODIGO = UN.PROF_CODIGO and pl.locatend_codigo = UN.locatend_codigo
			left JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = UN.LOCATEND_CODIGO 
			left JOIN Tipo_Profissional TP ON TP.tipprof_codigo = PL.tipprof_codigo
			WHERE UN.inter_codigo = @inter_codigo
	UNION ALL
	SELECT	UI.evouti_codigo, UI.DataInclusao, UI.locatend_codigo, P.PROF_NOME, lu.LocAtend_descricao, pl.prof_registro_conselho as prof_numconselho, 'CTI INTERCORRÊNCIA' as LocalEvolucao, case when isnull(UI.rascunho, 0) = 1 then 'Aberta' else 'Fechada' end RascunhoStatus, DataUltimaAlteracao, isnull(UI.rascunho, 0) as Rascunho, tp.tipprof_descricao
			FROM EvolucaoUtiIntercorrencia UI
			INNER JOIN PROFISSIONAL_REDE P ON P.PROF_CODIGO = UI.PROF_CODIGO 
			left JOIN PROFISSIONAL_LOTACAO PL ON PL.PROF_CODIGO = UI.PROF_CODIGO and pl.locatend_codigo = UI.locatend_codigo
			left JOIN VWLOCAL_UNIDADE LU ON LU.LOCATEND_CODIGO = UI.LOCATEND_CODIGO 
			left JOIN Tipo_Profissional TP ON TP.tipprof_codigo = PL.tipprof_codigo
			WHERE UI.inter_codigo = @inter_codigo


 end


----------------------------- Termino da Stored Procedure ----------------------------------

if (@@ERROR <> 0)
      	BEGIN
		Select @sql = 'Erro na stored procedure ksp_upa_evolucao. Opção : ' + @opcao
         	RAISERROR(@sql,1,1)         	
      	END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_baa_impresso]...';


GO
-- DROP PROCEDURE [dbo].[ksp_baa_impresso]            
ALTER PROCEDURE [dbo].[ksp_baa_impresso]            
@atend_codigo CHAR (12)=NULL, @unid_codigo CHAR (4)=NULL, @pac_codigo CHAR(12)             
AS            
SELECT p.pac_nome,             
  CONVERT(VARCHAR, dbo.CalcularIdade(p.pac_nascimento, GETDATE())) as idade,            
  p.pac_sexo,            
  p.pac_cartao_nsaude,            
  CASE WHEN P.pac_sexo = 'M' THEN 'MASC' ELSE 'FEM' END as sexo,            
  p.pac_mae,            
  p.pac_nascimento,            
  l.LocAtend_descricao,            
  a.atend_data,            
  a.atend_codigo,            
  pr.prof_nome,            
  pr.prof_numconselho,            
  c.cid_codigo + ' - ' + c.cid_descricao as cid,            
  t.tipsai_Descricao,            
  am.upaatemed_Anamnese,            
  am.upaatemed_ProcedimentoProposto,            
  ac.atendamb_peso,            
  ac.atendamb_altura,            
  ac.atendamb_imc,            
  ac.atendamb_hgt,            
  ac.atendamb_pulso,            
  ac.atendamb_temperatura,            
  ac.atendamb_freq_resp,            
  ac.atendamb_pa,            
  upr.LOGO,            
  upr.cabecalho_report1,                                                    
  upr.cabecalho_report2,              
  upr.cabecalho_report3,            
  p.pac_codigo,            
  u.unid_descricao,            
           pp.Pac_Prontuario_Numero as prontuario,          
           AE.atenf_preconsulta as preconsulta,     
     AE.atenf_posconsulta as posconsulta,  
           AE.atenf_data as dataconsultaenfermagem,          
            proenf.prof_nome as profissionalenfermagem,        
           pefenf.exafis_peso as enf_exafis_peso,              
           pefenf.exafis_altura as enf_exafis_altura ,        
           pefenf.exafis_pa_sistolica as enf_exafis_pa_sistolica,              
           pefenf.exafis_pa_diastolica as enf_exafis_pa_diastolica,              
           pefenf.exafis_temperatura as enf_exafis_temperatura,                    
           pefenf.exafis_freq_respiratoria as enf_exafis_freq_respiratoria,                  
           pefenf.exafis_pulso as enf_exafis_pulso,                 
           pefenf.exafis_saturacao_O2 as enf_exafis_saturacao_O2,        
           pefenf.atendamb_codigo as enf_atendamb_codigo,                   
           pefenf.exafis_datahora as enf_exafis_datahora,                  
           pefenf.exafis_altura_posicao as enf_exafis_altura_posicao,                   
           pefenf.exafis_exame_fisico as enf_exafis_exame_fisico,                    
           pefenf.exafis_pc as enf_exafis_pc,       
           pefenf.exafis_pt as enf_exafis_pt,                 
           pefenf.exafis_circ_cintura  as enf_exafis_circ_cintura,      
           pefenf.exafis_hgt as enf_exafis_hgt,      
           pefenf.exafis_saturacao as enf_exafis_saturacao,  
      STUFF((SELECT distinct ', ' + AtendimentoEnfermagem_Medicamento.insu_Descricao      
                     from AtendimentoEnfermagem_Medicamento      
                    where AE.atenf_codigo = AtendimentoEnfermagem_Medicamento.atenf_codigo      
                FOR XML PATH(''), TYPE      
            ).value('.', 'NVARCHAR(MAX)')       
        ,1,2,'') medicamento,      
case when atenf_hipertensao = 'S' then 'Hipertensão'  end as atenf_hipertensao,      
case when atenf_diabetes = 'S' then 'Diabetes'  end as atenf_diabetes,      
case when atenf_dpoc = 'S' then 'Dpoc'  end as atenf_dpoc,      
case when atenf_cardiopatia = 'S' then 'Cardiopatia'  end as atenf_cardiopatia,      
case when atenf_renalcronico = 'S' then 'Renal Crônico'  end as atenf_renalcronico,      
ISNULL(atenf_outros ,'') AS atenf_outros  ,    
		    CASE WHEN exafis_peso iS not NULL AND exafis_altura iS not NULL 
        THEN 
           Convert( decimal(38,2),  CONVERT(DECIMAL,exafis_peso,2)  /  (CONVERT(DECIMAL,exafis_altura,2)  * (CONVERT(DECIMAL,exafis_altura,2))) )
		  ELSE
		  null
		  END AS imc
      FROM Atendimento a             
inner join paciente p on a.pac_codigo = p.pac_codigo            
inner join vwLocal_Atendimento l on a.locatend_codigo = l.locatend_codigo            
inner join atendimento_ambulatorial aa on a.atend_codigo = aa.atend_codigo            
inner join Profissional pr on aa.prof_codigo = pr.prof_codigo and aa.locatend_codigo = pr.locatend_codigo            
inner join atendimento_clinico ac on aa.atendamb_codigo = ac.atendamb_codigo            
inner join cid_10 c on ac.cid_codigo = c.cid_codigo            
LEFT JOIN agenda_consulta Agc on a.atend_codigo = Agc.atend_codigo          
LEFT JOIN Atendimento_Enfermagem AE on Agc.agd_sequencial = AE.agd_sequencial          
LEFT JOIN PEP_Exame_Fisico pefenf on ae.atenf_codigo = pefenf.atenf_codigo        
LEFT JOIN Profissional_Rede proenf on ae.prof_codigo = proenf.prof_codigo    
left join Paciente_Prontuario pp on p.pac_codigo = pp.pac_codigo            
left join UPA_Atendimento_Medico am on aa.atendamb_codigo = am.atendamb_codigo            
left join Tipo_Saida t on am.tipsai_codigo = t.tipsai_codigo,            
unidade u inner join unidade_parametro_relatorio upr on u.unid_codigo = upr.unid_codigo            
                
          
 WHERE ((a.atend_codigo = @atend_codigo) or (aa.atendamb_codigo = @atend_codigo))            
   and a.pac_codigo = @pac_codigo            
  and u.unid_codigo = @unid_codigo            
              
             
IF (@@ERROR <> 0)                
BEGIN                
    RAISERROR('ERRO - ',1,1)                
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Paciente]...';


GO
ALTER PROCEDURE [dbo].[ksp_Paciente]    
@Opcao INT, @Pac_Codigo CHAR (12)=null, @Unid_Codigo CHAR (4), @Pac_Nome VARCHAR (50)=null, @Rel_Codigo CHAR (4), @Cep_Sequencial CHAR (6), @Pac_Nacionalidade CHAR (4), @Pac_Pai CHAR (50), @Pac_Mae VARCHAR (50)=null, @Pac_Nascimento CHAR (10)=null, @Pac_Sexo CHAR (1),  
 @Pac_Raca INT, @Pac_Etnia CHAR (4)=null, @Pac_Naturalidade CHAR (7), @Pac_Telefone CHAR (20), @Pac_Tipo_Documento CHAR (1), @Pac_Numero_Documento CHAR (15), @Pac_Orgao_Emissor CHAR (20), @Pac_Emissao_Documento CHAR (10),  
 @Pac_Escolaridade VARCHAR (50), @Pac_Prontuario CHAR (10)=null, @Pac_Responsavel CHAR (50), @Pac_Telefone_Responsavel CHAR (20), @Pac_Email CHAR (30), @Pac_Observacao TEXT, @Pac_Local_Posse CHAR (4), @Pac_Ativo CHAR (1), @Pac_Data_Matricula CHAR (10), @Pac_Endereco_Num CHAR (5), @Pac_Endereco_Compl CHAR (20), @Pac_CPF CHAR (11)=null, @Pac_Foto CHAR (25), @Pac_DtMatricula CHAR (10), @Pac_Esmeralda CHAR (8), @Pac_Idade INT, @Tp_pesq INT, @Pac_Cartao_NSaude CHAR (15)=NULL, @Pac_Cartao_NDSTAIDS CHAR (20)=NULL,   
@PAC_STATUS CHAR (1)=NULL, @Pac_Numero_PID VARCHAR (8)=NULL, @EstCivil INT=NULL, @PAC_ULTIMAALTEARACAO CHAR (50)=NULL, @usu_codigo CHAR (4)=null, @PAC_CertidaoNascimento CHAR (1)=NULL, @dt_obito SMALLDATETIME=null, @Pac_Cartao_NSaude_Provisorio CHAR (15)=NULL,  
 @Pac_Unidref_Codigo CHAR (4)=NULL, @Prof_origem_codigo CHAR (4)=NULL, @Pac_Causa_Mortis VARCHAR (50)=null, @Pac_Celular CHAR (20)=NULL, @Pac_Tipo_Idade CHAR (1)=NULL, @Pac_CNES CHAR (7)=null, @PAC_SIS_PRENATAL VARCHAR (12)=NULL,   
 @Pac_Paccns_Identidade_Numero VARCHAR (13)=null, @Pac_CMS CHAR (15)=null, @Pac_DT_UltimaAlteracao SMALLDATETIME=null, @Pac_Telefone2 CHAR (20)=null, @Pac_Gestante CHAR (1)=NULL, @Pac_Fator_Rh CHAR (1)=NULL, @Pac_Possui_Documento CHAR (1)=NULl, @Pac_Grupo_Sanguineo VARCHAR (2)=NULL,   
 @Pac_obito CHAR (1)=NULL, @Pesquisa_dt_inicial DATETIME=null, @Pesquisa_dt_final DATETIME=null, @DATA_RETROATIVA SMALLDATETIME=null, @pac_justificativa CHAR (40)=NULL, @pac_obs_telefone VARCHAR (100)=NULL, @pac_justificativa_resp VARCHAR (60)=NULL,   
 @Pac_CPF_Responsavel CHAR (11)=null, @Pac_Nome_Social VARCHAR (70)=null  , @ContatoIdSinc VARCHAR (10)=null    
AS    
set nocount on      
              
DECLARE @Data CHAR(8)              
DECLARE @UltCodigo CHAR(12)              
Declare @lSql varchar(2048)              
DECLARE @PAC_PRONTUARIO_MAX INT              
DECLARE @UsuarioUltimaAlteracao varchar(100)              
DECLARE @par  Varchar(2055)              
      
DECLARE @UNID_GESTORA CHAR(4)              
DECLARE @CADASTROPROVISORIO CHAR(1)              
DECLARE @CADASTROPROPRIO CHAR(1)              
DECLARE @ENVIO CHAR(1)              
DECLARE @Pac_Cartao_NSaude_Provisorio_Data SMALLDATETIME              
          
if @usu_codigo is not null          
 select @PAC_ULTIMAALTEARACAO = usu_nome from usuario where usu_codigo = @usu_codigo              
----------------------------- Selecao para Carga dos Dados ------------------------------------              
              
If @Opcao = 0              
 Begin              
              
  SELECT  TOP 1 P.Pac_Codigo, P.Unid_Codigo, P.Pac_Nome, P.pac_nome_social,P.Rel_Codigo,P.Cep_Sequencial,               
   P.Pac_Nacionalidade,P.Pac_Pai,P.Pac_Mae,P.Pac_Nascimento,P.Pac_Sexo,               
   P.raca_codigo,P.etnia_codigo, P.Pac_Naturalidade,P.Pac_Telefone,P.Pac_Telefone2, P.Pac_Tipo_Documento,               
   P.Pac_Numero_Documento,P.Pac_Orgao_Emissor,P.Pac_Emissao_Documento,               
   P.Pac_Escolaridade,PP.Pac_Prontuario_Numero Pac_Prontuario,P.Pac_Responsavel,               
   P.Pac_Telefone_Responsavel,P.Pac_Email,P.Pac_Observacao,               
   P.Pac_Local_Posse,P.Pac_Ativo,P.Pac_Data_Matricula,               
   P.Pac_Endereco_Num,P.Pac_Endereco_Compl,P.Pac_CPF,P.Pac_Foto,               
   P.Pac_DtMatricula,P.Pac_Esmeralda,P.Pac_Idade,               
   Re.Rel_Descricao,               
   M.Mun_Descricao,             
   M.cod_ibge,  
   UF.Uf_Codigo,                
   UF.Uf_Descricao,               
   PA.Pai_Descricao,                  UN.Unid_Descricao,               
   la.locatend_descricao LocAtend_Descricao,              
   P.Pac_DtObito,              
   R.raca_desc,              
   P.pac_cartao_nsaude,              
   P.pac_cartao_ndstaids,              
   P.Pac_Numero_PID,              
   P.PAC_ULTIMAALTEARACAO UltimoAlteracao,              
   P.estcivil_codigo,              
   P.PAC_CertidaoNascimento,              
   P.PAC_STATUS_CADASTRO,              
   P.pac_cartao_nsaude_provisorio,          
   P.pac_cartao_nsaude_provisorio_data,          
   P.Pac_Unidref_Codigo,               
   Ur.UnidRef_Descricao,              
   P.Pac_Causa_Mortis,              
   P.Prof_origem_codigo,            
   P.Pac_Celular,          
   P.usu_codigo,        
   P.Pac_tipo_Idade,        
   PAC_SIS_PRENATAL,        
   PACCNS.paccns_identidade_numero as Paccns_Identidade_Numero,                    
   p.Pac_Possui_Documento,                     
   P.Pac_Grupo_Sanguineo,                    
   p.Pac_Gestante,                    
   p.Pac_Fator_Rh    ,                  
   p.pac_obito  ,                
   PIM.PacIdMun_Codigo,    
   p.pac_justificativa  ,    
   p.pac_obs_telefone  ,    
   p.pac_justificativa_resp,    
   p.Pac_CPF_Responsavel,
   B.bai_codigo,
   B.bai_descricao,
   P.ContatoIdSinc
  FROM  ((((((((Paciente p LEFT JOIN Unidade un ON un.unid_codigo = IsNUll(@UNID_CODIGO,p.unid_codigo) AND p.unid_codigo = un.unid_codigo)              
   LEFT JOIN vwLocal_unidade LA ON p.pac_local_Posse = La.locatend_Codigo))              
   LEFT JOIN Municipio M ON p.pac_naturalidade = m.mun_codigo)              
   LEFT JOIN Bairro B ON M.mun_codigo = B.mun_codigo )              
   LEFT JOIN unidade_federativa UF ON m.uf_codigo = Uf.uf_codigo)              
   LEFT JOIN Pais Pa ON P.Pac_Nacionalidade = PA.Pai_Codigo)              
   LEFT JOIN raca r ON p.raca_codigo = r.raca_codigo)              
   LEFT JOIN Religiao Re ON p.rel_codigo = re.rel_codigo              
   LEFT JOIN Paciente_Prontuario pp ON p.pac_codigo = pp.pac_codigo and pp.unid_codigo = @unid_codigo              
   LEFT JOIN EstadoCivil estcivil ON p.estcivil_codigo = estcivil.estcivil_codigo              
                        LEFT JOIN Unidade_referencia Ur ON  Ur.Unidref_Codigo = P.Pac_Unidref_Codigo               
   LEFT JOIN PACIENTE_CNS PACCNS ON PACCNS.PAC_CODIGO = P.PAC_CODIGO        
   LEFT JOIN Paciente_Identificacao_Municipio PIM ON PIM.Pac_Codigo = P.Pac_Codigo                           
  WHERE  p.pac_codigo = @pac_codigo    
 AND P.UNID_CODIGO = ISNULL(@UNID_CODIGO, P.UNID_CODIGO)              
 End              
              
------------------------------------ Inclusao dos Dados ---------------------------------------              
              
If @Opcao = 1              
              
 Begin              
  if (@Pac_Cartao_NSaude_Provisorio IS NOT NULL)              
     begin              
   set @Pac_Cartao_NSaude_Provisorio_Data = getdate()              
     end              
             
  set @Pac_DT_UltimaAlteracao = getdate()          
          
  IF @pac_nome is not null       
  begin      
     set @pac_nome = ltrim(rtrim(@pac_nome))      
  while charindex('  ',@pac_nome  ) > 0       
  begin          
   set @pac_nome = replace(@pac_nome, '  ', ' ')       
  end       
  end      
          
  IF @Pac_Mae is not null       
  begin      
     set @Pac_Mae = ltrim(rtrim(@Pac_Mae))      
  while charindex('  ',@Pac_Mae  ) > 0       
  begin          
   set @Pac_Mae = replace(@Pac_Mae, '  ', ' ')       
  end       
  end      
      
  INSERT INTO Paciente              
   (Pac_Codigo,Unid_Codigo,Pac_Nome,Rel_Codigo,Cep_Sequencial,              
   Pac_Nacionalidade,Pac_Pai,Pac_Mae,Pac_Nascimento,Pac_Sexo,              
   raca_codigo,etnia_codigo, Pac_Naturalidade,Pac_Telefone,Pac_Telefone2, Pac_Celular,Pac_Tipo_Documento,              
   Pac_Numero_Documento,Pac_Orgao_Emissor,Pac_Emissao_Documento,              
   Pac_Escolaridade,Pac_Responsavel,Pac_Telefone_Responsavel,              
   Pac_Email,Pac_Observacao,Pac_Local_Posse,Pac_Ativo,Pac_Data_Matricula,              
   Pac_Endereco_Num,Pac_Endereco_Compl,Pac_CPF,Pac_Foto,Pac_DtMatricula,              
   Pac_Esmeralda,Pac_Idade,Pac_Cartao_NSaude,Pac_Cartao_NDSTAIDS, estcivil_codigo,               
   PAC_STATUS_CADASTRO, PAC_ULTIMAALTEARACAO, PAC_CertidaoNascimento, pac_datahora, Pac_Cartao_NSaude_Provisorio,              
   Pac_Cartao_NSaude_Provisorio_Data, Pac_Unidref_Codigo,Prof_origem_codigo, usu_codigo, Pac_Tipo_Idade,PAC_SIS_PRENATAL, pac_gestante,                
   pac_fator_rh,pac_grupo_sanguineo, Pac_Possui_Documento, pac_obito, pac_dt_ultima_alteracao, p.pac_justificativa, p.pac_obs_telefone, p.pac_justificativa_resp,    
   Pac_CPF_Responsavel, pac_nome_social,ContatoIdSinc)                 
  VALUES               
   (@Pac_Codigo,@Unid_Codigo,@Pac_Nome,@Rel_Codigo,@Cep_Sequencial,              
   @Pac_Nacionalidade,@Pac_Pai,@Pac_Mae,@Pac_Nascimento,@Pac_Sexo,              
   @Pac_Raca,@Pac_Etnia, @Pac_Naturalidade,@Pac_Telefone,@Pac_Telefone2,@Pac_Celular,@Pac_Tipo_Documento,              
   @Pac_Numero_Documento,@Pac_Orgao_Emissor,@Pac_Emissao_Documento,              
   @Pac_Escolaridade,@Pac_Responsavel,@Pac_Telefone_Responsavel,              
   @Pac_Email,@Pac_Observacao,@Pac_Local_Posse,@Pac_Ativo,@Pac_Data_Matricula,              
   @Pac_Endereco_Num,@Pac_Endereco_Compl,@Pac_CPF,@Pac_Foto,@Pac_DtMatricula,              
   @Pac_Esmeralda,@Pac_Idade,@Pac_Cartao_NSaude,@Pac_Cartao_NDSTAIDS, @EstCivil,               
   @PAC_STATUS, @PAC_ULTIMAALTEARACAO, @PAC_CertidaoNascimento, GETDATE(), @Pac_Cartao_NSaude_Provisorio,              
   @Pac_Cartao_NSaude_Provisorio_Data, @Pac_Unidref_Codigo,@Prof_origem_codigo, @usu_codigo,  @Pac_Tipo_Idade, @PAC_SIS_PRENATAL, @pac_gestante,                
   @pac_fator_rh,@pac_grupo_sanguineo,@Pac_Possui_Documento, @pac_obito, @Pac_DT_UltimaAlteracao, @pac_justificativa, @pac_obs_telefone, @pac_justificativa_resp,    
   @Pac_CPF_Responsavel, @Pac_Nome_Social,@ContatoIdSinc)    
      
if (@Pac_CMS is not null)      
   begin      
    declare @COD_IBGE_CMS varchar(7)       
    set @COD_IBGE_CMS = (select mun_codigo from cep      
            inner join unidade      
             on unidade.cep_sequencial = cep.cep_sequencial      
           where unid_codigo = @Unid_Codigo);      
    IF (@COD_IBGE_CMS IS NOT NULL)      
  INSERT INTO Paciente_Identificacao_Municipio (PacIdMun_Codigo,pac_codigo,cod_ibge) VALUES (@Pac_CMS, @PAC_CODIGO, @COD_IBGE_CMS);       
   end      
       
 IF(@PAC_PRONTUARIO IS NOT NULL)              
   BEGIN              
     INSERT INTO Paciente_Prontuario (Pac_Codigo,Unid_Codigo,Pac_Prontuario_Numero, usu_codigo)              
     VALUES (@PAC_CODIGO,@UNID_CODIGO,@PAC_PRONTUARIO, @usu_codigo)              
   END              
            
 END              
              
------------------------------------ Alteracao dos Dados ---------------------------------------              
              
If @Opcao = 2              
              
Begin              
 IF (@Pac_Cartao_NSaude_Provisorio IS NOT NULL)              
 BEGIN              
        SELECT Pac_Cartao_NSaude_Provisorio              
        FROM PACIENTE              
        WHERE Pac_Cartao_NSaude_Provisorio_Data is null              
           AND PAC_CODIGO=@Pac_Codigo              
           AND UNID_CODIGO=@unid_codigo              
               
        if(@@rowcount>0)              
           begin              
              set @Pac_Cartao_NSaude_Provisorio_Data = getdate()              
           end              
 END              
       set @Pac_DT_UltimaAlteracao = getdate()             
      
      
  IF @pac_nome is not null       
  begin      
     set @pac_nome = ltrim(rtrim(@pac_nome))      
  while charindex('  ',@pac_nome  ) > 0       
  begin          
   set @pac_nome = replace(@pac_nome, '  ', ' ')       
  end       
  end      
               
  IF @Pac_Mae is not null       
  begin      
     set @Pac_Mae = ltrim(rtrim(@Pac_Mae))      
  while charindex('  ',@Pac_Mae  ) > 0       
  begin          
   set @Pac_Mae = replace(@Pac_Mae, '  ', ' ')       
  end       
  end      
      
 UPDATE  Paciente SET    
 Pac_Nome = @Pac_Nome,Rel_Codigo = @Rel_Codigo,              
 Cep_Sequencial = @Cep_Sequencial,      
 Pac_Nacionalidade = @Pac_Nacionalidade,              
 Pac_Pai = @Pac_Pai,      
 Pac_Mae = @Pac_Mae,Pac_Nascimento = @Pac_Nascimento,              
 Pac_Sexo = @Pac_Sexo,      
 raca_codigo = @Pac_Raca,              
 etnia_codigo = @Pac_Etnia,       
 Pac_Naturalidade = @Pac_Naturalidade,              
 Pac_Telefone = @Pac_Telefone,      
 Pac_Celular = @Pac_Celular,            
 Pac_Telefone2 = @Pac_Telefone2,        
 Pac_Tipo_Documento = @Pac_Tipo_Documento,              
 Pac_Numero_Documento = @Pac_Numero_Documento,              
 Pac_Orgao_Emissor = @Pac_Orgao_Emissor,              
 Pac_Emissao_Documento = @Pac_Emissao_Documento,              
 Pac_Escolaridade = @Pac_Escolaridade,      
 --Pac_Prontuario = @Pac_Prontuario,              
 Pac_Responsavel = @Pac_Responsavel,      
 Pac_Telefone_Responsavel = @Pac_Telefone_Responsavel,              
 Pac_Email = @Pac_Email,       
 Pac_Observacao = @Pac_Observacao,              
 Pac_Local_Posse = @Pac_Local_Posse,      
 Pac_Ativo = @Pac_Ativo,              
 Pac_Data_Matricula = @Pac_Data_Matricula,              
 Pac_Endereco_Num = @Pac_Endereco_Num,              
 Pac_Endereco_Compl = @Pac_Endereco_Compl,      
 Pac_CPF = @Pac_CPF,              
 Pac_Foto = @Pac_Foto,Pac_DtMatricula = @Pac_DtMatricula,              
 Pac_Esmeralda = @Pac_Esmeralda,      
 Pac_Idade = @Pac_Idade,              
 Pac_Cartao_NSaude = @Pac_Cartao_NSaude,              
 Pac_Cartao_NDSTAIDS = @Pac_Cartao_NDSTAIDS,              
 Pac_Numero_PID = @Pac_Numero_PID,              
 Estcivil_codigo = @EstCivil,              
 PAC_ULTIMAALTEARACAO = @PAC_ULTIMAALTEARACAO,              
 PAC_CertidaoNascimento = @PAC_CertidaoNascimento,              
 Pac_Cartao_NSaude_Provisorio = @Pac_Cartao_NSaude_Provisorio,              
 Pac_Unidref_Codigo = @Pac_Unidref_Codigo,               
 Pac_Cartao_NSaude_Provisorio_Data = @Pac_Cartao_NSaude_Provisorio_Data,             
 Prof_origem_codigo=@Prof_origem_codigo  ,          
 usu_codigo   = @usu_codigo  ,        
 Pac_Tipo_Idade =  @Pac_Tipo_Idade,        
 PAC_SIS_PRENATAL=@PAC_SIS_PRENATAL,        
 Pac_Possui_Documento = @Pac_Possui_Documento,      
 pac_obito = @pac_obito,                    
 pac_gestante=@pac_gestante,                   
 pac_fator_rh=@pac_fator_rh,                
 pac_grupo_sanguineo=@pac_grupo_sanguineo,              
 pac_dt_ultima_alteracao = @Pac_DT_UltimaAlteracao,    
 pac_justificativa = @pac_justificativa,     
 pac_obs_telefone = @pac_obs_telefone,     
 pac_justificativa_resp = @pac_justificativa_resp,    
 Pac_CPF_Responsavel = @Pac_CPF_Responsavel,    
 pac_nome_social = @Pac_Nome_Social ,
 ContatoIdSinc = @ContatoIdSinc   
 WHERE Pac_Codigo = @Pac_Codigo              
              
        IF(@PAC_PRONTUARIO IS NOT NULL)              
           BEGIN              
              SELECT PAC_PRONTUARIO_NUMERO              
              FROM   PACIENTE_PRONTUARIO              
              WHERE PAC_CODIGO=@Pac_Codigo              
                 AND UNID_CODIGO=@unid_codigo              
          
              if(@@rowcount>0)              
                 begin              
                   UPDATE PACIENTE_PRONTUARIO SET PAC_PRONTUARIO_NUMERO=@PAC_PRONTUARIO              
                   WHERE PAC_CODIGO=@Pac_Codigo              
                    AND UNID_CODIGO=@unid_codigo              
                end              
               else              
                 begin              
                    INSERT INTO Paciente_Prontuario (Pac_Codigo,Unid_Codigo,Pac_Prontuario_Numero, usu_codigo)              
                       VALUES (@PAC_CODIGO,@UNID_CODIGO,@PAC_PRONTUARIO, @usu_codigo)              
                 end              
           END              
        ELSE              
          BEGIN              
              SELECT PAC_PRONTUARIO_NUMERO              
              FROM   PACIENTE_PRONTUARIO              
              WHERE PAC_CODIGO=@Pac_Codigo              
       AND UNID_CODIGO=@unid_codigo              
                     
              if(@@rowcount>0)              
                 begin              
                    DELETE FROM PACIENTE_PRONTUARIO              
                    WHERE PAC_CODIGO=@Pac_Codigo              
                      AND UNID_CODIGO=@unid_codigo              
                 end            
          END              
END              
              
------------------------------------ Exclusao dos Dados ---------------------------------------              
--NAO HA EXCLUSAO DE PACIENTE              
--------------------------------------- Dados da Mpe ------------------------------------------              
If @Opcao = 4              
 Begin              
              
 SELECT  P.pac_codigo,      
   P.pac_nome,      
   P.rel_codigo,      
   P.cep_sequencial,      
   P.pac_nacionalidade,      
   P.pac_pai,      
   P.pac_mae,      
   P.pac_nascimento,      
   P.pac_sexo,      
   P.pac_raca,      
   P.pac_naturalidade,      
   P.pac_telefone,      
   P.pac_tipo_documento,      
   P.pac_numero_documento,      
   P.pac_orgao_emissor,      
   P.pac_emissao_documento,      
   P.pac_escolaridade,      
   P.pac_responsavel,      
   P.pac_telefone_responsavel,      
   P.pac_email,      
   P.pac_observacao,      
   P.pac_local_posse,      
   P.pac_ativo,      
   P.pac_data_matricula,      
   P.pac_endereco_num,      
   P.pac_endereco_compl,      
   P.pac_cpf,      
   P.pac_dtobito,      
   P.pac_foto,      
   P.pac_dtmatricula,      
   P.pac_esmeralda,      
   P.pac_idade,      
   P.raca_codigo,      
   P.etnia_codigo,      
   P.pac_cartao_nsaude,      
   P.pac_cartao_nDSTAIDS,      
   P.Pac_Numero_PID,      
   P.PAC_STATUS_CADASTRO,      
   P.estcivil_codigo,      
   P.PAC_ULTIMAALTEARACAO,      
   P.PAC_CertidaoNascimento,      
   P.pac_datahora,      
   P.pac_cartao_nsaude_provisorio,      
   P.pac_cartao_nsaude_provisorio_data,      
   P.pac_unidref_codigo,      
   P.prof_origem_codigo,      
   P.Pac_Causa_Mortis,      
   P.pac_celular,      
   P.usu_codigo,      
   P.pac_tipo_idade,      
   P.PAC_SIS_PRENATAL,      
   P.pac_gestante,      
   P.pac_fator_rh,      
   P.pac_possui_documento,      
   P.pac_grupo_sanguineo,      
   P.pac_telefone2,      
   P.pac_obito,      
   P.pac_dt_ultima_alteracao,      
   space(50) cep_logradouro ,              
   space(8) cep_cep,              
   space(8) bai_codigo,              
   space(8) mun_codigo,              
   space(2) uf_codigo,              
   pp.pac_prontuario_numero pac_prontuario,              
   space(50) mun_descricao,              
   space(50) bai_descricao,      
   space(10) cep_tiplogr,              
   pp.unid_codigo,              
   U.unid_descricao              
              
  INTO #TEMP              
              
  FROM  paciente P              
   inner join paciente_prontuario pp on pp.pac_codigo=P.pac_codigo              
   inner join unidade u on u.unid_codigo =  ISNULL(@UNID_CODIGO,pp.Unid_Codigo)              
                
              
  WHERE  pp.pac_codigo = isnull(@Pac_Codigo, pp.pac_codigo)    
   and   pp.Pac_Prontuario_Numero = isnull(@Pac_Prontuario, pp.Pac_Prontuario_Numero)          
--WEB e MULTI-UNIDADE              
  AND pp.Unid_Codigo   = ISNULL(@UNID_CODIGO,pp.Unid_Codigo)              
--SAMIR.HOMOLOGACAO.05/08/2003              
  AND P.PAC_SEXO = 'F'              
              
              
  UPDATE #TEMP              
   SET cep_logradouro = cep.cep_logradouro,              
    cep_cep= cep.cep_cep,              
    bai_codigo = cep.bai_codigo,              
    mun_codigo = cep.mun_codigo,              
    uf_codigo = municipio.uf_codigo,              
    mun_descricao = municipio.mun_descricao,              
    bai_descricao = bairro.bai_descricao,      
    cep_tiplogr = cep.cep_tiplogr               
              
  FROM  paciente , cep , municipio, bairro , paciente_prontuario              
              
  WHERE  cep.cep_sequencial = PACIENTE.cep_sequencial              
  AND municipio.mun_codigo = cep.mun_codigo              
  AND bairro.mun_codigo = cep.mun_codigo              
  AND bairro.bai_codigo = cep.bai_codigo              
  AND paciente.pac_codigo = paciente_prontuario.pac_codigo              
  AND paciente_prontuario.unid_codigo = @unid_codigo              
  and paciente_prontuario.pac_codigo = isnull(@Pac_Codigo, paciente_prontuario.pac_codigo)    
  and paciente_prontuario.Pac_Prontuario_Numero = isnull(@Pac_Prontuario, paciente_prontuario.Pac_Prontuario_Numero)             
--WEB e MULTI-UNIDADE              
  AND #temp.Unid_Codigo  = ISNULL(@UNID_CODIGO,#temp.Unid_Codigo)              
      
  select * from #Temp order by pac_nome              
              
  drop table #temp              
              
 End              
              
------------------------------- NÃƒâ‚¬mero do Pr=ximo C=digo --------------------------------------              
              
If @Opcao = 5              
 Begin              
              
  DECLARE @datahoje CHAR (10)              
              
  SET @UNID_GESTORA = NULL              
                
  SELECT @UNID_GESTORA = UNID_CODIGO_GESTOR_CADASTRO,              
      @CADASTROPROPRIO = IDTCADASTROPROPRIO,              
         @CADASTROPROVISORIO = IDTCADASTROPROVISORIO              
  FROM PARAMETRO_UNIDADE_REDE              
  WHERE UNID_CODIGO = @UNID_CODIGO              
                
  SET @datahoje = Convert (varchar, getdate (), 103)              
                  
  -- Este caso verifica se a uniade utiliza cadastro prÃ³prio, ou nÃ£o possui cadastro prÃ³prio              
  -- mas com cadastro provisÃ³rio. Para este caso, o pac_codigo gerado serÃ¡ com o cÃ³digo da prÃ³pria unidade              
  IF (@UNID_GESTORA IS NULL) OR (@CADASTROPROPRIO = 'S' OR (@CADASTROPROPRIO = 'N' AND @CADASTROPROVISORIO = 'S'))              
   EXEC ksp_controle_sequencial @Unidade    = @unid_codigo ,              
       @Chave      = 'paciente',              
       @data       = @datahoje,              
       @NovoCodigo = @UltCodigo OUTPUT              
  ELSE              
   EXEC ksp_controle_sequencial @Unidade    = @UNID_GESTORA ,              
       @Chave      = 'paciente',              
       @data       = @datahoje,              
       @NovoCodigo = @UltCodigo OUTPUT              
  select @UltCodigo              
                
              
       End              
------------------------------- HOMONIMOS: NOME + MAE + DT NASAC ------------------------------              
If @Opcao = 6              
 Begin              
  SELECT  Count(Pac_Codigo)              
  FROM  PACIENTE              
  WHERE Pac_nome  = @Pac_Nome              
  AND  Pac_Nascimento  = @Pac_Nascimento              
  AND     Pac_Mae  = @Pac_Mae              
  AND     UNID_CODIGO = @UNID_CODIGO              
              
 End              
------------------------------- HOMONIMOS: NOME + DT NASAC ------------------------------------              
If @Opcao = 7              
 Begin              
  SELECT  Count(Pac_Codigo)              
  FROM  PACIENTE              
  WHERE Pac_nome  = @Pac_Nome              
  AND  Pac_Nascimento  = @Pac_Nascimento              
  AND     UNID_CODIGO = @UNID_CODIGO              
              
 End              
------------------------------- HOMONIMOS: NOME -----------------------------------------------              
If @Opcao = 8              
 Begin              
   /*  SELECT  Count(Pac_Codigo)              
  FROM  PACIENTE              
     WHERE Pac_nome  = @Pac_Nome              
  AND   UNID_CODIGO = @UNID_CODIGO        
  */       
        
  set @lsql = 'SELECT Count(Pac_Codigo)' +             
 'FROM  PACIENTE '+              
 'WHERE Pac_nome = ''' + @pac_nome + ''''        
            
                  
   select @unid_gestora = unid_codigo_gestor_cadastro,              
    @cadastroproprio = idtcadastroproprio,              
    @cadastroprovisorio = idtcadastroprovisorio              
   from   parametro_unidade_rede              
   where  unid_codigo = @unid_codigo          
            
   if @unid_gestora is not null              
    begin              
      if @cadastroprovisorio = 'S'              
       begin              
       set @lSql = @lSql + ' And (pac_codigo like ' + '''' + right(@unid_codigo, 2) + '%' + ''''              
       set @lSql = @lSql + ' Or pac_codigo like ' + '''' + right(@unid_gestora, 2) + '%' + '''' + ') '              
       end              
      else              
       set @lSql = @lSql + ' And pac_codigo like ' + '''' + right(@unid_gestora, 2) + '%' + ''''              
    end              
   else              
   begin              
    set @lSql = @lSql + ' And pac_codigo like ' + '''' + right(@unid_codigo, 2) + '%' + ''''              
   end        
      
 exec (@lSql)                 
 End               
------------------------------- REMOVER PRONTUARIOS DUPLICADOS---------------------------------              
If @Opcao = 9              
 Begin              
  DELETE FROM PACIENTE_PRONTUARIO              
  WHERE Pac_Codigo  <> @Pac_Codigo              
  AND Pac_Prontuario_Numero = @Pac_Prontuario              
  AND     UNID_CODIGO=@UNID_CODIGO              
              
 End              
------------------------------- MAIOR PRONTUARIO COM MAX --------------------------------------              
If @Opcao = 10              
 Begin              
/*              
  SELECT MAX(PAC_PRONTUARIO_NUMERO)              
  FROM   PACIENTE_PRONTUARIO              
  WHERE  PAC_PRONTUARIO_NUMERO IS NOT NULL              
  AND    Unid_Codigo = ISNULL(@UNID_CODIGO,Unid_Codigo)              
*/              
  SELECT CTRLSEQ_PROXIMO              
  FROM CONTROLE_SEQUENCIAL              
  WHERE CTRLSEQ_CHAVE = 'PRONTUARIO'              
    AND UNID_CODIGO = ISNULL(@UNID_CODIGO,Unid_Codigo)              
              
 End              
------------------------------- MAIOR PRONTUARIO COM TOP 100 --------------------------------------              
If @Opcao = 11              
 Begin              
              
        SELECT TOP 100  PAC_PRONTUARIO_NUMERO PAC_PRONTUARIO              
  FROM  PACIENTE_PRONTUARIO              
  WHERE   Unid_Codigo = ISNULL(@UNID_CODIGO,Unid_Codigo)              
                AND     PAC_PRONTUARIO_NUMERO IS NOT NULL              
  GROUP BY PAC_PRONTUARIO_NUMERO              
  HAVING MAX(LEN(RTRIM(PAC_PRONTUARIO_NUMERO)))=LEN(RTRIM(PAC_PRONTUARIO_NUMERO))              
  ORDER BY PAC_PRONTUARIO_NUMERO DESC              
              
 End              
------------------------------- PRONTU-RIOS REPETIDOS --- --------------------------------------              
If @Opcao = 12              
 Begin              
              
              
        SELECT SUM(campo1)              
        from              
        (              
        SELECT COUNT(PAC_PRONTUARIO_NUMERO) AS CAMPO1              
        FROM PACIENTE_PRONTUARIO              
        WHERE UNID_CODIGO=ISNULL(@UNID_Codigo,UNID_CODIGO)              
        AND PAC_PRONTUARIO_NUMERO IS NOT NULL              
        AND PAC_PRONTUARIO_NUMERO=ISNULL(rtrim(ltrim(@Pac_Prontuario)),PAC_PRONTUARIO_NUMERO)                
  AND PAC_CODIGO <> ISNULL(@PAC_CODIGO, '')              
--      GROUP BY PAC_PRONTUARIO_NUMERO              
--      HAVING COUNT(PAC_PRONTUARIO_NUMERO)>1              
        ) as TABELA              
              
 End              
------------------------------- GERA PRONTU-RIO -----------------------------------------------              
If @Opcao = 13             -- ver esta logica com sergio              
 Begin              
              
        DECLARE @NovoProntuario char(10)              
        DECLARE @CONT AS INT              
 DECLARE @SAI AS INT              
              
 SET @SAI = 0              
              
 WHILE @SAI = 0              
 BEGIN                       
         EXEC ksp_controle_sequencial @Unidade    = @Unid_Codigo,              
          @Chave      = 'PRONTUARIO',              
          @data       = NULL,              
          @NovoCodigo = @NovoProntuario OUTPUT,              
               @opcao=1              
              
  SET @NovoProntuario = CONVERT(VARCHAR, CONVERT(INT, @NovoProntuario))            
              
  SELECT @CONT = COUNT(1)              
  FROM PACIENTE_PRONTUARIO              
  WHERE PAC_PRONTUARIO_NUMERO = @NovoProntuario              
    AND UNID_CODIGO = @UNID_CODIGO              
              
  IF @CONT = 0              
   SET @SAI = 1              
              
 END               
              
              
 SELECT @CONT = COUNT(1)              
 FROM PACIENTE_PRONTUARIO              
 WHERE PAC_CODIGO = @PAC_CODIGO              
   AND UNID_CODIGO = @UNID_CODIGO              
                
 IF @CONT > 0              
  UPDATE PACIENTE_PRONTUARIO              
  SET PAC_PRONTUARIO_NUMERO = @NovoProntuario              
  WHERE PAC_CODIGO = @PAC_CODIGO              
    AND UNID_CODIGO = @UNID_CODIGO              
 ELSE              
  INSERT INTO Paciente_Prontuario (Pac_Codigo,Unid_Codigo,Pac_Prontuario_Numero,usu_codigo)              
  VALUES (@PAC_CODIGO,@UNID_CODIGO,@NovoProntuario,@usu_codigo)              
              
 select @NovoProntuario              
              
 End              
------------------------------- LOCALIZAR -----------------------------------------------------              
if @opcao = 14 or @opcao = 19 -- pesquisar do central              
begin              
 --> retorna o codigo do municipio da unidade              
 declare @var_cod_ibge varchar(7)              
              
 select @var_cod_ibge = m.cod_ibge              
              
 from  unidade u              
              
 inner join cep c              
 on u.cep_sequencial = c.cep_sequencial              
              
 inner join municipio m on (c.mun_codigo = m.mun_codigo)              
 where u.unid_codigo = @unid_codigo              
 -----------------------------------------------------------              
              
 declare @var1  varchar(255)              
              
 if Len(rtrim(ltrim(@Pac_Cartao_NDSTAIDS))) = 14              
  Set @Pac_Cartao_NDSTAIDS = right(rtrim(ltrim(@Pac_Cartao_NDSTAIDS)), 7)              
                 
 if @opcao = 19              
  Set @lSql = 'Select p.pac_nome, p.pac_mae, p.pac_nascimento, p.pac_Codigo, pp.Pac_Prontuario_Numero pac_prontuario, p.pac_pai, p.pac_local_posse, pp.unid_codigo, p.pac_cartao_nsaude, pim.PacIdMun_Codigo, cast(p.pac_observacao as varchar), p.pac_possui_
d  
ocumento, p.pac_dtobito, '              
 else              
  Set @lSql = 'Select p.pac_Codigo, p.pac_nome, pp.Pac_Prontuario_Numero pac_prontuario, p.pac_pai, p.pac_mae, p.pac_nascimento, p.pac_local_posse, cast(p.pac_observacao as varchar), p.pac_possui_documento, p.pac_dtobito, '              
              
 Set @lSql = @lSql + 'isnull((Select top 1 ' + '''' + 'S' + '''' + ' from internacao i '              
 Set @lSql = @lSql + 'where i.pac_codigo = p.pac_codigo '              
 Set @lSql = @lSql + 'and i.inter_dtalta is null), ' + '''' + 'N' + '''' + '), p.pac_cartao_nsaude, pim.PacIdMun_Codigo, p.pac_sexo, p.pac_raca, p.pac_idade, p.pac_justificativa_resp, pac_justificativa, pac_obs_telefone, '              
 Set @lSql = @lSql + 'PACCNS.paccns_identidade_numero as Paccns_Identidade_Numero '              
 Set @lSql = @lSql + ',Pac_CPF_Responsavel '    
 Set @lSql = @lSql + ' From Paciente P '              
 Set @lSql = @lSql + ' LEFT JOIN Paciente_Militar pm ON p.pac_codigo = pm.pac_codigo '              
 Set @lSql = @lSql + ' LEFT JOIN Paciente_Identificacao_Municipio PIM  ON p.pac_codigo = pim.pac_codigo and pim.cod_ibge = ''' + @var_cod_ibge + '''' -- + ' and (PIM.cod_ibge + PIM.pacidmun_codigo) = ''' + @Pac_CMS + ''''             
 Set @lSql = @lSql + ' LEFT JOIN Paciente_Prontuario pp ON (p.pac_codigo = pp.pac_codigo  And pp.unid_codigo = ''' + @unid_codigo + '''' + ') '              
 Set @lSql = @lSql + ' LEFT JOIN PACIENTE_CNS PACCNS ON PACCNS.PAC_CODIGO = P.PAC_CODIGO '        
 Set @lSql = @lSql + ' WHERE 1 = 1 '              
                
              
 set @unid_gestora = null              
                
 select  @unid_gestora = unid_codigo_gestor_cadastro,              
     @cadastroproprio = idtcadastroproprio,              
  @cadastroprovisorio = idtcadastroprovisorio              
 from  parametro_unidade_rede              
 where  unid_codigo = @unid_codigo              
          
 if @unid_gestora is not null              
 begin              
  if @cadastroprovisorio = 'S'              
  begin              
   set @lSql = @lSql + ' And (p.pac_codigo like ' + '''' + right(@unid_codigo, 2) + '%' + ''''              
   set @lSql = @lSql + ' Or p.pac_codigo like ' + '''' + right(@unid_gestora, 2) + '%' + '''' + ') '              
  end              
  else              
   set @lSql = @lSql + ' And p.pac_codigo like ' + '''' + right(@unid_gestora, 2) + '%' + ''''              
 end              
 else              
 begin              
  set @lSql = @lSql + ' And p.pac_codigo like ' + '''' + right(@unid_codigo, 2) + '%' + ''''              
 end              
              
 if @tp_pesq is not null              
 begin              
  -- Pesquisa por CODIGO              
  If @Pac_Codigo is Not Null              
  Begin              
          Set @var1 =  convert(varchar,@Pac_Codigo)              
          Exec ksp_ParametroPesquisa @var1,"p.pac_codigo", @tp_pesq, "T", @par output              
          set @lSql = @lSql + ' and ' + @par              
  End              
              
  If @Pac_Observacao is Not Null              
  Begin              
          Set @var1 =  convert(varchar, @Pac_Observacao)              
          Exec ksp_ParametroPesquisa @var1,"p.pac_observacao", @tp_pesq, "T", @par output              
          set @lSql = @lSql + ' and ' + @par              
  End              
              
  -- Pesquisa por NOME              
  If @Pac_Nome is Not Null              
  Begin              
   Set @var1 =  convert(varchar,@Pac_Nome)              
   Exec ksp_ParametroPesquisa @var1,"p.pac_nome",@tp_pesq, "T", @par output              
   set @lSql = @lSql + ' and ' + @par              
  End              
              
 -- Pesquisa por PRONTUARIO             
  If @Pac_Prontuario is Not Null              
  Begin              
  set @lSql = @lSql + ' and CHARINDEX('''+ LTRIM(RTRIM(@Pac_Prontuario)) + ''',pp.Pac_Prontuario_Numero) > 0 '    
     end              
              
  -- NOME DO PAI              
  If @Pac_Pai is Not Null              
  Begin              
              Set @var1 =  convert(varchar,@Pac_Pai)              
              Exec ksp_ParametroPesquisa @var1,"p.pac_pai",@tp_pesq,"T", @par output              
   set @lSql = @lSql + ' and ' + @par              
  End              
      
  -- CPF      
  If @Pac_Cpf is Not Null              
  Begin              
              Set @var1 =  convert(varchar,@Pac_Cpf)              
              Exec ksp_ParametroPesquisa @var1,"p.Pac_Cpf",@tp_pesq,"T", @par output              
 set @lSql = @lSql + ' and ' + @par              
  End           
              
  --NOME DA MAE              
  If @Pac_Mae is Not Null              
  Begin              
              Set @var1 =  convert(varchar,@Pac_Mae)              
              Exec ksp_ParametroPesquisa @var1,"p.pac_mae",@tp_pesq,"T", @par output              
   set @lSql = @lSql + ' and ' + @par              
End        
  --NOME DA MAE              
  If @Pac_Cpf is Not Null              
  Begin              
              Set @var1 =  convert(varchar,@Pac_Cpf)              
              Exec ksp_ParametroPesquisa @var1,"p.Pac_Cpf",@tp_pesq,"T", @par output              
 set @lSql = @lSql + ' and ' + @par              
  End              
              
  --DATA DE NASCIMENTO              
  If @Pac_Nascimento is Not Null              
  Begin              
   declare @Inicio as smalldatetime              
   declare @Fim as smalldatetime              
              
   set @Inicio = convert(smalldatetime, convert(char(10), @Pac_Nascimento, 103), 120)              
   set @Fim = dateadd(dd, 1, convert(smalldatetime, convert(char(10), @Pac_Nascimento, 103), 120))              
   set @lSql = @lSql + ' and p.pac_nascimento >= ' + '''' + convert(varchar, @Inicio) + ''''              
   set @lSql = @lSql + ' and p.pac_nascimento < ' + '''' + convert(varchar, @Fim) + ''''              
  End              
              
  -- Pesquisa por RG (militar)              
  If @Pac_Numero_Documento is Not Null              
  Begin              
          Set @var1 =  convert(varchar,@Pac_Numero_Documento)              
          Exec ksp_ParametroPesquisa @var1,"pm.mil_documento", @tp_pesq, "T", @par output              
          set @lSql = @lSql + ' and ' + @par              
  End              
              
  -- Pesquisa por CNS              
  If @Pac_Cartao_NSaude is Not Null              
  Begin              
          Set @var1 =  convert(varchar,@Pac_Cartao_NSaude)              
          Exec ksp_ParametroPesquisa @var1,"p.pac_cartao_nsaude", @tp_pesq, "T", @par output              
          set @lSql = @lSql + ' and ' + @par              
  End              
              
  -- Pesquisa por ID do municipio (Paciente_Identificacao_Municipio)              
  If @Pac_Cartao_NDSTAIDS is Not Null              
  Begin              
          Set @var1 =  convert(varchar,@Pac_Cartao_NDSTAIDS)              
          Exec ksp_ParametroPesquisa @var1,"pim.PacIdMun_Codigo", @tp_pesq, "T", @par output              
          set @lSql = @lSql + ' and ' + @par              
  End        
          
  --identidade / Central de Cadastro             
  If @Pac_Paccns_Identidade_Numero is Not Null              
  Begin              
          Set @var1 =  convert(varchar,@Pac_Paccns_Identidade_Numero)              
          Exec ksp_ParametroPesquisa @var1,"PACCNS.paccns_identidade_numero", @tp_pesq, "T", @par output              
          set @lSql = @lSql + ' and ' + @par              
  End        
          
 IF @PAC_CMS IS NOT NULL        
 BEGIN         
    Set @var1 =  convert(varchar,@PAC_CMS)              
    Exec ksp_ParametroPesquisa @var1,"PIM.PacIdMun_Codigo ", @tp_pesq, "T", @par output              
    set @lSql = @lSql + ' and ' + @par                  
 END        
              
              
 End              
--   print (@lSql)          
 exec (@lSql)              
end              
              
------------------------------ LOCALIZAR (tela Principal)--------------------------------------              
If @Opcao = 15              
              
 Begin              
              
  if Len(rtrim(ltrim(@Pac_Cartao_NDSTAIDS))) = 14              
   Set @Pac_Cartao_NDSTAIDS = right(rtrim(ltrim(@Pac_Cartao_NDSTAIDS)), 7)              
               
  set @lSql = 'SELECT '              
  set @lSql = @lSql + 'P.Pac_Codigo, P.Pac_Nome,ppr.Pac_Prontuario_numero as pac_prontuario, p.pac_telefone,c.con_descricao, Pac_Cartao_NSaude, pim.PacIdMun_Codigo, P.Pac_Nascimento,ppr.unid_codigo, p.pac_dtobito, P.Pac_Sexo, '              
  set @lSql = @lSql + 'P.Pac_Mae, P.Pac_Pai, p.pac_dtObito, P.Pac_dtmatricula, P.Pac_Responsavel, p.pac_cpf, u.unid_descricao, p.Pac_CPF_Responsavel  '              
  set @lSql = @lSql + 'FROM  Paciente P LEFT JOIN paciente_plano pp ON p.pac_codigo = pp.pac_codigo '              
  set @lSql = @lSql + ' LEFT JOIN Plano_saude pl ON pp.plan_codigo = pl.plan_codigo '              
  set @lSql = @lSql + ' LEFT JOIN Convenio c ON pl.con_codigo = c.con_codigo '              
  set @lSql = @lSql + ' LEFT JOIN Paciente_Identificacao_Municipio PIM ON PIM.pac_codigo = p.pac_codigo '              
  set @lSql = @lSql + ' LEFT join paciente_prontuario ppr on (p.pac_codigo = ppr.pac_codigo And ppr.unid_codigo = ''' + @unid_codigo + '''' + ') '              
  set @lSql = @lSql + ' LEFT join unidade u on right(u.unid_codigo,2) = left(p.pac_codigo,2) '              
  set @lSql = @lSql + 'WHERE 1 = 1 '              
              
  SET @UNID_GESTORA = NULL              
                
  SELECT @UNID_GESTORA = UNID_CODIGO_GESTOR_CADASTRO,              
      @CADASTROPROPRIO = IDTCADASTROPROPRIO,              
         @CADASTROPROVISORIO = IDTCADASTROPROVISORIO              
  FROM PARAMETRO_UNIDADE_REDE              
  WHERE UNID_CODIGO = @UNID_CODIGO              
              
  IF @UNID_GESTORA IS NOT NULL              
  BEGIN              
   IF @CADASTROPROVISORIO = 'S'              
   BEGIN              
    set @lSql = @lSql + ' And (p.pac_codigo like ' + '''' + right(@unid_codigo, 2) + '%' + ''''              
    set @lSql = @lSql + ' Or p.pac_codigo like ' + '''' + right(@unid_gestora, 2) + '%' + '''' + ') '              
   END              
   ELSE              
    set @lSql = @lSql + ' And p.pac_codigo like ' + '''' + right(@unid_gestora, 2) + '%' + ''''              
  END              
  ELSE              
  BEGIN              
   IF @unid_codigo <> '    '              
   BEGIN              
    set @lSql = @lSql + ' And p.pac_codigo like ' + '''' + right(@unid_codigo, 2) + '%' + ''''              
   END              
  END                 
                 
                 
                 
--WEB e MULTI-UNIDADE              
 /* If @unid_Codigo is Not Null              
  Begin              
   Set @lSql = @lSql + ' And (p.unid_codigo = ' + @unid_Codigo + ') '              
  End*/              
              
  if @pac_codigo is not null              
  begin              
   set @lSql = @lSql + ' And p.pac_codigo = ''' + @pac_codigo + ''''              
  end              
  if @pac_nome is not null              
  begin              
   set @lSql = @lSql + ' And p.pac_nome LIKE ''' + ltrim(rtrim(@pac_nome)) + '%'''              
  end              
  if @pac_prontuario is not null              
  begin              
   -- ALTERAÂª+O EFETUADA PELO MARCOS LIMA EM VIRTUDE DE PERFORMACE DO BANCO              
   -- PARA ESTE OPCAO FUNCIONAR CORRETAMENTE + NECESS-RIO QUE TODOS OS              
   -- NR DE PRONTU-RIO ESTEJA COM 7 DIGITOS              
   set @lSql = @lSql + ' And ppr.Pac_Prontuario_Numero = ''' + @pac_prontuario + ''''              
              
  end              
  if @Pac_Cartao_NSaude is not null              
  begin              
   set @lSql = @lSql + ' And p.Pac_Cartao_NSaude = ''' + @Pac_Cartao_NSaude + ''''              
  end              
              
  if @Pac_Cartao_NDSTAIDS is not null              
  begin              
   set @lSql = @lSql + ' And pim.PacIdMun_Codigo = ''' + @Pac_Cartao_NDSTAIDS + ''''              
  end              
              
  set @lSql = @lSql + ' order by p.pac_nome '              
              
  Exec (@lSql)              
              
 End              
------------------------------- PEDIDO DE ITERNACAO ABERTO -------------------------------------              
If @Opcao = 16              
 Begin              
  SELECT  PD.Pedint_sequencial,              
   NULL INTER_PEDINT_SEQUENCIAL              
              
  FROM  Pedido_Internacao PD              
              
  WHERE  PD.pac_codigo = @PAC_CODIGO              
  AND PD.pedint_sequencial NOT IN (SELECT pedint_sequencial FROM INTERNACAO              
       WHERE pac_codigo = @PAC_CODIGO)              
              
 End              
------------------------------------------------------------------------------------------------              
If @Opcao = 17 --Internacoes do Paciente              
 Begin              
  declare @JaEsteveInternado  CHAR(01)              
  declare @EstaInternado   CHAR(01)              
              
  Set @JaEsteveInternado = 'N'              
  Set @EstaInternado = 'N'              
              
  Select @JaEsteveInternado = 'S'              
  From Internacao              
  Where Pac_Codigo = @Pac_Codigo              
  And Inter_DtAlta is not null              
              
  Select @EstaInternado = 'S'              
  From Internacao              
  Where Pac_Codigo = @Pac_Codigo              
  And Inter_DtAlta is null              
              
  Select  @Pac_Codigo   PAC_CODIGO,              
   @JaEsteveInternado  INTERNACAO_ANTERIOR,              
   @EstaInternado  INTERNACAO_ATUAL              
              
              
              
 End              
          If @Opcao = 18 --Cep no DAIH070              
 Begin              
  Select  D.Cep              
              
  From  Daih070 D              
              
  Where D.Cep = @Pac_Codigo -- reaproveitamento de paramentro (rece o nÃ€mero do cep)              
 End              
              
--If @Opcao = 19 -- Pesquisar do Central: c=digo na optpo 14.... pr=xima optpo se3rÂ¯ a 20              
              
if @opcao = 20 --Verificar NÃºmero do CartÃ£o Municipal              
begin              
 select  pm.pacidmun_codigo, m.cod_ibge, m.mun_descricao              
 from unidade u               
 inner join cep c on c.cep_sequencial = u.cep_sequencial              
 inner join municipio m on m.mun_codigo = c.mun_codigo              
 left join paciente_identificacao_municipio pm on pm.cod_ibge = m.cod_ibge  and pm.pac_codigo = @Pac_Codigo              
 where  u.unid_codigo = @Unid_Codigo              
              
End              
              
if @opcao = 21 --Gerar NÃºmero do CartÃ£o Municipal              
begin              
              
 declare @pacidmun_codigo char(7)              
 declare @cod_ibge char(7)              
              
 select @cod_ibge = m.cod_ibge               
 from unidade u               
 inner join cep c on c.cep_sequencial = u.cep_sequencial              
 inner join municipio m on m.mun_codigo = c.mun_codigo              
 where u.unid_codigo = @Unid_Codigo              
              
              
 select @pacidmun_codigo = right('0000000' + ltrim(rtrim(cast(cast(max(pacidmun_codigo) as bigint) + 1 as varchar))),7)              
  from paciente_identificacao_municipio              
  where cod_ibge = @cod_ibge              
               
 Insert into paciente_identificacao_municipio (pacidmun_codigo,pac_codigo,cod_ibge)              
  values ( @pacidmun_codigo, @Pac_Codigo, @cod_ibge)              
              
 select @pacidmun_codigo pacidmun_codigo              
              
end              
              
------------------------------------------------------------------------------------------------              
              
if @opcao = 22              
    begin              
        UPDATE  Paciente               
        SET pac_dtobito = @dt_obito              
  WHERE Pac_Codigo = @Pac_Codigo              
  IF (@Pac_Causa_Mortis IS NOT NULL AND LTRIM(RTRIM(@Pac_Causa_Mortis)) <> '')              
  BEGIN              
    UPDATE Paciente              
            SET pac_causa_mortis = @pac_causa_mortis              
    WHERE Pac_Codigo = @Pac_Codigo              
  END              
    end              
              
------------------------------------------------------------------------------------------------              
If @Opcao = 23 --Altera o Status do cadastro              
 Begin              
  UPDATE PACIENTE              
  SET PAC_STATUS_CADASTRO = @PAC_STATUS              
  WHERE PAC_CODIGO = @PAC_CODIGO              
 End              
              
-- VERIFICA HOMONIMOS DO PACIENTE PELO NOME, NOME DA MÃƒE E DATA NASCIMENTO              
-- SE NÃƒO ENCONTRA VERIFICA SE HÃ PACIENTE COM O MESMO NOME DE MÃƒE E DATA NASCIMENTO              
-- ESTA OPÃ‡ÃƒO Ã‰ UTILIZADA PELA VERIFICAÃ‡ÃƒO DE HOMONOMINOS DO PRONTUÃRIO MÃ‰DICO USPri DA SEAP              
if @Opcao=24              
BEGIN              
              
 SELECT  P.*, U.UNID_DESCRICAO              
 FROM  PACIENTE P              
  LEFT OUTER JOIN UNIDADE U ON P.UNID_CODIGO = U.UNID_CODIGO              
 WHERE Pac_nome  LIKE @Pac_Nome + '%'              
 AND  Pac_Nascimento  = @Pac_Nascimento              
 AND     Pac_Mae  = @Pac_Mae              
               
IF (@@ROWCOUNT = 0)              
 BEGIN              
  SELECT  P.*, U.UNID_DESCRICAO              
  FROM  PACIENTE P              
   LEFT OUTER JOIN UNIDADE U ON P.UNID_CODIGO = U.UNID_CODIGO              
              
               
  WHERE  Pac_Nascimento  = @Pac_Nascimento              
  AND     Pac_Mae  = @Pac_Mae              
 END               
              
END           
IF @OPCAO = 25 --BUSCA PACIENTE PELO CODIGO DO CARTAO PROVISORIO OU DEFINITIVO          
BEGIN          
          
 SELECT PAC_CODIGO, PAC_NOME, PAC_MAE, PAC_NASCIMENTO, PAC_CARTAO_NSAUDE, PAC_CARTAO_NSAUDE_PROVISORIO,           
  PAC_CARTAO_NSAUDE_PROVISORIO_DATA, CEP_SEQUENCIAL, PAC_NACIONALIDADE, PAC_SEXO, PAC_NATURALIDADE, PAC_TELEFONE,           
  PAC_ENDERECO_NUM, PAC_ENDERECO_COMPL, UNID_CODIGO, PAC_RACA, PAC_IDADE, PAC_CERTIDAONASCIMENTO           
 FROM PACIENTE          
 WHERE (PAC_CARTAO_NSAUDE = @PAC_CARTAO_NSAUDE          
  OR PAC_CARTAO_NSAUDE_PROVISORIO = @PAC_CARTAO_NSAUDE_PROVISORIO)          
  AND UNID_CODIGO = @UNID_CODIGO           
          
END         
        
--> Consulta do Servico Java        
        
if (@opcao = 26)          
begin          
          
 declare @sql varchar(8000)          
          
 set @sql =   'select top 100 p.pac_codigo, ' +           
   ' p.pac_nome, ' +          
   ' p.pac_mae, ' +          
   ' p.pac_pai, ' +          
   ' p.pac_sexo, ' +          
   ' p.pac_nascimento, ' +           
   ' p.pac_cpf, ' +           
   ' p.pac_cartao_nsaude, ' +          
   ' pp.pac_prontuario_numero as pac_prontuario, ' +           
   ' pp.unid_codigo, ' +           
   ' u.unid_sigla, ' +          
   ' r.raca_desc, ' +          
   ' p.pac_naturalidade, ' +          
   ' p.pac_responsavel, ' +          
   ' ec.estcivil_descricao, ' +    
   ' p.Pac_CPF_Responsavel ' +    
           
   ' from paciente p ' +           
   ' inner join unidade uu on uu.unid_codigo = p.unid_codigo ' +          
   ' left join paciente_prontuario pp on p.pac_codigo = pp.pac_codigo ' +          
   ' left join unidade u on pp.unid_codigo = u.unid_codigo ' +          
   ' left join raca r on p.raca_codigo = r.raca_codigo ' +        
   ' left join estadocivil ec on ec.estcivil_codigo = p.estcivil_codigo ' +      
   ' where 1 =1 '           
           
 if @pac_cnes is not null          
 begin        
  set @sql = @sql + ' and (uu.unid_CodigoCNES = ''' + ltrim(rtrim(@pac_cnes)) + ''' or uu.unid_codigo = ''' + ltrim (rtrim(@pac_cnes)) + ''')'        
 end        
           
 if @pac_codigo is not null          
  set @sql = @sql + ' and p.pac_codigo like ' + '''' + ltrim(rtrim(@pac_codigo)) + '%'''          
           
 if @pac_nome is not null          
  set @sql = @sql + ' and p.pac_nome like ' + '''' + ltrim(rtrim(@pac_nome)) + '%'''          
           
 if @pac_prontuario is not null          
  set @sql = @sql + ' and pp.pac_prontuario_numero like ' + '''' + ltrim(rtrim(@pac_prontuario)) + '%'''          
            
 if @Pac_Mae is not null          
  set @sql = @sql + ' and p.pac_mae like ' + '''' + ltrim(rtrim(@Pac_Mae)) + '%'''          
            
 if @Pac_Nascimento is not null          
  set @sql = @sql + ' and p.Pac_Nascimento = ' + '''' + ltrim(rtrim(@Pac_Nascimento)) + ''''          
            
 if @Pac_CPF is not null          
  set @sql = @sql + ' and p.Pac_CPF like ' + '''' + ltrim(rtrim(@Pac_CPF)) + '%'''          
            
 set @sql = @sql + ' order by p.pac_nome '          
           
 --print(@sql)           
           
 exec(@sql)          
          
end          
------------------------------- NUMERO DO PROXIMO CODIGO - DATA RETROATIVA --------------------------------------                
                
If @Opcao = 28      
Begin                
                
  DECLARE @dtHoje CHAR (10)                
                
  SET @UNID_GESTORA = NULL                
                  
  SELECT @UNID_GESTORA = UNID_CODIGO_GESTOR_CADASTRO,                
      @CADASTROPROPRIO = IDTCADASTROPROPRIO,                
         @CADASTROPROVISORIO = IDTCADASTROPROVISORIO                
  FROM PARAMETRO_UNIDADE_REDE                
  WHERE UNID_CODIGO = @UNID_CODIGO                
                  
  SET @dtHoje = Convert (varchar, @DATA_RETROATIVA,103)      
                    
  -- Este caso verifica se a uniade utiliza cadastro prÃƒÂ³prio, ou nÃƒÂ£o possui cadastro prÃƒÂ³prio                
  -- mas com cadastro provisÃƒÂ³rio. Para este caso, o pac_codigo gerado serÃƒÂ¡ com o cÃƒÂ³digo da prÃƒÂ³pria unidade                
  IF (@UNID_GESTORA IS NULL) OR (@CADASTROPROPRIO = 'S' OR (@CADASTROPROPRIO = 'N' AND @CADASTROPROVISORIO = 'S'))                
   EXEC ksp_controle_sequencial @Unidade    = @unid_codigo ,                
       @Chave      = 'paciente',                
       @data       = @dtHoje,                
       @NovoCodigo = @UltCodigo OUTPUT                
  ELSE                
   EXEC ksp_controle_sequencial @Unidade    = @UNID_GESTORA ,                
       @Chave      = 'paciente',                
       @data       = @dtHoje,                
       @NovoCodigo = @UltCodigo OUTPUT                
  select @UltCodigo                
                  
                
End                
        
        
If @Opcao = 29      
Begin       
      
 SELECT       
  P.*      
 FROM      
  PACIENTE P      
  INNER JOIN homonimo_processamento H ON P.PAC_CODIGO = H.pac_codigo_destino      
 WHERE      
  H.pac_codigo_Origem = @PAC_CODIGO      
end      
      
If @Opcao = 30      
Begin       
      
    
 declare @homonimo_processamento_id as bigint       
 declare @pac_codigo_origem as CHAR(12)       
 declare @pac_codigo_destino as CHAR(12)      
 declare @pac_codigo_pesquisa as CHAR(12)       
 declare @fim_pesq as int      
 declare @existe_pac as int      
 declare @pacientes_pesquisados as varchar(1000);    
 set @pacientes_pesquisados ='';    
 set @existe_pac = 0      
 set @pac_codigo_pesquisa = @Pac_Codigo    
 set @fim_pesq=0;      
 while (@fim_pesq = 0 )      
 BEGIN    
  SELECT top 1  @homonimo_processamento_id = homonimo_processamento_id,     
   @pac_codigo_origem =pac_codigo_origem,    @pac_codigo_destino = pac_codigo_destino        
   FROM homonimo_processamento     where pac_codigo_origem =  @pac_codigo_pesquisa     
   IF @homonimo_processamento_id IS NULL       
     set @fim_pesq =1;       
   else       
    begin    
        SELECT @existe_pac =count(*) FROM paciente  WHERE pac_codigo = @pac_codigo_destino       
        IF @existe_pac >0     
      BEGIN     
       select top 1 * from paciente where pac_codigo =@pac_codigo_destino;          
       break;        
      END     
     ELSE       
      IF @pac_codigo_destino IS NOT NULL          
       begin    
        if CHARINDEX(@pac_codigo_destino, @pacientes_pesquisados) =0    
         begin    
          SET @pac_codigo_pesquisa= @pac_codigo_destino;       
          set @pacientes_pesquisados =@pacientes_pesquisados +';' + @pac_codigo_pesquisa;    
         end    
        else    
         begin    
          set @fim_pesq =1;    
         end    
       end    
      else    
       set @fim_pesq =1;       
      end    
     END       
    
    
    
end      
    
 IF @OPCAO = 31    
 BEGIN    
  SELECT top 10 p.pac_codigo,    
    p.pac_nome as "Nome",     
    CASE     
     WHEN p.pac_sexo = 'M' THEN 'Masculino'    
     WHEN p.pac_sexo = 'F' THEN 'Feminino'    
    END as "Sexo",     
    p.pac_nascimento as "DataNascimento",     
    p.pac_idade as "Idade",     
    p.pac_mae as "NomeMae",     
    p.pac_telefone as "Telefone",     
    p.pac_dtobito as "DataObito",    
    pp.Pac_Prontuario_Numero as Prontuario    
   FROM paciente p    
  left join Paciente_Prontuario pp on pp.pac_codigo = p.pac_codigo    
  WHERE p.pac_nome like RTRIM(@Pac_Nome) + '%'     
  and p.unid_codigo = @Unid_Codigo    
  order by 2    
 END    
    
 IF @OPCAO = 32    
 BEGIN    
 if @Pac_CPF is not null    
  begin    
  SELECT pac_cpf, pac_cartao_nsaude, pac_codigo, pac_nome    
   FROM paciente     
  WHERE pac_cpf = @Pac_CPF    
  and unid_codigo = @Unid_Codigo     
 end    
 else if @Pac_Cartao_NSaude is not null or @Pac_Cartao_NSaude_Provisorio is not null    
  begin     
  SELECT pac_cpf, pac_cartao_nsaude, pac_codigo, pac_nome    
   FROM paciente     
  WHERE pac_cartao_nsaude = @pac_cartao_nsaude    
  or pac_cartao_nsaude_provisorio = @Pac_Cartao_NSaude_Provisorio    
  and unid_codigo = @Unid_Codigo    
 end     END    
    
 IF @OPCAO = 33    
 BEGIN    
  SELECT top 10 pac_codigo,    
    pac_nome_social as "Nome",     
    CASE     
     WHEN pac_sexo = 'M' THEN 'Masculino'    
     WHEN pac_sexo = 'F' THEN 'Feminino'    
    END as "Sexo",     
    pac_nascimento as "DataNascimento",     
    pac_idade as "Idade",     
    pac_mae as "NomeMae",     
    pac_telefone as "Telefone",     
    pac_obito as "DataObito"    
   FROM paciente     
  WHERE pac_nome_social like RTRIM(@Pac_Nome_Social) + '%'     
  and unid_codigo = @Unid_Codigo    
  order by 2    
 END    
    
IF @OPCAO = 34  
 BEGIN    
  
   UPDATE paciente  
      SET pac_cpf = @pac_cpf  
     , pac_cartao_nsaude = @Pac_Cartao_NSaude  
  , pac_mae = @Pac_Mae  
  , pac_nascimento = @Pac_Nascimento  
  , pac_sexo = @Pac_Sexo  
  , pac_raca = @Pac_Raca  
  , Cep_Sequencial = @Cep_Sequencial  
  , pac_pai = @pac_pai
  , pac_telefone = @pac_Telefone
  , pac_celular = @Pac_Celular
  , pac_email = @pac_email
    WHERE pac_codigo = @pac_codigo  
  
 END  
  
        
--if (@opcao = 26)        
--begin      
        
 --declare @sql varchar(8000)        
        
 --set @sql =   'select top 100 p.pac_codigo, ' +         
   --' p.pac_nome, ' +        
   --' p.pac_mae, ' +        
   --' p.pac_pai, ' +        
   --' p.pac_sexo, ' +        
   --' p.pac_nascimento, ' +         
   --' p.pac_cpf, ' +         
   --' p.pac_cartao_nsaude, ' +        
   --' pp.pac_prontuario_numero as pac_prontuario, ' +         
   --' pp.unid_codigo, ' +         
   --' u.unid_sigla, ' +        
   --' r.raca_desc ' +        
         
   --' from paciente p ' +         
   --' inner join unidade uu on uu.unid_codigo = p.unid_codigo ' +        
   --' left join paciente_prontuario pp on p.pac_codigo = pp.pac_codigo ' +        
   --' left join unidade u on pp.unid_codigo = u.unid_codigo ' +        
   --' left join raca r on p.raca_codigo = r.raca_codigo ' +        
   --' where 1 =1 '         
         
 --if @pac_cnes is not null        
  --set @sql = @sql + ' and uu.unid_CodigoCNES = ' + '''' + ltrim(rtrim(@pac_cnes)) + ''''        
         
 --if @pac_codigo is not null        
  --set @sql = @sql + ' and p.pac_codigo like ' + '''' + ltrim(rtrim(@pac_codigo)) + '%'''        
         
 --if @pac_nome is not null        
  --set @sql = @sql + ' and p.pac_nome like ' + '''' + ltrim(rtrim(@pac_nome)) + '%'''        
         
 --if @pac_prontuario is not null        
  --set @sql = @sql + ' and pp.pac_prontuario_numero like ' + '''' + ltrim(rtrim(@pac_prontuario)) + '%'''        
          
 --if @Pac_Mae is not null        
  --set @sql = @sql + ' and p.pac_mae like ' + '''' + ltrim(rtrim(@Pac_Mae)) + '%'''        
          
 --if @Pac_Nascimento is not null        
  --set @sql = @sql + ' and p.Pac_Nascimento = ' + '''' + ltrim(rtrim(@Pac_Nascimento)) + ''''        
          
 --if @Pac_CPF is not null        
  --set @sql = @sql + ' and p.Pac_CPF like ' + '''' + ltrim(rtrim(@Pac_CPF)) + '%'''        
          
 --set @sql = @sql + ' order by p.pac_nome '        
         
 --print(@sql)         
         
 --exec(@sql)        
        
--end        
------------------------------------------------------------------------------------------------            
set nocount off            
              
If (@@ERROR <> 0)              
       Begin              
          RAISERROR('ERRO - Tabela de Paciente.',1,1)              
                         
       End
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_PEP_Solicitacao_Pedido_Impresso]...';


GO
ALTER PROCEDURE [dbo].[ksp_PEP_Solicitacao_Pedido_Impresso]
@solped_codigo CHAR (12), @solped_tiposolicitacao INT, @unid_codigo CHAR (4), @viim_descricao VARCHAR (200)
AS
SET NOCOUNT ON  
  
 declare @viaimpressao int  
   
 exec ksp_via_impressao @viim_descricao = @viim_descricao, @viim_chave = @solped_codigo, @proximo = @viaimpressao output  
 set @viaimpressao = @viaimpressao /2
  
 --LABORATORIO  
 IF (@solped_tiposolicitacao = 7)   
 BEGIN  
  select sp.solped_datahora as atend_data  
  , p.pac_codigo  
  , case when p.pac_nome_social is null then p.pac_nome else rtrim(p.pac_nome_social) +' ['+rtrim(p.pac_nome)+']' end as pac_nome  
  , pac_prontuario_numero,
  r.Raca_Desc,   
  pac_idade=(cast(DateDiff(dd,  P.pac_nascimento, getdate()) as int) - (cast(DateDiff(yyyy, P.pac_nascimento,getdate()) as int) / 4)) / 365,  
  v.set_descricao as clinica,   
  case pac_sexo  
   when 'M' then 'Masculino'  
   when 'F' then 'Feminino' end as sexo,
   pa.spa_etnia as etinia,
   c.cep_cep as cep,
   c.cep_logradouro as logradouro,
   m.mun_descricao as municipio,
   m.uf_codigo,
   b.bai_descricao as bairro,    
  isnull(pac_cartao_nsaude,pac_cartao_nsaude_provisorio) as cns,    
  el.exalab_descricao exame,  
  el.proc_codigo as procedimento,
  el.cbo_codigo, 
  (select prof_nome from profissional prof where prof.prof_codigo=sp.prof_codigo and prof.locatend_codigo=sp.locatend_codigo) as medico,  
  (select prof_numconselho from profissional prof where prof.prof_codigo=sp.prof_codigo and prof.locatend_codigo=sp.locatend_codigo) as crm,  
  tipo_solicitacao = 7,  
  @viaimpressao viaimpressao  
  , convert(char(10),p.pac_nascimento,103) as pac_nascimento 
  , p.pac_telefone  
  , spe.solpedexa_codigo  
  , sp.solped_CodigoOrigem  
  , Oripac_descricao  
  , upr.LOGO  
  , upr.cabecalho_report1                                          
  , upr.cabecalho_report2    
  , upr.cabecalho_report3  
  , u.unid_descricao
  , u.unid_codigoCNES   
  , '' as complemento, '' as Incidencia  
  , lei.locint_descricao   
	, p.pac_celular
	, e.etnia_desc
	, m.cod_ibge
	, isnull(uam.upaatemed_Anamnese, pep.anamnese) as 'upaatemed_Anamnese'
	, spe.solpedexa_observacao

  from vwsolicitacao_pedido sp   
  join solicitacao_pedido_exame spe on sp.[ped_codigo] = spe.[ped_codigo]  
  join exame_laboratorio el on spe.solpedexa_codigo_exame = el.exalab_codigo  
  join vwlocal_unidade v on v.locatend_codigo = sp.locatend_codigo  
  join Paciente p on p.pac_codigo = sp.pac_codigo  
  left join Paciente_Prontuario pp on p.pac_codigo = pp.pac_codigo and pp.unid_codigo = @unid_codigo  
  inner join origem_paciente op    on sp.Oripac_Codigo = op.Oripac_Codigo   
  left  join unidade_parametro_relatorio upr  on upr.unid_codigo = sp.unid_codigo  
  inner join unidade u on sp.unid_codigo = u.unid_codigo  
  left join internacao i on (i.spa_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 5) or (i.emer_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 3) or (i.inter_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 4)   
  left join vwleito lei on i.locatend_leito = lei.locatend_codigo and i.lei_codigo = lei.lei_codigo
  left join atendimento_ambulatorial aa on sp.solped_CodigoOrigem = aa.spa_codigo
  left JOIN Pronto_Atendimento pa on pa.spa_codigo = aa.spa_codigo
  left JOIN etnias e on p.etnia_codigo = e.etnia_codigo
  left JOIN Raca r ON r.Raca_Codigo = p.raca_codigo
  left JOIN cep c ON c.cep_sequencial = p.cep_sequencial 
  left JOIN municipio m ON m.mun_codigo = c.mun_codigo
  left JOIN bairro b ON b.bai_codigo = c.bai_codigo and b.mun_codigo = c.mun_codigo  
  left join internacao_pep pep on i.inter_codigo = pep.inter_codigo
  left join UPA_Atendimento_Medico uam on aa.atendamb_codigo = uam.atendamb_codigo 

  where solped_tiposolicitacao = @solped_tiposolicitacao  
  and sp.[solped_codigo] = @solped_codigo  
 END  
   
 --RADIOLOGICO  
 ELSE IF(@solped_tiposolicitacao = 8)  
 BEGIN   
   
 declare @incidencia  as nvarchar(500)  
 declare @exainc_codigo as int  
 declare @incidenciadescricao  as nvarchar(500)  
 declare @solpedexa_codigo as char(18)  
  
 create table #tmp_incidencia  
 (  
 solpedexa_codigo char(18) null,  
 atend_data datetime null,  
 pac_nome varchar(200) null,  
 pac_codigo char(12) null,  
 pac_prontuario_numero char(10) null,  
 Raca_Desc varchar(30) null,
 pac_idade int null,  
 clinica varchar(30) null,  
 sexo varchar(10) null,  
 etnia char(4) null,
 cep char(12) null,
 logradouro char(200) null,
 municipio char(200) null,
 uf_codigo char(2) null, 
 bairro char(200) null,
 cns char(15) null,  
 exame varchar(75) null,  
 medico varchar(50) null,  
 crm char(15) null,  
 tipo_solicitacao int null,  
 viaimpressao int null,  
 complemento varchar(10) null,  
 Incidencia varchar(500) null  
 , pac_nascimento char(10) null  
 , solped_CodigoOrigem varchar(12) null  
 , Oripac_descricao varchar(30) null  
 , LOGO image null  
 , cabecalho_report1 varchar(100) null                                           
 , cabecalho_report2 varchar(100) null    
 , cabecalho_report3 varchar(100) null  
 , unid_descricao varchar(50) null  
 , unid_codigoCNES varchar(30) null
 , locint_descricao varchar(100) null  
 , pac_telefone char(20)
 , pac_celular char(20)
 , etnia_desc varchar(30)
 , cod_ibge varchar(100)
 , upaatemed_Anamnese varchar(2000)
 , solpedexa_observacao varchar(200)
 )   
  
 insert into #tmp_incidencia  
 (solpedexa_codigo, atend_data, pac_nome, pac_codigo, pac_prontuario_numero, Raca_Desc,    
 pac_idade, clinica, sexo, etnia, cep, logradouro, municipio, uf_codigo, bairro, cns, exame, medico, crm, tipo_solicitacao, viaimpressao, complemento, Incidencia  
      , pac_nascimento, solped_CodigoOrigem, Oripac_descricao, LOGO, cabecalho_report1, cabecalho_report2, cabecalho_report3  
      , unid_descricao, unid_codigoCNES, locint_descricao, pac_telefone, pac_celular, etnia_desc,  cod_ibge, upaatemed_Anamnese, solpedexa_observacao)         
  
 select spe.solpedexa_codigo, 
 sp.solped_datahora, 
  case when p.pac_nome_social is null then p.pac_nome else rtrim(p.pac_nome_social) +' ['+rtrim(p.pac_nome)+']' end as pac_nome,  
  p.pac_codigo,  
 pac_prontuario_numero,
 r.Raca_Desc,   
 pac_idade=(cast(DateDiff(dd,  P.pac_nascimento, getdate()) as int) - (cast(DateDiff(yyyy, P.pac_nascimento,getdate()) as int) / 4)) / 365,  
 v.set_descricao as clinica,   
  case pac_sexo  
   when 'M' then 'Masculino'  
   when 'F' then 'Feminino' end as sexo,
   p.etnia_codigo as etinia,
   c.cep_cep as cep,
   c.cep_logradouro as logradouro,
   m.mun_descricao as municipio,
   m.uf_codigo,
   b.bai_descricao as bairro,    
  isnull(pac_cartao_nsaude,pac_cartao_nsaude_provisorio) as cns,     
  er.exarad_descricao,  
  (select prof_nome from profissional prof where prof.prof_codigo=sp.prof_codigo and prof.locatend_codigo=sp.locatend_codigo),  
  (select prof_numconselho from profissional prof where prof.prof_codigo=sp.prof_codigo and prof.locatend_codigo=sp.locatend_codigo),  
  8,  
  @viaimpressao,  
  case  
  when solpedexa_complemento = '1' then 'Direito'  
  when solpedexa_complemento = '2' then 'Esquerdo'  
  when solpedexa_complemento = '3' then 'Bilateral'  
  end      
  , Null  
  , convert(char(10),p.pac_nascimento,103) as pac_nascimento  
  , sp.solped_CodigoOrigem  
  , op.Oripac_descricao  
      , upr.LOGO  
  , upr.cabecalho_report1                                          
  , upr.cabecalho_report2    
  , upr.cabecalho_report3  
  , u.unid_descricao  
  , u.unid_codigoCNES
  , lei.locint_descricao   
  , p.pac_telefone  
  , p.pac_celular
  , e.etnia_desc
  , m.cod_ibge
  , isnull(uam.upaatemed_Anamnese, pep.anamnese) as 'upaatemed_Anamnese'
  , spe.solpedexa_observacao
  from vwsolicitacao_pedido sp  
  join solicitacao_pedido_exame spe on sp.ped_codigo = spe.ped_codigo  
  join exame_radiologico er on spe.solpedexa_codigo_exame = er.exarad_codigo  
  join vwlocal_unidade v on v.locatend_codigo = sp.locatend_codigo  
  join Paciente p on p.pac_codigo = sp.pac_codigo  
  left join Paciente_Prontuario pp on p.pac_codigo = pp.pac_codigo and pp.unid_codigo = @unid_codigo 
  left JOIN Raca r ON r.Raca_Codigo = p.raca_codigo
  left JOIN cep c ON c.cep_sequencial = p.cep_sequencial 
  left JOIN municipio m ON m.mun_codigo = c.mun_codigo
  left JOIN bairro b ON b.bai_codigo = c.bai_codigo and b.mun_codigo = c.mun_codigo  
  left join origem_paciente op    on sp.Oripac_Codigo = op.Oripac_Codigo   
  left join unidade_parametro_relatorio upr  on upr.unid_codigo = sp.unid_codigo   
  inner join unidade u on sp.unid_codigo = u.unid_codigo  
  left join internacao i on (i.spa_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 5) or (i.emer_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 3) or (i.inter_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 4)   
  left join vwleito lei on i.locatend_leito = lei.locatend_codigo and i.lei_codigo = lei.lei_codigo  
  left JOIN etnias e on p.etnia_codigo = e.etnia_codigo
  left join atendimento_ambulatorial aa on sp.solped_CodigoOrigem = aa.spa_codigo
  left join UPA_Atendimento_Medico uam on aa.atendamb_codigo = uam.atendamb_codigo 
  left join internacao_pep pep on i.inter_codigo = pep.inter_codigo
  where solped_tiposolicitacao = @solped_tiposolicitacao  
  and sp.solped_codigo = @solped_codigo  
  order by solpedexa_codigo  
    
  select top 1 @solpedexa_codigo = solpedexa_codigo from #tmp_incidencia  
    
  while (@@rowcount > 0)  
   begin       
  
  select a.exainc_codigo, exainc_descricao  
  into #incidencia  
  from #tmp_incidencia tmp  
    JOIN Solicitacao_Pedido_Exame_Incidencia a ON tmp.solpedexa_codigo = a.solpedexa_codigo  
    JOIN Exame_Incidencia b       on a.exainc_codigo = b.exainc_codigo   
  where tmp.solpedexa_codigo = @solpedexa_codigo  
      
  set @incidenciaDescricao = ''  
  select top 1 @exainc_codigo = exainc_codigo, @incidencia = exainc_descricao from #incidencia    
     
  while (@@rowcount > 0)    
   begin  
   set @incidenciaDescricao = @incidenciaDescricao + @incidencia + ' - '  
   delete from #incidencia where exainc_codigo = @exainc_codigo  
   select top 1 @exainc_codigo = exainc_codigo, @incidencia = exainc_descricao from #incidencia where exainc_codigo > @exainc_codigo    
   end  
     
   if (len(@incidenciaDescricao) > 0)  
    begin   
    update #tmp_incidencia set incidencia = substring(@incidenciaDescricao, 0, len(@incidenciaDescricao))  
    where solpedexa_codigo = @solpedexa_codigo  
    end  
      
    drop table #incidencia  
  
    select top 1 @solpedexa_codigo = solpedexa_codigo from #tmp_incidencia where solpedexa_codigo > @solpedexa_codigo  
       
   end  
   select * from #tmp_incidencia  
 END
  --DIAGNOSE  
 ELSE IF(@solped_tiposolicitacao = 9)  
 BEGIN   
   
 --declare @incidencia  as nvarchar(500)  
 --declare @exainc_codigo as int  
 --declare @incidenciadescricao  as nvarchar(500)  
 --declare @solpedexa_codigo as char(18)  
  
 create table #tmp_incidencia_Diagnose  
 (  
 solpedexa_codigo char(18) null,  
 atend_data datetime null,  
 pac_nome varchar(200) null,  
 pac_codigo char(12) null,  
 pac_prontuario_numero char(10) null,  
 Raca_Desc varchar(30) null,
 pac_idade int null,  
 clinica varchar(30) null,  
 sexo varchar(10) null,  
 etnia char(4) null,
 cep char(12) null,
 logradouro char(200) null,
 municipio char(200) null,
 uf_codigo char(2) null, 
 bairro char(200) null,
 cns char(15) null,  
 exame varchar(75) null,  
 medico varchar(50) null,  
 crm char(15) null,  
 tipo_solicitacao int null,  
 viaimpressao int null,  
 complemento varchar(10) null,  
 Incidencia varchar(500) null  
 , pac_nascimento char(10) null  
 , solped_CodigoOrigem varchar(12) null  
 , Oripac_descricao varchar(30) null  
 , LOGO image null  
 , cabecalho_report1 varchar(100) null                                           
 , cabecalho_report2 varchar(100) null    
 , cabecalho_report3 varchar(100) null  
 , unid_descricao varchar(50) null  
 , unid_codigoCNES varchar(30) null
 , locint_descricao varchar(100) null  
 , pac_telefone char(20)
 , pac_celular char(20)
 , etnia_desc varchar(30)
 , cod_ibge varchar(100)
 , upaatemed_Anamnese varchar(2000)
 , solpedexa_observacao varchar(200)
 )   
  
 insert into #tmp_incidencia_Diagnose  
 (solpedexa_codigo, atend_data, pac_nome, pac_codigo, pac_prontuario_numero, Raca_Desc,    
 pac_idade, clinica, sexo, etnia, cep, logradouro, municipio, uf_codigo, bairro, cns, exame, medico, crm, tipo_solicitacao, viaimpressao, complemento, Incidencia  
      , pac_nascimento, solped_CodigoOrigem, Oripac_descricao, LOGO, cabecalho_report1, cabecalho_report2, cabecalho_report3  
      , unid_descricao, unid_codigoCNES, locint_descricao, pac_telefone, pac_celular, etnia_desc,  cod_ibge, upaatemed_Anamnese, solpedexa_observacao)         
  
 select spe.solpedexa_codigo, 
 sp.solped_datahora, 
  case when p.pac_nome_social is null then p.pac_nome else rtrim(p.pac_nome_social) +' ['+rtrim(p.pac_nome)+']' end as pac_nome,  
  p.pac_codigo,  
 pac_prontuario_numero,
 r.Raca_Desc,   
 pac_idade=(cast(DateDiff(dd,  P.pac_nascimento, getdate()) as int) - (cast(DateDiff(yyyy, P.pac_nascimento,getdate()) as int) / 4)) / 365,  
 v.set_descricao as clinica,   
  case pac_sexo  
   when 'M' then 'Masculino'  
   when 'F' then 'Feminino' end as sexo,
   p.etnia_codigo as etinia,
   c.cep_cep as cep,
   c.cep_logradouro as logradouro,
   m.mun_descricao as municipio,
   m.uf_codigo,
   b.bai_descricao as bairro,    
  isnull(pac_cartao_nsaude,pac_cartao_nsaude_provisorio) as cns,     
  spe.solpedexa_descricao,  
  (select prof_nome from profissional prof where prof.prof_codigo=sp.prof_codigo and prof.locatend_codigo=sp.locatend_codigo),  
  (select prof_numconselho from profissional prof where prof.prof_codigo=sp.prof_codigo and prof.locatend_codigo=sp.locatend_codigo),  
  9,  
  @viaimpressao,  
  '' as complemento, '' as Incidencia  
  , convert(char(10),p.pac_nascimento,103) as pac_nascimento  
  , sp.solped_CodigoOrigem  
  , op.Oripac_descricao  
      , upr.LOGO  
  , upr.cabecalho_report1                                          
  , upr.cabecalho_report2    
  , upr.cabecalho_report3  
  , u.unid_descricao  
  , u.unid_codigoCNES
  , lei.locint_descricao   
  , p.pac_telefone  
  , p.pac_celular
  , e.etnia_desc
  , m.cod_ibge
  , isnull(uam.upaatemed_Anamnese, pep.anamnese) as 'upaatemed_Anamnese'
  ,spe.solpedexa_observacao
  from vwsolicitacao_pedido sp  
  join solicitacao_pedido_exame spe on sp.ped_codigo = spe.ped_codigo  
  --join exame_diagnose er on spe.solpedexa_codigo_exame = er.exared_codigo  
  join vwlocal_unidade v on v.locatend_codigo = sp.locatend_codigo  
  join Paciente p on p.pac_codigo = sp.pac_codigo  
  left join Paciente_Prontuario pp on p.pac_codigo = pp.pac_codigo and pp.unid_codigo = @unid_codigo 
  left JOIN Raca r ON r.Raca_Codigo = p.raca_codigo
  left JOIN cep c ON c.cep_sequencial = p.cep_sequencial 
  left JOIN municipio m ON m.mun_codigo = c.mun_codigo
  left JOIN bairro b ON b.bai_codigo = c.bai_codigo and b.mun_codigo = c.mun_codigo  
  left join origem_paciente op    on sp.Oripac_Codigo = op.Oripac_Codigo   
  left join unidade_parametro_relatorio upr  on upr.unid_codigo = sp.unid_codigo   
  inner join unidade u on sp.unid_codigo = u.unid_codigo  
  left join internacao i on (i.spa_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 5) or (i.emer_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 3) or (i.inter_codigo = sp.solped_CodigoOrigem and sp.oripac_codigo = 4)   
  left join vwleito lei on i.locatend_leito = lei.locatend_codigo and i.lei_codigo = lei.lei_codigo  
  left JOIN etnias e on p.etnia_codigo = e.etnia_codigo
  left join atendimento_ambulatorial aa on sp.solped_CodigoOrigem = aa.spa_codigo
  left join UPA_Atendimento_Medico uam on aa.atendamb_codigo = uam.atendamb_codigo 
   left join internacao_pep pep on i.inter_codigo = pep.inter_codigo
  where 1 = 1
  --solped_tiposolicitacao = @solped_tiposolicitacao  
  and sp.solped_codigo = @solped_codigo  
  order by solpedexa_codigo  
    
   
   select * from #tmp_incidencia_Diagnose  
 END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[Ksp_Relatorio_Prescricao_Completa]...';


GO
ALTER PROCEDURE [dbo].[Ksp_Relatorio_Prescricao_Completa]
@PRESC_CODIGO CHAR (12)=NULL, @ATENDAMB_CODIGO CHAR (12)=NULL, @Data CHAR (19)=NULL, @item_prescricao_id uniqueidentifier =null
AS
SET NOCOUNT ON                      
 
CREATE TABLE #TEMP (              
   seq  int identity(1,1),                
   unid_descricao varchar(50),
   unid_codigo char(4),
   set_descricao varchar(30),                  
   prof_nome varchar(50),                  
   pac_codigo char(12),                  
   pac_nome varchar(50),                  
   pac_prontuario_numero char(10),                  
   locint_descricao varchar(8000),                  
   pac_idade int,                  
   presc_observacao varchar(4000),                  
   presc_codigo char(12),                  
   itpresc_codigo int,                  
   itpresc_quantidade varchar(100),                  
   itpresc_total varchar(100),                  
   itpresc_obs varchar(2000),                  
   TipoItemPrescricao char(1),                  
   Agrupamento char(1),                  
   Intervalo int,                  
   Item varchar(2000),                  
   Detalhe varchar(2000),                  
   cues_codigo int,                  
   oxi_codigo int,                  
   UnidadeTempo char(1),                  
   presc_data smalldatetime,                   
   DataHoraAprazamento smalldatetime,                  
   GeraPedidoPaciente char(1),                  
   cabecalho_report1 varchar(100),                  
   cabecalho_report2 varchar(100),                  
   cabecalho_report3 varchar(100),                  
   pac_nascimento datetime,                  
   pac_sexo varchar(15),                  
   Prof_registro_conselho varchar(20),   
   orgao_emissor_conselho varchar(20),   
   num_atendimento char(12),                  
   Ordem_Discriminacao char(1),                  
   cor_risco varchar(50),                  
   horarios_aprazamento varchar(2000),                  
   observacoes_enfermagem varchar(8000),                  
   atendamb_codigo char(12),    
   itpresc_codigo_issoluvel char(1),    
   item_prescricao_id_solucao uniqueidentifier,
   atendamb_peso numeric(9,1),     
   UnidadeMedida varchar(50)  ,
   inter_codigo varchar(12),
   atend_codigo varchar(12),
   pac_mae varchar(50),
   MedicamentoSuspenso varchar(100),
   DescricaoResumida varchar(1000),
   InformacoesComplementares varchar(8000),
   OrdenacaoTipoItem varchar(100),
   FrequenciaFormatada varchar(100),
   inter_datainter smalldatetime,
   alergias varchar(1000),
   item_prescricao_id uniqueidentifier
)   

CREATE TABLE #PRESCRICAO   
(  
	presc_codigo char(12),  
	locatend_codigo char(4),  
	prof_codigo char(4),  
	spa_codigo char(12),  
	emer_codigo char(12),  
	inter_codigo char(12),  
	atendamb_codigo char(12),  
	presc_observacao varchar(4000),  
	presc_data smalldatetime,  
	pac_codigo char(12),  
	unid_codigo char(4)  ,
	atend_codigo varchar(12)
)  
CREATE TABLE #ITEM_PRESCRICAO   
(  
	presc_codigo char(12),  
	itpresc_codigo int,  
	itpresc_obs varchar(2000)  
)  

CREATE TABLE #INTERNACAO_APRAZAMENTO  
(  
	inter_codigo char(12),  
	spa_codigo char(12),  
	emer_codigo char(12),  
	dose_data smalldatetime,  
	locint_descricao varchar(200),
	inter_datainter smalldatetime
)  
CREATE TABLE #RISCO
(
	risaco_descricao varchar(50)	
)

DECLARE @SPA_CODIGO CHAR(12)   
DECLARE @EMER_CODIGO CHAR(12)  
DECLARE @INTER_CODIGO CHAR(12)  
DECLARE @PAC_PRONTUARIO_NUMERO CHAR(10)  
DECLARE @PAC_CODIGO CHAR(12)  
DECLARE @INTERNACAO_PEP CHAR(12)  
DECLARE @ATEND_CODIGO CHAR(12)  
DECLARE @DataInicio smalldatetime
DECLARE @DataFim smalldatetime	

DECLARE @peso numeric(9,1)
 SET  @peso = 0

set @DataInicio = CONVERT(SMALLDATETIME, @Data, 103) - 1
set @DataFim = CONVERT(SMALLDATETIME, @Data, 103)+ 1

IF(@PRESC_CODIGO IS NOT NULL)            
 BEGIN
   
	SELECT  @peso = A.atendamb_peso FROM atendimento_clinico A
	inner join prescricao P on A.atendamb_codigo = P.atendamb_codigo
	where P.presc_codigo = @presc_codigo	
   
	INSERT INTO #PRESCRICAO  
	SELECT presc_codigo, locatend_codigo , prof_codigo, SPA_CODIGO,EMER_CODIGO,INTER_CODIGO, ATENDAMB_CODIGO, PRESC_OBSERVACAO,PRESC_DATA, PAC_CODIGO, unid_codigo, atend_codigo  
	FROM PRESCRICAO   
	WHERE PRESC_CODIGO = @PRESC_CODIGO  

	INSERT INTO #ITEM_PRESCRICAO  
	SELECT presc_codigo,itpresc_codigo,itpresc_obs  
	FROM ITEM_PRESCRICAO   
	WHERE PRESC_CODIGO = @PRESC_CODIGO  
  
	SELECT @SPA_CODIGO = SPA_CODIGO, @EMER_CODIGO = EMER_CODIGO, @INTER_CODIGO = INTER_CODIGO, @ATEND_CODIGO = atend_codigo FROM #PRESCRICAO 
  
	/*INTERNACAO APRAZAMENTO E INTERNACAO_PEP*/
	IF (@INTER_CODIGO IS NOT NULL)  
	BEGIN  
		INSERT INTO #INTERNACAO_APRAZAMENTO  
		SELECT DISTINCT I.INTER_CODIGO, I.SPA_CODIGO, I.EMER_CODIGO, IA.DOSE_DATA, VWLEITO.LOCINT_DESCRICAO, i.inter_datainter 
		FROM #PRESCRICAO P  
		JOIN #ITEM_PRESCRICAO IP ON P.PRESC_CODIGO = IP.PRESC_CODIGO  
		JOIN INTERNACAO I ON P.INTER_CODIGO = I.INTER_CODIGO  
		JOIN VWLEITO ON I.LOCATEND_LEITO = VWLEITO.LOCATEND_CODIGO AND I.LEI_CODIGO = VWLEITO.LEI_CODIGO                  
		LEFT JOIN ITEM_APRAZAMENTO IA ON IA.PRESC_CODIGO = IP.PRESC_CODIGO AND IA.ITPRESC_CODIGO = IP.ITPRESC_CODIGO                  
		WHERE I.INTER_CODIGO = @INTER_CODIGO  
		
		SELECT  @internacao_pep = inter_codigo FROM internacao_pep where inter_codigo = @INTER_CODIGO
		
		IF @internacao_pep IS NOT NULL
		BEGIN
			select @peso = peso from internacao_pep where inter_codigo = @inter_codigo;
		END
	END  
  
	/*RISCO*/  
	IF (@SPA_CODIGO IS NOT NULL OR ( @INTER_CODIGO IS NOT NULL AND @SPA_CODIGO IS NOT NULL ))  
	BEGIN   
		INSERT INTO #RISCO   
		SELECT RISACO_DESCRICAO  
		FROM UPA_ACOLHIMENTO UA   
		INNER JOIN UPA_CLASSIFICACAO_RISCO UCR ON UA.ACO_CODIGO = UCR.ACO_CODIGO  
		INNER JOIN RISCO_ACOLHIMENTO RA ON UCR.RISACO_CODIGO = RA.RISACO_CODIGO  
		WHERE UA.SPA_CODIGO = @SPA_CODIGO  
	END  
  
	IF (@EMER_CODIGO IS NOT NULL OR ( @INTER_CODIGO IS NOT NULL AND @EMER_CODIGO IS NOT NULL ))  
	BEGIN  
		INSERT INTO #RISCO   
		SELECT RISACO_DESCRICAO  
		FROM UPA_ACOLHIMENTO UA   
		INNER JOIN UPA_CLASSIFICACAO_RISCO UCR ON UA.ACO_CODIGO = UCR.ACO_CODIGO  
		INNER JOIN RISCO_ACOLHIMENTO RA ON UCR.RISACO_CODIGO = RA.RISACO_CODIGO  
		WHERE UA.EMER_CODIGO = @EMER_CODIGO  
	END  
   
	SELECT @PAC_CODIGO = PAC_CODIGO FROM #PRESCRICAO  
   
	SELECT @PAC_PRONTUARIO_NUMERO = PAC_PRONTUARIO_NUMERO FROM PACIENTE_PRONTUARIO WHERE PAC_CODIGO = @PAC_CODIGO  
                   
	INSERT INTO #TEMP                  
                     
	SELECT u.unid_descricao, u.unid_codigo, v.set_descricao, pr.prof_nome, pa.pac_codigo, pa.pac_nome, @PAC_PRONTUARIO_NUMERO AS pac_prontuario_numero, 
	ia.locint_descricao,
	case when pa.pac_nascimento is not null then (cast(DateDiff(dd, pa.pac_nascimento, getdate()) as int) - (cast(DateDiff(yyyy, pa.pac_nascimento, getdate()) as int) / 4)) / 365                  
	when pa.pac_nascimento is null and p.spa_codigo is not null then (select spa_idade from pronto_atendimento where spa_codigo = p.spa_codigo)                  
	when pa.pac_nascimento is null and p.emer_codigo is not null then (select emer_idade from emergencia where emer_codigo = p.emer_codigo)                                
	end as pac_idade,
	p.presc_observacao, itpr.presc_codigo, itpr.itpresc_codigo,                  
                     
    replace( (convert(varchar,itpm.itpresc_quantidade) + ' ' + RTRIM(itpm.ins_unidade)), '.00', '' ) as itpresc_quantidade  
    ,(convert(varchar,itpm.itpresc_total) + ' ' + RTRIM(itpm.ins_unidade)) as itpresc_total, 
    itpr.itpresc_obs,                                    
                     
    case when itpm.presc_codigo = @presc_codigo and itpm.itpresc_frequencia <> 0 then 'M' -- Medicamento                  
       when itpm.presc_codigo = @presc_codigo and itpm.itpresc_frequencia = 0 then 'M' -- Medicamento       
       when itps.presc_codigo = @presc_codigo then 'S' -- Sinais Vitais                                    
       when itce.presc_codigo = @presc_codigo then 'C' -- Cuidados Especiais                                    
       when itd.presc_codigo  = @presc_codigo then 'D' -- Dieta                                    
       when itpo.presc_codigo = @presc_codigo then 'O' -- Oxigenoterapia         
	   when ipp.presc_codigo IS NOT NULL then 'P' -- Procedimento     
    end as TipoItemPrescricao,                            
                     
    case when itpm.presc_codigo = @presc_codigo then '1'  
       when itps.presc_codigo = @presc_codigo then '0'  
       when itce.presc_codigo = @presc_codigo then '0'  
       when itd.presc_codigo  = @presc_codigo then '0'  
       when itpo.presc_codigo = @presc_codigo then '0'  
    end as Agrupamento,                        
                     
    case when itpm.presc_codigo = @presc_codigo then                           
    case when itpm.itpresc_frequencia = 0 and itpresc_tpduracao = 'M' then itpm.itpresc_duracao                           
      when itpm.itpresc_frequencia = 0 and itpresc_tpduracao = 'H' then itpm.itpresc_duracao * 60                          
      when itpm.itpresc_frequencia <> 0 then itpm.itpresc_frequencia / 60 end  
      when itps.presc_codigo = @presc_codigo then itps.ipsv_intervalo  
      when itce.presc_codigo = @presc_codigo then itce.ipce_intervalo  
      when itpo.presc_codigo = @presc_codigo then itpo.ipox_intervalo  
    end as Intervalo,                                                  
                     
    case when itpm.presc_codigo = @presc_codigo then (  
		itpm.ins_descricao + ' - Dose: ' +   
	CASE (RIGHT(CONVERT(VARCHAR,ITPRESC_QUANTIDADE),2))   
        WHEN 0 THEN  convert(varchar(10),FLOOR(itpresc_quantidade))   
        ELSE convert(varchar(10),itpresc_quantidade)   
        END  
	  + ' ' + ins_unidade + ' Via: ' + Viamed_Descricao + ' Intervalo: ' +   
	  case itpresc_frequencia  
		when 0 then 'Imediato'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h'  
	  end  
	  )  
        
        when itps.presc_codigo = @presc_codigo then (itps.ipsv_texto) + ' - Intervalo: ' +  case itps.ipsv_intervalo  
		when 0 then 'Imediato'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h' end                                       
       when itce.presc_codigo = @presc_codigo then (ce.cues_descricao) + ' - Intervalo: ' +  case itce.ipce_intervalo  
		when 0 then 'Imediato'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h' end                                                   
       when itd.presc_codigo = @presc_codigo then (itd.ipdi_texto)                                    
       when itpo.presc_codigo = @presc_codigo then (ox.oxi_descricao) + ' - Intervalo: ' +  case isnull(itpo.ipox_intervalo, 0)  
		when 0 then 'Contínuo'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h' end +
		case ox.oxi_tipo 
		when 0 then ' - Unidade: '+ convert(varchar,isnull(itpo.ipox_unidade, 'Não Informado')) + '% FiO2' 
		when 1 then ' - Unidade: '+ convert(varchar,isnull(itpo.ipox_unidade, 'Não Informado')) + ' L/min' end +
		case when itpo.ipox_duracao is not null then   
		' - Durante: ' + convert(varchar,isnull(itpo.ipox_duracao,'')) + ' ' +
		 case when itpo.ipox_tpduracao = 'H' then 'Hora(s)' else 'Minuto(s)' end else '' end  
	   when ipp.presc_codigo = @presc_codigo then tbp.co_procedimento + ' - ' + tbp.no_procedimento             
    end 
	+
	case itpm.itpresc_caracteristica 
		when 1 then ' - SOS'
		when 2 then ' - A critério do médico' 
		else ''
	end 
	as Item,                  
                     
    '' as Detalhe,                                    
                     
     itce.cues_codigo as Codigo,                   
     itpo.oxi_codigo as Codigo,                   
     itpo.ipox_unidade_tempo as UnidadeTempo,                   
     p.presc_data,                   
     ia.dose_data as DataHoraAprazamento,                  
     itpm.GeraPedidoPaciente,                  
     NULL AS cabecalho_report1,       
     NULL AS cabecalho_report2,                  
     NULL AS cabecalho_report3,             
     pa.pac_nascimento,                  
                     
     case when pa.pac_sexo = 'F' then 'Feminino'                 
       when pa.pac_sexo = 'M' then 'Masculino'                  
     end as pac_sexo,                  
     pl.Prof_registro_conselho,   
     (select oec.orgem_descricao from Orgao_Emissor_Conselho oec join Tipo_Profissional tp on oec.orgem_codigo = tp.orgem_codigo  
      where tp.tipprof_codigo = pl.tipprof_codigo) as orgao_emissor_conselho,  
       
     isnull( isnull(p.spa_codigo, iA.spa_codigo) , isnull(p.emer_codigo, iA.emer_codigo) ) as num_atendimento,                  
  
     case when itd.presc_codigo  = @presc_codigo then '0'                  
       when itpm.presc_codigo = @presc_codigo then '1'                  
       when itps.presc_codigo = @presc_codigo then '2'                  
       when itce.presc_codigo = @presc_codigo then '3'                  
       when itpo.presc_codigo = @presc_codigo then '4'         
	   when ipp.presc_codigo = @presc_codigo then '5'
     end as Ordem_Discriminacao,                  
                     
     (SELECT RISACO_DESCRICAO FROM #RISCO) AS cor_risco,  
      NULL as horarios_aprazamento,                  
      NULL as observacoes_enfermagem,                  
      p.atendamb_codigo,    
      itpm.itpresc_codigo_issoluvel,    
      itpm.item_prescricao_id_solucao,
      @peso,
      '',
      ip.inter_codigo,
      ate.atend_codigo,
	  pa.pac_mae,

	  case when itpm.presc_codigo = @presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itpm.item_prescricao_id) > 0 then 'MEDICAMENTO SUSPENSO' 
		   when itps.presc_codigo = @presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itps.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
		   when itce.presc_codigo = @presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itce.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
		   when itd.presc_codigo = @presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itd.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
		   when itpo.presc_codigo = @presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itpo.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
	  ELSE NULL END AS MedicamentoSuspenso,
	  
	  case when itpm.presc_codigo = @presc_codigo then itpm.ins_descricao_resumida
			when itps.presc_codigo = @presc_codigo then (itps.ipsv_texto)
			when itce.presc_codigo = @presc_codigo then (ce.cues_descricao)
			when itd.presc_codigo = @presc_codigo then (itd.ipdi_texto)   
			when itpo.presc_codigo = @presc_codigo then (ox.oxi_descricao)
		end + 
			case when LEN(ITPM.itpresc_quantidade) > 0 then (  
		' - Dose: ' +   
				CASE (RIGHT(CONVERT(VARCHAR,ITPRESC_QUANTIDADE),2))   
				WHEN 0 THEN  convert(varchar(10),FLOOR(itpresc_quantidade))   
				ELSE convert(varchar(10),itpresc_quantidade)   
			END  
		+ ' ' + ins_unidade + '(s) ') ELSE ' ' END + 
		 + CASE WHEN LEN(ITPM.diluente_ins_descricao_resumida) > 0 THEN ' + ' + ITPM.diluente_ins_descricao_resumida
			    WHEN LEN(ITPM.diluente_ins_descricao) > 0 THEN ' + ' + ITPM.diluente_ins_descricao ELSE ' ' END +
		case when LEN(itpm.diluente_volume) > 0 THEN ' - Volume do Diluente: ' + CONVERT(VARCHAR(10), itpm.diluente_volume) + ' ml ' ELSE '' END 
		AS DescricaoResumida,

		
		case when LEN(itpm.viamed_descricao) > 0 THEN itpm.viamed_descricao ELSE '' END +
		case when LEN(itpm.diluente_volume_total) > 0 THEN ' - Volume Total: ' + CONVERT(VARCHAR(10), itpm.diluente_volume_total) + ' ml' ELSE '' END + 
		case when LEN(itpm.diluente_valor_velocidade) > 0 THEN ' - Velocidade: ' + CONVERT(VARCHAR(10), itpm.diluente_valor_velocidade) + ' ' + itpm.diluente_medida_velocidade ELSE '' END +
		case itpm.itpresc_caracteristica 
				when 1 then ' - SOS'
				when 3 then ' - Urgente' 
			 else ''
			end 
		AS InformacoesComplementares,

	 case when itpm.presc_codigo = @presc_codigo then '5 - Medicamentos'
			when itps.presc_codigo = @presc_codigo then '4 - Sinais Vitais'
			when itce.presc_codigo = @presc_codigo then '3 - Cuidados Especiais'
			when itd.presc_codigo = @presc_codigo then '2 - Dietas'
			when itpo.presc_codigo = @presc_codigo then '1 - Oxigenoterapias'
	END AS OrdenacaoTipoItem,

	 CASE
		WHEN ITPM.itpresc_frequencia = 0 THEN 'Imediato'
		WHEN ITPM.itpresc_frequencia = '-120' THEN 'ACM'
		WHEN ITPM.itpresc_frequencia =  '-60' THEN 'Contínuo'
		WHEN ITPM.itpresc_frequencia = 15 then '15/15 min'
		WHEN ITPM.itpresc_frequencia = 30 then '30/30 min'
		WHEN ITPM.itpresc_frequencia = 60 then '1/1 h'
		WHEN ITPM.itpresc_frequencia = 120 then '2/2 h'
		WHEN ITPM.itpresc_frequencia = 180 then '3/3 h'
		WHEN ITPM.itpresc_frequencia = 240 then '4/4 h'
		WHEN ITPM.itpresc_frequencia = 300 then '5/5 h'
		WHEN ITPM.itpresc_frequencia = 360 then '6/6 h'
		WHEN ITPM.itpresc_frequencia = 480 then '8/8 h'
		WHEN ITPM.itpresc_frequencia = 720 then '12/12 h'
		WHEN ITPM.itpresc_frequencia = 1440 then '1x ao dia'
		ELSE ''
	END AS FrequenciaFormatada,
	ia.inter_datainter,
	(select ISNULL(stuff((select ',' + isnull(a.Descricao, s.DESCRICAO)
	from Paciente_Alergia pacale
	left join Pep_Alergia a on a.Codigo_Alergia = pacale.Codigo_Alergia
	left join Substancia s on s.id = pacale.Id_Substancia
	where pacale.pac_codigo = p.pac_codigo
	For Xml Path('')), 1, 1, ''),'')),
	itpm.item_prescricao_id

   from #PRESCRICAO p                 
     join #ITEM_PRESCRICAO itpr on p.presc_codigo = itpr.presc_codigo                  
     left join Item_Prescricao_Medicamento itpm on itpr.itpresc_codigo = itpm.itpresc_codigo and itpr.presc_codigo = itpm.presc_codigo                  
     left join Item_Prescricao_Sinais_Vitais itps on(itps.presc_codigo = Isnull(@presc_codigo, itps.presc_codigo) and itpr.itpresc_codigo = itps.itpresc_codigo and itpr.presc_codigo = itps.presc_codigo)                                    
     left join Item_Prescricao_Cuidados_Especiais itce on(itce.presc_codigo = Isnull(@presc_codigo, itce.presc_codigo) and itpr.itpresc_codigo = itce.itpresc_codigo and itpr.presc_codigo = itce.presc_codigo)                                  
     left join Item_Prescricao_Dieta itd on(itd.presc_codigo = Isnull(@presc_codigo, itd.presc_codigo) and itpr.itpresc_codigo = itd.itpresc_codigo and itpr.presc_codigo = itd.presc_codigo)                                    
     left join Cuidados_Especiais ce on (itce.cues_codigo = ce.cues_codigo)                                    
     left join Item_Prescricao_Oxigenoterapia itpo on (itpo.presc_codigo = Isnull(@presc_codigo, itpo.presc_codigo) and itpr.itpresc_codigo = itpo.itpresc_codigo and itpr.presc_codigo = itpo.presc_codigo)                                    
     left join Oxigenoterapia ox on (itpo.oxi_codigo = ox.oxi_codigo)  
	 left join item_prescricao_procedimento ipp on (ipp.presc_codigo = Isnull(@presc_codigo, ipp.presc_codigo) and itpr.itpresc_codigo = ipp.itpresc_codigo and itpr.presc_codigo = ipp.presc_codigo)                                       
	 left join tb_procedimento tbp on (ipp.co_procedimento = tbp.co_procedimento)                                  
     join unidade u on u.unid_codigo = p.unid_codigo                  
     join paciente pa on p.pac_codigo = pa.pac_codigo                  
     left join vwlocal_unidade v on p.locatend_codigo = v.locatend_codigo                  
     left join profissional_rede pr on p.prof_codigo = pr.prof_codigo      
     left join profissional_lotacao pl ON p.prof_codigo = pl.prof_codigo and p.locatend_codigo = pl.locatend_codigo    
     left join #internacao_aprazamento ia on ia.inter_codigo = p.inter_codigo
     left join internacao_pep ip on ip.inter_codigo = p.inter_codigo
     left join atendimento ate on ate.atend_codigo = p.atend_codigo
                          
   where p.presc_codigo = @presc_codigo           
   and (itpm.item_prescricao_id = @item_prescricao_id or @item_prescricao_id is null)
   order by Ordem_Discriminacao      

END            
ELSE            
 BEGIN            

	SET  @peso = null

	INSERT INTO #PRESCRICAO  
	SELECT presc_codigo, locatend_codigo , prof_codigo, SPA_CODIGO,EMER_CODIGO,INTER_CODIGO, ATENDAMB_CODIGO, PRESC_OBSERVACAO,PRESC_DATA, PAC_CODIGO, unid_codigo, atend_codigo  
	FROM PRESCRICAO   
	WHERE (PRESCRICAO.ATENDAMB_CODIGO = @ATENDAMB_CODIGO OR PRESCRICAO.INTER_CODIGO = @ATENDAMB_CODIGO)
	and Prescricao.presc_tipo = 'P'
	AND PRESCRICAO.PRESC_DATA > @DataInicio and  PRESCRICAO.PRESC_DATA < @DataFim

   INSERT INTO #ITEM_PRESCRICAO  
	SELECT it.presc_codigo, it.itpresc_codigo, it.itpresc_obs  
	FROM ITEM_PRESCRICAO IT
	JOIN #PRESCRICAO P on IT.PRESC_CODIGO = P.PRESC_CODIGO
	WHERE (P.ATENDAMB_CODIGO = @ATENDAMB_CODIGO OR P.INTER_CODIGO = @ATENDAMB_CODIGO)		
	  
  
	SELECT @SPA_CODIGO = SPA_CODIGO, @EMER_CODIGO = EMER_CODIGO, @INTER_CODIGO = INTER_CODIGO, @ATEND_CODIGO = atend_codigo FROM #PRESCRICAO 
  
	/*INTERNACAO APRAZAMENTO E INTERNACAO_PEP*/
	IF (@INTER_CODIGO IS NOT NULL)  
	BEGIN  
		INSERT INTO #INTERNACAO_APRAZAMENTO  
		SELECT DISTINCT I.INTER_CODIGO, I.SPA_CODIGO, I.EMER_CODIGO, IA.DOSE_DATA, VWLEITO.LOCINT_DESCRICAO, i.inter_datainter  
		FROM #PRESCRICAO P  
		JOIN #ITEM_PRESCRICAO IP ON P.PRESC_CODIGO = IP.PRESC_CODIGO  
		JOIN INTERNACAO I ON P.INTER_CODIGO = I.INTER_CODIGO  
		JOIN VWLEITO ON I.LOCATEND_LEITO = VWLEITO.LOCATEND_CODIGO AND I.LEI_CODIGO = VWLEITO.LEI_CODIGO                  
		LEFT JOIN ITEM_APRAZAMENTO IA ON IA.PRESC_CODIGO = IP.PRESC_CODIGO AND IA.ITPRESC_CODIGO = IP.ITPRESC_CODIGO                  
		WHERE I.INTER_CODIGO = @INTER_CODIGO  
		
		SELECT  @internacao_pep = inter_codigo FROM internacao_pep where inter_codigo = @INTER_CODIGO
		
		IF @internacao_pep IS NOT NULL
		BEGIN
			select @peso = peso from internacao_pep where inter_codigo = @inter_codigo;
		END
	END  
  
	/*RISCO*/  
	IF (@SPA_CODIGO IS NOT NULL OR ( @INTER_CODIGO IS NOT NULL AND @SPA_CODIGO IS NOT NULL ))  
	BEGIN   
		INSERT INTO #RISCO   
		SELECT RISACO_DESCRICAO  
		FROM UPA_ACOLHIMENTO UA   
		INNER JOIN UPA_CLASSIFICACAO_RISCO UCR ON UA.ACO_CODIGO = UCR.ACO_CODIGO  
		INNER JOIN RISCO_ACOLHIMENTO RA ON UCR.RISACO_CODIGO = RA.RISACO_CODIGO  
		WHERE UA.SPA_CODIGO = @SPA_CODIGO  
	END  
  
	IF (@EMER_CODIGO IS NOT NULL OR ( @INTER_CODIGO IS NOT NULL AND @EMER_CODIGO IS NOT NULL ))  
	BEGIN  
		INSERT INTO #RISCO   
		SELECT RISACO_DESCRICAO  
		FROM UPA_ACOLHIMENTO UA   
		INNER JOIN UPA_CLASSIFICACAO_RISCO UCR ON UA.ACO_CODIGO = UCR.ACO_CODIGO  
		INNER JOIN RISCO_ACOLHIMENTO RA ON UCR.RISACO_CODIGO = RA.RISACO_CODIGO  
		WHERE UA.EMER_CODIGO = @EMER_CODIGO  
	END  
   
	SELECT @PAC_CODIGO = PAC_CODIGO FROM #PRESCRICAO  
   
	SELECT @PAC_PRONTUARIO_NUMERO = PAC_PRONTUARIO_NUMERO FROM PACIENTE_PRONTUARIO WHERE PAC_CODIGO = @PAC_CODIGO  
                   
	INSERT INTO #TEMP                  
                     
	SELECT u.unid_descricao, u.unid_codigo, v.set_descricao, pr.prof_nome, pa.pac_codigo, pa.pac_nome, @PAC_PRONTUARIO_NUMERO AS pac_prontuario_numero, 
	ia.locint_descricao, 
	case when pa.pac_nascimento is not null then (cast(DateDiff(dd, pa.pac_nascimento, getdate()) as int) - (cast(DateDiff(yyyy, pa.pac_nascimento, getdate()) as int) / 4)) / 365                  
	when pa.pac_nascimento is null and p.spa_codigo is not null then (select spa_idade from pronto_atendimento where spa_codigo = p.spa_codigo)                  
	when pa.pac_nascimento is null and p.emer_codigo is not null then (select emer_idade from emergencia where emer_codigo = p.emer_codigo)                                
	end as pac_idade,
	p.presc_observacao, itpr.presc_codigo, itpr.itpresc_codigo,                  
                     
    replace( (convert(varchar,itpm.itpresc_quantidade) + ' ' + RTRIM(itpm.ins_unidade)), '.00', '' ) as itpresc_quantidade  
    ,(convert(varchar,itpm.itpresc_total) + ' ' + RTRIM(itpm.ins_unidade)) as itpresc_total, 
    itpr.itpresc_obs,                                    
                     
    case when itpm.presc_codigo =  p.presc_codigo  and itpm.itpresc_frequencia <> 0 then 'M' -- Medicamento                  
       when itpm.presc_codigo =  p.presc_codigo  and itpm.itpresc_frequencia = 0 then 'M' -- Medicamento       
       when itps.presc_codigo =  p.presc_codigo  then 'S' -- Sinais Vitais                                    
       when itce.presc_codigo =  p.presc_codigo  then 'C' -- Cuidados Especiais                                    
       when itd.presc_codigo  =  p.presc_codigo  then 'D' -- Dieta                                    
       when itpo.presc_codigo =  p.presc_codigo  then 'O' -- Oxigenoterapia         
	   when ipp.presc_codigo IS NOT NULL then 'P' -- Procedimento     
    end as TipoItemPrescricao,                            
                     
    case when itpm.presc_codigo =  p.presc_codigo  then '1'  
       when itps.presc_codigo =  p.presc_codigo  then '0'  
       when itce.presc_codigo =  p.presc_codigo  then '0'  
       when itd.presc_codigo  =  p.presc_codigo  then '0'  
       when itpo.presc_codigo =  p.presc_codigo  then '0'  
    end as Agrupamento,                        
                     
    case when itpm.presc_codigo =  p.presc_codigo  then                           
    case when itpm.itpresc_frequencia = 0 and itpresc_tpduracao = 'M' then itpm.itpresc_duracao                           
      when itpm.itpresc_frequencia = 0 and itpresc_tpduracao = 'H' then itpm.itpresc_duracao * 60                          
      when itpm.itpresc_frequencia <> 0 then itpm.itpresc_frequencia / 60 end  
      when itps.presc_codigo =  p.presc_codigo  then itps.ipsv_intervalo  
      when itce.presc_codigo =  p.presc_codigo  then itce.ipce_intervalo  
      when itpo.presc_codigo =  p.presc_codigo  then itpo.ipox_intervalo  
    end as Intervalo,                                                  
                     
    case when itpm.presc_codigo =  p.presc_codigo  then (  
		itpm.ins_descricao + ' - Dose: ' +   
	CASE (RIGHT(CONVERT(VARCHAR,ITPRESC_QUANTIDADE),2))   
        WHEN 0 THEN  convert(varchar(10),FLOOR(itpresc_quantidade))   
        ELSE convert(varchar(10),itpresc_quantidade)   
        END  
	  + ' ' + ins_unidade + ' Via: ' + Viamed_Descricao + ' Intervalo: ' +   
	  case itpresc_frequencia  
		when 0 then 'Imediato'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h'  
	  end  
	  )  
        
        when itps.presc_codigo =  p.presc_codigo  then (itps.ipsv_texto) + ' - Intervalo: ' +  case itps.ipsv_intervalo  
		when 0 then 'Imediato'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h' end                                       
       when itce.presc_codigo =  p.presc_codigo  then (ce.cues_descricao) + ' - Intervalo: ' +  case itce.ipce_intervalo  
		when 0 then 'Imediato'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h' end                                                   
       when itd.presc_codigo =  p.presc_codigo  then (itd.ipdi_texto)                                    
       when itpo.presc_codigo = p.presc_codigo then (ox.oxi_descricao) + ' - Intervalo: ' +  case isnull(itpo.ipox_intervalo, 0)  
		when 0 then 'Contínuo'  
		when 15 then '15/15 min '  
		when 30 then '30/30 min '  
		when 60 then ' 1/1 h'  
		when 120 then ' 2/2 h'  
		when 180 then ' 3/3 h'  
		when 240  then ' 4/4 h'  
		when 300 then ' 5/5 h'  
		when 360  then ' 6/6 h'  
		when 480 then ' 8/8 h'  
		when 720 then ' 12/12 h'  
		when 1440 then ' 24/24 h' end +
		case ox.oxi_tipo 
		when 0 then ' - Unidade: '+ convert(varchar,isnull(itpo.ipox_unidade, 'Não Informado')) + '% FiO2' 
		when 1 then ' - Unidade: '+ convert(varchar,isnull(itpo.ipox_unidade, 'Não Informado')) + ' L/min' end +
		case when itpo.ipox_duracao is not null then   
		' - Durante: ' + convert(varchar,isnull(itpo.ipox_duracao,'')) + ' ' +
		 case when itpo.ipox_tpduracao = 'H' then 'Hora(s)' else 'Minuto(s)' end else '' end 
	   when ipp.presc_codigo =  p.presc_codigo  then tbp.co_procedimento + ' - ' + tbp.no_procedimento             
    end 
	+
	case itpm.itpresc_caracteristica 
		when 1 then ' - SOS'
		when 2 then ' - A critério do médico' 
		else ''
	end 
	as Item,                  
                     
    '' as Detalhe,                                    
                     
     itce.cues_codigo as Codigo,                   
     itpo.oxi_codigo as Codigo,                   
     itpo.ipox_unidade_tempo as UnidadeTempo,                   
     p.presc_data,                   
     ia.dose_data as DataHoraAprazamento,                  
     itpm.GeraPedidoPaciente,                  
     NULL AS cabecalho_report1,       
     NULL AS cabecalho_report2,                  
     NULL AS cabecalho_report3,             
     pa.pac_nascimento,                  
                     
     case when pa.pac_sexo = 'F' then 'Feminino'                 
       when pa.pac_sexo = 'M' then 'Masculino'                  
     end as pac_sexo,                  
     pl.Prof_registro_conselho,   
     (select oec.orgem_descricao from Orgao_Emissor_Conselho oec join Tipo_Profissional tp on oec.orgem_codigo = tp.orgem_codigo  
      where tp.tipprof_codigo = pl.tipprof_codigo) as orgao_emissor_conselho,  
       
     isnull( isnull(p.spa_codigo, iA.spa_codigo) , isnull(p.emer_codigo, iA.emer_codigo) ) as num_atendimento,                  
  
     case when itd.presc_codigo  =  p.presc_codigo  then '0'                  
       when itpm.presc_codigo =  p.presc_codigo  then '1'                  
       when itps.presc_codigo =  p.presc_codigo  then '2'                  
       when itce.presc_codigo =  p.presc_codigo  then '3'                  
       when itpo.presc_codigo =  p.presc_codigo  then '4'         
	   when ipp.presc_codigo =  p.presc_codigo  then '5'
     end as Ordem_Discriminacao,                  
                     
     (SELECT RISACO_DESCRICAO FROM #RISCO) AS cor_risco,  
      NULL as horarios_aprazamento,                  
      NULL as observacoes_enfermagem,                  
      p.atendamb_codigo,    
      itpm.itpresc_codigo_issoluvel,    
      itpm.item_prescricao_id_solucao,
      @peso,
      '',
      ip.inter_codigo,
      ate.atend_codigo,
	  pa.pac_mae,
	
	case when itpm.presc_codigo = p.presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itpm.item_prescricao_id) > 0 then 'MEDICAMENTO SUSPENSO' 
		   when itps.presc_codigo = p.presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itps.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
		   when itce.presc_codigo = p.presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itce.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
		   when itd.presc_codigo = p.presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itd.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
		   when itpo.presc_codigo = p.presc_codigo AND (select count(1) from PRESCRICAO_SUSPENSA PS where ps.item_prescricao_id = itpo.item_prescricao_id) > 0 then 'ITEM SUSPENSO' 
	  ELSE NULL END AS MedicamentoSuspenso,

case when itpm.presc_codigo = p.presc_codigo then itpm.ins_descricao_resumida
			when itps.presc_codigo = p.presc_codigo then (itps.ipsv_texto)
			when itce.presc_codigo = p.presc_codigo then (ce.cues_descricao)
			when itd.presc_codigo = p.presc_codigo then (itd.ipdi_texto)   
			when itpo.presc_codigo = p.presc_codigo then (ox.oxi_descricao)
		end + 
			case when LEN(ITPM.itpresc_quantidade) > 0 then (  
		' - Dose: ' +   
				CASE (RIGHT(CONVERT(VARCHAR,ITPRESC_QUANTIDADE),2))   
				WHEN 0 THEN  convert(varchar(10),FLOOR(itpresc_quantidade))   
				ELSE convert(varchar(10),itpresc_quantidade)   
			END  
		+ ' ' + ins_unidade + '(s) ') ELSE ' ' END + 
		 + CASE WHEN LEN(ITPM.diluente_ins_descricao_resumida) > 0 THEN ' + ' + ITPM.diluente_ins_descricao_resumida 
			   WHEN LEN(ITPM.diluente_ins_descricao) > 0 THEN ' + ' + ITPM.diluente_ins_descricao ELSE ' ' END +
		case when LEN(itpm.diluente_volume) > 0 THEN ' - Volume do Diluente: ' + CONVERT(VARCHAR(10), itpm.diluente_volume) + ' ml ' ELSE '' END 
		AS DescricaoResumida,

		case when LEN(itpm.viamed_descricao) > 0 THEN itpm.viamed_descricao ELSE '' END +
		case when LEN(itpm.diluente_volume_total) > 0 THEN ' - Volume Total: ' + CONVERT(VARCHAR(10), itpm.diluente_volume_total) + ' ml' ELSE '' END + 
		case when LEN(itpm.diluente_valor_velocidade) > 0 THEN ' - Velocidade: ' + CONVERT(VARCHAR(10), itpm.diluente_valor_velocidade) + ' ' + itpm.diluente_medida_velocidade ELSE '' END +
		case itpm.itpresc_caracteristica 
				when 1 then ' - SOS'
				when 3 then ' - Urgente' 
			 else ''
			end 
		AS InformacoesComplementares,

	case when itpm.presc_codigo = p.presc_codigo then '5 - Medicamentos'
		when itps.presc_codigo = p.presc_codigo then '4 - Sinais Vitais'
		when itce.presc_codigo = p.presc_codigo then '3 - Cuidados Especiais'
		when itd.presc_codigo = p.presc_codigo then '2 - Dietas'
		when itpo.presc_codigo = p.presc_codigo then '1 - Oxigenoterapias'
	END AS OrdenacaoTipoItem,

	 CASE
		WHEN ITPM.itpresc_frequencia = 0 THEN 'Imediato'
		WHEN ITPM.itpresc_frequencia = '-120' THEN 'A critério médico'
		WHEN ITPM.itpresc_frequencia =  '-60' THEN 'Contínuo'
		WHEN ITPM.itpresc_frequencia = 15 then '15/15 min'
		WHEN ITPM.itpresc_frequencia = 30 then '30/30 min'
		WHEN ITPM.itpresc_frequencia = 60 then '1/1 h'
		WHEN ITPM.itpresc_frequencia = 120 then '2/2 h'
		WHEN ITPM.itpresc_frequencia = 180 then '3/3 h'
		WHEN ITPM.itpresc_frequencia = 240 then '4/4 h'
		WHEN ITPM.itpresc_frequencia = 300 then '5/5 h'
		WHEN ITPM.itpresc_frequencia = 360 then '6/6 h'
		WHEN ITPM.itpresc_frequencia = 480 then '8/8 h'
		WHEN ITPM.itpresc_frequencia = 720 then '12/12 h'
		WHEN ITPM.itpresc_frequencia = 1440 then '1x ao dia'
		ELSE ''
	END AS FrequenciaFormatada,
	ia.inter_datainter,
	(select ISNULL(stuff((select ',' + isnull(a.Descricao, s.DESCRICAO)
	from Paciente_Alergia pacale
	left join Pep_Alergia a on a.Codigo_Alergia = pacale.Codigo_Alergia
	left join Substancia s on s.id = pacale.Id_Substancia
	where pacale.pac_codigo = p.pac_codigo
	For Xml Path('')), 1, 1, ''),''))
	,itpm.item_prescricao_id
   from #PRESCRICAO p                 
     join #ITEM_PRESCRICAO itpr on p.presc_codigo = itpr.presc_codigo                  
     left join Item_Prescricao_Medicamento itpm on itpr.itpresc_codigo = itpm.itpresc_codigo and itpr.presc_codigo = itpm.presc_codigo                  
     left join Item_Prescricao_Sinais_Vitais itps on(itps.presc_codigo = Isnull(p.presc_codigo , itps.presc_codigo) and itpr.itpresc_codigo = itps.itpresc_codigo and itpr.presc_codigo = itps.presc_codigo)                                    
     left join Item_Prescricao_Cuidados_Especiais itce on(itce.presc_codigo = Isnull(p.presc_codigo , itce.presc_codigo) and itpr.itpresc_codigo = itce.itpresc_codigo and itpr.presc_codigo = itce.presc_codigo)                                  
     left join Item_Prescricao_Dieta itd on(itd.presc_codigo = Isnull(p.presc_codigo , itd.presc_codigo) and itpr.itpresc_codigo = itd.itpresc_codigo and itpr.presc_codigo = itd.presc_codigo)                                    
     left join Cuidados_Especiais ce on (itce.cues_codigo = ce.cues_codigo)                                    
     left join Item_Prescricao_Oxigenoterapia itpo on (itpo.presc_codigo = Isnull(p.presc_codigo , itpo.presc_codigo) and itpr.itpresc_codigo = itpo.itpresc_codigo and itpr.presc_codigo = itpo.presc_codigo)                                    
     left join Oxigenoterapia ox on (ox.oxi_codigo = itpo.oxi_codigo)  
	 left join item_prescricao_procedimento ipp on (ipp.presc_codigo = Isnull(p.presc_codigo , ipp.presc_codigo) and itpr.itpresc_codigo = ipp.itpresc_codigo and itpr.presc_codigo = ipp.presc_codigo)                                       
	 left join tb_procedimento tbp on (ipp.co_procedimento = tbp.co_procedimento)                                  
     join unidade u on u.unid_codigo = p.unid_codigo                  
     join paciente pa on p.pac_codigo = pa.pac_codigo                  
     left join vwlocal_unidade v on p.locatend_codigo = v.locatend_codigo                  
     left join profissional_rede pr on p.prof_codigo = pr.prof_codigo      
     left join profissional_lotacao pl ON p.prof_codigo = pl.prof_codigo and p.locatend_codigo = pl.locatend_codigo    
     left join #internacao_aprazamento ia on ia.inter_codigo = p.inter_codigo
     left join internacao_pep ip on ip.inter_codigo = p.inter_codigo
     left join atendimento ate on ate.atend_codigo = p.atend_codigo
                          
   where (P.ATENDAMB_CODIGO = @ATENDAMB_CODIGO OR P.INTER_CODIGO = @ATENDAMB_CODIGO)               
   order by Ordem_Discriminacao      

 END  

-- Atualiza o Campo OBSERVACOES_ENFERMAGEM                  
create table #OBSENFERMAGEM  
(  
 observacoes_enfermagem varchar(8000) null  
)  
  
DECLARE @Obs varchar(8000)  
DECLARE @ObsAux varchar(1000)  
  
Set @Obs = ''  
Set @ObsAux = ''  
  
DECLARE cursor_obs CURSOR FOR  
  
  select convert(char(5), apt.ANPT_DT_ANOTACAO, 103) + ' ' + convert(char(5), apt.ANPT_DT_ANOTACAO, 108) + ' - ' +   
 pr.prof_nome + ' - ' +   
 apt.ANPT_TX_ANOTACAO + CHAR(13) + CHAR(10) as Obs                     
  from Anotacao_Plano_Terapeutico apt, profissional_rede pr                      
  where apt.prof_codigo = pr.prof_codigo                      
  and apt.atendamb_codigo = ( select top 1 atendamb_codigo from #TEMP )  
  order by ANPT_DT_ANOTACAO desc  
  
OPEN cursor_obs                      
                      
FETCH NEXT FROM cursor_obs                       
INTO @ObsAux  
  
WHILE @@FETCH_STATUS = 0                      
BEGIN  
  
 if (len(@Obs) + len(@ObsAux) < 8000)  
    Set @Obs = @Obs + @ObsAux  
  
 FETCH NEXT FROM cursor_obs                       
 INTO @ObsAux  
END  
  
CLOSE cursor_obs                      
DEALLOCATE cursor_obs                      
  
insert into #OBSENFERMAGEM values (@Obs)  
  
-- Atualiza o Campo HORARIOS_APRAZAMENTO  
    
DECLARE @PrescCodigo char(12), @ItprescCodigo int, @Item varchar(2000), @PrescData smalldatetime, @DataHoraAprazamento smalldatetime, @HorariosAprazamento varchar(2000),@Itpresc_codigo_issoluvel CHAR(1),@item_prescricao_id_solucao uniqueidentifier  
DECLARE @valor varchar(2000)         
DECLARE @PRESC_CODIGO_AUX CHAR(12)          
DECLARE cursor_aprazamento CURSOR FOR                   
            
SELECT presc_codigo, itpresc_codigo, Item, presc_data, DataHoraAprazamento, horarios_aprazamento, itpresc_codigo_issoluvel, item_prescricao_id_solucao            
FROM #TEMP            
                  
OPEN cursor_aprazamento                  
                  
FETCH NEXT FROM cursor_aprazamento                   
INTO @PrescCodigo, @ItprescCodigo, @Item, @PrescData, @DataHoraAprazamento, @HorariosAprazamento, @Itpresc_codigo_issoluvel, @item_prescricao_id_solucao    
    
    
WHILE @@FETCH_STATUS = 0                  
BEGIN                  
   SET @valor = ''                   
   IF((@itpresc_codigo_issoluvel = 'S') AND (@item_prescricao_id_solucao IS NOT NULL))    
  BEGIN      
     SELECT @valor = @valor + ' - ' + convert(char(5), ia.dose_data, 103) + ' ' + convert(char(5), ia.dose_data, 108) + ' ' + isnull(ia.dose_adm, '')                  
     FROM item_aprazamento ia join item_prescricao_medicamento itpm on ia.item_prescricao_id = itpm.item_prescricao_id    
     WHERE itpm.item_prescricao_id = @item_prescricao_id_solucao                  
     ORDER BY ia.itpresc_codigo, ia.dose_data               
        END       
   ELSE        
  BEGIN    
     SELECT @valor = @valor + ' - ' + convert(char(5), ia.dose_data, 103) + ' ' + convert(char(5), ia.dose_data, 108) + ' ' + isnull(ia.dose_adm, '')                  
     FROM item_aprazamento ia                  
     WHERE ia.presc_codigo = @PrescCodigo and ia.itpresc_codigo = @ItprescCodigo                  
     ORDER BY ia.itpresc_codigo, ia.dose_data      
  END    
    
       
   UPDATE  #TEMP                    
   SET     #TEMP.horarios_aprazamento = @valor                  
   FROM    #TEMP                  
   WHERE   #TEMP.PRESC_CODIGO = @PrescCodigo AND #TEMP.ITPRESC_CODIGO = @ItprescCodigo                  
            
   FETCH NEXT FROM cursor_aprazamento                   
   INTO @PrescCodigo, @ItprescCodigo, @Item, @PrescData, @DataHoraAprazamento, @HorariosAprazamento, @Itpresc_codigo_issoluvel, @item_prescricao_id_solucao           
END                  
    
CLOSE cursor_aprazamento                  
DEALLOCATE cursor_aprazamento                  
  
CREATE TABLE #TEMP3 (         
   unid_descricao varchar(50),
   unid_codigo char(4),                  
   set_descricao varchar(30),                  
   prof_nome varchar(50),                  
   pac_codigo char(12),                  
   pac_nome varchar(50),                  
   pac_prontuario_numero char(10),                  
   locint_descricao varchar(8000),                  
   pac_idade int,                  
   presc_observacao varchar(4000),                  
   presc_codigo char(12),                  
   itpresc_codigo int,                  
   itpresc_quantidade varchar(100),                  
   itpresc_total varchar(100),                  
   itpresc_obs varchar(2000),                  
   TipoItemPrescricao char(1),                  
   Agrupamento char(1),                  
   Intervalo int,                  
   Item varchar(2000),                  
   Detalhe varchar(2000),                  
   cues_codigo int,                  
   oxi_codigo int,                  
   UnidadeTempo char(1),                  
   presc_data smalldatetime,                   
   DataHoraAprazamento smalldatetime,                  
   GeraPedidoPaciente char(1),                  
   cabecalho_report1 varchar(100),                  
   cabecalho_report2 varchar(100),                  
   cabecalho_report3 varchar(100),                  
   pac_nascimento datetime,                  
   pac_sexo varchar(15),                  
   Prof_registro_conselho varchar(20),    
   orgao_emissor_conselho varchar(20),    
   num_atendimento char(12),                  
   Ordem_Discriminacao char(1),                  
   cor_risco varchar(50),                  
  horarios_aprazamento varchar(2000),                  
   atendamb_codigo char(12),
   atendamb_peso numeric(9,1),  
   UnidadeMedida  varchar(50)      ,
   inter_codigo varchar(12),
   atend_codigo varchar(12),
   pac_mae varchar(50),
   MedicamentoSuspenso varchar(100),
   DescricaoResumida varchar(1000),
   InformacoesComplementares varchar(8000),
   OrdenacaoTipoItem varchar(100),
   FrequenciaFormatada varchar(100),
   inter_datainter smalldatetime,
   alergias varchar(1000),
   item_prescricao_id uniqueidentifier
                
)             
          
insert into #TEMP3          
   SELECT DISTINCT        
      unid_descricao,
	  unid_codigo,                  
      set_descricao,                  
      prof_nome,                  
      pac_codigo,                  
      pac_nome,                  
      pac_prontuario_numero,                  
      locint_descricao,                  
      pac_idade,                  
      presc_observacao,                  
      presc_codigo,                  
      itpresc_codigo,                  
      itpresc_quantidade,                  
      itpresc_total,                  
      itpresc_obs,                  
      TipoItemPrescricao,                  
      Agrupamento,                  
      Intervalo,                  
      Item,                  
      Detalhe,                  
      cues_codigo,                  
      oxi_codigo,                  
      UnidadeTempo,                  
      presc_data,                   
      null as DataHoraAprazamento,                  
      GeraPedidoPaciente,                  
      null AS cabecalho_report1,                  
      null AS cabecalho_report2,            
      null AS cabecalho_report3,                
      pac_nascimento,                  
      pac_sexo,                  
      Prof_registro_conselho,   
      orgao_emissor_conselho,   
      num_atendimento,                  
      Ordem_Discriminacao,                  
      cor_risco,                  
      horarios_aprazamento,                  
      atendamb_codigo,
	  atendamb_peso,
	  UnidadeMedida,
	  inter_codigo,
	  atend_codigo,
	  pac_mae,
	  MedicamentoSuspenso,
	  DescricaoResumida, 
	  InformacoesComplementares, 
	  OrdenacaoTipoItem,
	  FrequenciaFormatada,
	  inter_datainter,
	  alergias,
	  item_prescricao_id
   FROM #TEMP            
   --ORDER BY #TEMP.Ordem_Discriminacao             
          
if(@PRESC_CODIGO IS NOT NULL)            
BEGIN             
 SELECT        
       unid_descricao,             
       set_descricao,                  
       prof_nome,                  
       pac_codigo,     
       pac_nome,                  
       pac_prontuario_numero,                  
       locint_descricao,      
       pac_idade,                  
       presc_observacao,                  
       presc_codigo,                  
       itpresc_codigo,                  
       itpresc_quantidade,                  
       itpresc_total,                  
       itpresc_obs,                  
       TipoItemPrescricao,                  
       Agrupamento,                  
       Intervalo,                  
       Item,                  
       Detalhe,                  
       cues_codigo,                  
       oxi_codigo,                  
       UnidadeTempo,                  
       presc_data,                   
       null as DataHoraAprazamento,                  
       GeraPedidoPaciente,               
       pac_nascimento,                  
       pac_sexo,                  
       Prof_registro_conselho,   
       orgao_emissor_conselho,   
       num_atendimento,              
       Ordem_Discriminacao,                  
       cor_risco,                  
       horarios_aprazamento,                  
       (select top 1 observacoes_enfermagem from #OBSENFERMAGEM) as observacoes_enfermagem,                       
       atendamb_codigo,
	   atendamb_peso,
	   UnidadeMedida,
	   inter_codigo,
	   atend_codigo,
	   pac_mae,
	   MedicamentoSuspenso,
	   DescricaoResumida,
	   InformacoesComplementares,
	   OrdenacaoTipoItem,
	   FrequenciaFormatada,
	   ROW_NUMBER() OVER (ORDER BY #TEMP3.OrdenacaoTipoItem, #TEMP3.itpresc_codigo) as NumeracaoItem,
	   inter_datainter,
	   alergias,
	   item_prescricao_id
 FROM #TEMP3
 ORDER BY #TEMP3.OrdenacaoTipoItem, #TEMP3.itpresc_codigo

  END          

ELSE          
  BEGIN          
 SELECT          
       unid_descricao,             
       set_descricao,                  
       prof_nome,                  
       pac_codigo,                 
       pac_nome,                  
       pac_prontuario_numero,                  
       locint_descricao,                  
       pac_idade,                  
       presc_observacao,                  
       presc_codigo,                  
       itpresc_codigo,                  
       itpresc_quantidade,                  
       itpresc_total,                  
       itpresc_obs,                  
       TipoItemPrescricao,                  
       Agrupamento,                  
       Intervalo,                
       Item,                  
       Detalhe,                  
       cues_codigo,                  
       oxi_codigo,                  
       UnidadeTempo,                  
       presc_data,                   
       null as DataHoraAprazamento,                  
       GeraPedidoPaciente,               
       pac_nascimento,                  
       pac_sexo,                  
       Prof_registro_conselho,   
       orgao_emissor_conselho,   
       num_atendimento,              
       Ordem_Discriminacao,                  
       cor_risco,                  
       horarios_aprazamento,                  
       (select top 1 observacoes_enfermagem from #OBSENFERMAGEM) as observacoes_enfermagem,            
       atendamb_codigo,
	   atendamb_peso,
	   UnidadeMedida,
	   inter_codigo,
	   atend_codigo,
	   pac_mae,
	   MedicamentoSuspenso,
	   DescricaoResumida,
	   InformacoesComplementares,
	   OrdenacaoTipoItem,
	   FrequenciaFormatada,
	   ROW_NUMBER() OVER (ORDER BY #TEMP3.OrdenacaoTipoItem, #TEMP3.itpresc_codigo) as NumeracaoItem,
	   inter_datainter,
	   alergias,
	   item_prescricao_id
 FROM #TEMP3
 ORDER BY #TEMP3.OrdenacaoTipoItem, #TEMP3.itpresc_codigo
    
  END           

SET NOCOUNT OFF
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Solicitacao_Pedido]...';


GO
ALTER PROCEDURE [dbo].[ksp_Solicitacao_Pedido]
@solped_codigo CHAR (12)=null, @solped_datahora DATETIME=null
, @solped_codigoorigem CHAR (12)=null, @solped_urgencia CHAR (1)=null
, @solped_tiposolicitacao INT=null, @oripac_codigo SMALLINT=null
, @solped_observacao VARCHAR (1000)=null, @solped_codigopedido CHAR (12)=null
, @unid_codigo CHAR (12)=null, @prof_codigo CHAR (4)
, @locatend_codigo CHAR (4), @tp_pesq SMALLINT=null, @opcao SMALLINT
, @pac_codigo CHAR (12)=null, @solped_datahorainicial DATETIME=null
, @solped_datahorafinal DATETIME=null, @solped_disponivel CHAR (1)='S'
, @solped_dataprevista DATETIME=null, @solped_unid_descricao VARCHAR (50)=null
, @solped_prof_nome VARCHAR (50)=null, @solped_setor_descricao VARCHAR (50)=null
, @url_laudo VARCHAR (200)=null, @solped_Periodo INT=NULL
, @pst_codigo CHAR (4)=NULL, @reex_codigo_externo CHAR (10)=NULL, @soapid UNIQUEIDENTIFIER=NULL,
@solped_datahora_solicitacao DATETIME=null
AS
set nocount on                  
                  
                  
                   
--> VARIÁVEIS                   
declare @sql   varchar(500)                  
declare @dataatual char(10)                  
declare @erro  int                  
declare @PED_CODIGO int                  
                  
                  
--> LISTA TODOS OS PEDIDOS                   
if @opcao = 0                  
begin                   
     select  *                  
                  
     from  vwsolicitacao_pedido                  
end                  
                  
                  
                  
--> CARREGA DADOS DO PEDIDO                   
if @opcao = 1                  
begin                  
                  
    select   *                  
                  
     from   vwsolicitacao_pedido sp                  
                  
     where  [solped_codigo] = @solped_codigo                    
                           
end                  
                  
                  
                  
--> GRAVA SOLICITAÇÃO DE PEDIDO                  
if @opcao = 2                  
begin                  
                  
                
 set @erro = 0                  
                  
 set @dataatual = convert(varchar, @solped_datahora, 103)                  
 set @erro = @erro + @@error                  
                  
 exec ksp_controle_sequencial @unidade    = @unid_codigo ,                   
         @chave      = 'SOLICITACAO_PEDIDO',                   
         @data       = @dataatual,                   
         @novocodigo = @solped_codigo OUTPUT                  
                  
                  
 set @erro = @erro + @@error                  
                 
                 
                 
 EXEC KSP_PEDIDO                
  @PED_CODIGO OUTPUT,                
     @solped_DataHora,                  
     @solped_Observacao,                  
     @solped_unid_descricao,                   
     @solped_prof_nome,                   
     @solped_setor_descricao,                
     'N',                
     @unid_codigo,                
     @pac_codigo,                 
     @Oripac_Codigo,                  
     @solped_CodigoOrigem,                  
     @prof_codigo,                  
     @locatend_codigo,                
     1,                
     @solped_tiposolicitacao                 
                     
                  
                  
     insert into solicitacao_pedido(                 
     PED_CODIGO,                
     solped_codigo,                  
--     solped_datahora,                  
--     solped_codigoorigem,                  
     solped_urgencia,                  
--     solped_tiposolicitacao,                  
--     oripac_codigo,                  
--     solped_observacao,                  
     solped_codigopedido,                  
--     prof_codigo,                  
--     locatend_codigo,                  
--     pac_codigo,                  
  solped_disponivel,                 
     solped_datahora_solicitacao,                  
     solped_dataprevista                
--     unid_codigo,                  
--     solped_unid_descricao,                   
--     solped_prof_nome,                
--     solped_setor_descricao 
	,SoapId             
)                  
                  
   values (                 
 @PED_CODIGO,                
    @solped_codigo,                  
--     @solped_DataHora,                  
--     @solped_CodigoOrigem,                  
     @solped_Urgencia,                  
--     @solped_TipoSolicitacao,                  
--     @Oripac_Codigo,                  
--     @solped_Observacao,                  
     @solped_CodigoPedido,                  
--     @prof_codigo,                  
--     @locatend_codigo,                  
--     @pac_codigo,                  
     @solped_Disponivel,                  
     getdate(),                  
     @solped_DataPrevista                 
--     @unid_codigo,                  
--     @solped_unid_descricao,                   
--     @solped_prof_nome,                   
--     @solped_setor_descricao                
	,@SoapId
 )                  
                    
 set @erro = @erro + @@error                  
                  
 if @erro > 0                  
 begin                  
  raiserror('erro ao incluir solicitação de pedido.',1,1)                  
 end                  
 else                  
 begin                  
  select @solped_codigo                  
 end                  
end                  
                  
                  
                  
--> ALTERA SOLICITAÇÃO DE PEDIDO                  
if @opcao = 3                  
begin                  
                
  select @PED_CODIGO = PED_CODIGO from solicitacao_pedido where solped_codigo = @solped_codigo                
EXEC KSP_PEDIDO                
  @PED_CODIGO,                
     @solped_DataHora,                  
     @solped_Observacao,                  
     @solped_unid_descricao,                   
     @solped_prof_nome,                   
     @solped_setor_descricao,                
     'N',                
     @unid_codigo,                
     @pac_codigo,                 
     @Oripac_Codigo,                  
     @solped_CodigoOrigem,                  
     @prof_codigo,                  
     @locatend_codigo,                
     2,                
     @solped_tiposolicitacao                 
                     
                 
 update  solicitacao_pedido                   
  SET                
  solped_urgencia = @solped_urgencia,                  
  solped_codigopedido = @solped_codigopedido,                  
  solped_disponivel = @solped_disponivel,                  
  solped_dataprevista = @solped_dataprevista                
                  
 where [solped_codigo] = @solped_codigo                    
end                  
                  
                  
                  
--> exclui solicitação de pedido e suas dependências                  
if @opcao = 4                  
begin                  
                  
  select @PED_CODIGO = PED_CODIGO from solicitacao_pedido where solped_codigo = @solped_codigo                
                  
 set @erro = 0                    
                   
 /* exclui pedido exame complemento */                  
 delete from pedido_exame_complemento where ped_codigo = @PED_CODIGO                  
 set @erro = @erro + @@error                  
                  
 /* exclui pedido referencia */                  
 delete from pedido_referencia where solped_CodigoOrigem = @solped_codigo                  
 set @erro = @erro + @@error                  
                  
 /* exclui solicitação pedido exame */                  
 delete from solicitacao_pedido_exame where [ped_codigo] = @PED_CODIGO                  
 set @erro = @erro + @@error                  
                   
 /* exclui solicitação pedido */                  
 delete from solicitacao_pedido where [ped_codigo] = @PED_CODIGO                  
 set @erro = @erro + @@error                  
                  
 if @erro > 0                  
 begin                  
  raiserror('erro ao exclui solicitação de pedido.',1,1)                  
 end               
end                  
                  
                  
                  
--> LISTA PEDIDO POR CÓDIGO DE ORIGEM                  
if @opcao = 5            
begin            
	select distinct sp.solped_codigo,
		sp.[ped_codigo] ,            
		solped_datahora ,            
		sp.prof_codigo,            
		solped_tiposolicitacao,            
		tiposolicitacao =            
		case solped_tiposolicitacao            
			WHEN 7 THEN 'EXAME LABORATORIO'            
			WHEN 8 THEN 'EXAME RADIOLOGICO' 
			WHEN 9 THEN 'MÉTODO DIAGNÓSTICO'           
		end,            
		isnull(re.reex_codigo, 'Enviar') as reex_codigo,            
		lre.lare_codigo,            
		isnull(re.reex_cientificalab_codigo, 'Enviar') as reex_codigo_externo,            
		sp.solped_disponivel,            
		sp.solped_urgencia,
		sp.unid_codigo,            
		sp.solped_unid_descricao,             
		sp.solped_prof_nome,             
		sp.solped_setor_descricao,            
		sp.solped_codigo,          
		sp.solped_CodigoPedido,        
		re.reex_url_laudo,
		sp.soapid,
		sp.solped_Observacao,
		sp.solped_DataHora_Solicitacao
	from  vwsolicitacao_pedido sp
		left outer join requisicao_externa re on sp.[ped_codigo] = re.ped_codigo
		left outer join laudo_requisicao_externa lre on re.reex_codigo = lre.reex_codigo
	where   sp.oripac_codigo = @oripac_codigo            
		and  sp.solped_codigoorigem = @solped_codigoorigem         
		and (sp.soapid = @soapid or @soapid is null)
	order by solped_datahora desc             
end            
    
                
--> LISTA SOLICITAÇÃO DE PEDIDO POR PERÍODO                  
if @opcao = 6                  
begin                  
                  
 select  sp.*,                  
  pac.pac_nome,                  
  re.reex_cientificalab_codigo as reex_codigo_externo                  
                  
 from vwsolicitacao_pedido sp                  
                   
 inner join  profissional p                   
 on   p.prof_codigo=sp.prof_codigo and p.locatend_codigo=sp.locatend_codigo                  
                  
 inner join  paciente pac                   
 on   sp.pac_codigo = pac.pac_codigo                  
                  
 left outer join requisicao_externa re                   
 on   sp.[ped_codigo] = re.ped_codigo                  
                  
 left outer join laudo_requisicao_externa lre                   
 on   re.reex_codigo = lre.reex_codigo                  
                   
 where   sp.solped_datahora >= @solped_datahorainicial                  
 and  sp.solped_datahora < @solped_datahorafinal                  
                   
 order by  solped_datahora desc                      
end                  
                  
                  
                  
--> SOLICITACOES SEM REQUISICAO EXTERNA OU COM REQUISICAO EXTERNA SEM ENVIO                  
if @opcao = 7                    
begin                      
                    
 select distinct sp.[ped_codigo],                       
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when isnull(pa.spa_nome_social, pac.pac_nome_social) is null 
        then rtrim(isnull(pa.spa_nome, pac.pac_nome)) 
		else rtrim(isnull(pa.spa_nome_social, pac.pac_nome_social)) + '[' + rtrim(isnull(pa.spa_nome, pac.pac_nome)) + ']' end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco            
                       
 from pronto_atendimento pa                        
 inner join  atendimento_ambulatorial aa on pa.spa_codigo = aa.spa_codigo                        
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem      
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo 
 and sp.oripac_codigo = 5       
 and sp.solped_TipoSolicitacao = 7                   
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())           
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo = pa.locatend_codigo and cdSexo = pac.pac_sexo   
 left join  requisicao_externa re on sp.[ped_codigo] = re.ped_codigo               
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
 left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo and spe.reex_status = 'NC')  
 where (usu_codigo_envio is null or spe1.reex_cientificalab_codigo is null)     
 and aa.atendamb_datafinal is null                    
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))                  
 and ss.tiposetor = '3'     
 and re.usu_codigo_envio is null
 and ss.pst_codigo = @pst_codigo    
 and not exists (select 1 from internacao i where i.spa_codigo = pa.spa_codigo)    
                
 union all    
     
 /*spa vermelho sem internação*/    
 select distinct sp.[ped_codigo],                       
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when isnull(pa.spa_nome_social, p.pac_nome_social) is null 
        then rtrim(isnull(pa.spa_nome, p.pac_nome)) 
		else rtrim(isnull(pa.spa_nome_social, p.pac_nome_social)) + '[' + rtrim(isnull(pa.spa_nome, p.pac_nome)) + ']' end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco            
                       
 from pronto_atendimento pa                        
 inner join  atendimento_ambulatorial aa on pa.spa_codigo = aa.spa_codigo   
 inner join paciente p on aa.pac_codigo = p.pac_codigo                     
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 5       
 and sp.solped_TipoSolicitacao = 7                   
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())           
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo  = pa.locatend_codigo and cdSexo = p.pac_sexo   
 left join  requisicao_externa re on sp.[ped_codigo] = re.ped_codigo               
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
 left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo and spe.reex_status = 'NC')  
 where (usu_codigo_envio is null or spe1.reex_cientificalab_codigo is null)     
 and aa.atendamb_datafinal is null                    
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))                  
 and ss.tiposetor = '2'    
 and ucr.upaclaris_risco = '6'  
 and re.usu_codigo_envio is null   
 and ss.pst_codigo = @pst_codigo    
 and not exists (select 1 from internacao i where i.spa_codigo = pa.spa_codigo)               
                
 union all                  
                   
 select distinct sp.[ped_codigo],                       
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when isnull(e.emer_nome_social, pac.pac_nome_social) is null 
        then  rtrim(isnull(e.emer_nome, pac.pac_nome)) 
		else rtrim(isnull(e.emer_nome_social, pac.pac_nome_social)) + '[' + rtrim(isnull(e.emer_nome, pac.pac_nome)) + ']' end  as pac_nome,             
   ra.Risaco_cor_leve,      
   e.risaco_codigo as risco                         
            
 from   emergencia e                        
 inner join  atendimento_ambulatorial aa on   e.emer_codigo = aa.emer_codigo    
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo                     
 inner join  vwsolicitacao_pedido sp on   aa.emer_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 3        
 and sp.solped_TipoSolicitacao = 7                
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())               
 inner join upa_acolhimento ua on ua.emer_codigo = e.emer_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo  = e.locatend_codigo and cdSexo = pac.pac_sexo
 left join  requisicao_externa re on   sp.[ped_codigo] = re.ped_codigo                        
 left join risco_acolhimento ra on ra.risaco_codigo = e.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo and spe.reex_status = 'NC')  
 where   (usu_codigo_envio is null or spe1.reex_cientificalab_codigo is null)     
 and   aa.atendamb_datafinal is null    
 and ss.tiposetor = '2'     
 and ss.pst_codigo = @pst_codigo                                       
 and re.usu_codigo_envio is null
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))    
 and not exists (select 1 from internacao i where i.emer_codigo = e.emer_codigo)    
                        
 union all                        
 /*internacao spa*/                      
 select distinct sp.[ped_codigo],                       
   sp.solped_codigoorigem,                       
   sp.oripac_codigo,                       
   sp.solped_datahora,                       
   case when pa.spa_nome_social is null then rtrim(pa.spa_nome) else rtrim(pa.spa_nome_social) + '[' + rtrim(pa.spa_nome) + ']'  end as pac_nome,                      
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco            
                      
 from   pronto_atendimento pa                         
 inner join  atendimento_ambulatorial aa on   pa.spa_codigo = aa.spa_codigo                        
 inner join  internacao i on aa.spa_codigo = i.spa_codigo                       
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 5       
 and sp.solped_TipoSolicitacao = 7       
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())                    
 inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo    
 left join  requisicao_externa re on   sp.[ped_codigo] = re.ped_codigo                        
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo and spe.reex_status = 'NC')  
 where   (usu_codigo_envio is null or spe1.reex_cientificalab_codigo is null)     
 and aa.atendamb_datafinal is null    
 and l.pst_codigo = @pst_codigo                    
     
 union all                        
 /*internacao emergência*/                      
 select distinct sp.[ped_codigo],                       
   sp.solped_codigoorigem,                       
   sp.oripac_codigo,                       
   sp.solped_datahora,                       
   case when e.emer_nome_social is null then rtrim(e.emer_nome) else rtrim(e.emer_nome_social) + '[' + rtrim(e.emer_nome) + ']' end as pac_nome,                      
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco            
                      
 from   emergencia e                         
 inner join  atendimento_ambulatorial aa on   e.emer_codigo = aa.emer_codigo                        
 inner join  internacao i on aa.emer_codigo = i.emer_codigo                       
 inner join  vwsolicitacao_pedido sp on aa.emer_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 3       
 and sp.solped_TipoSolicitacao = 7       
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())                    
 inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo    
 left join  requisicao_externa re on   sp.[ped_codigo] = re.ped_codigo                        
 inner join upa_acolhimento ua on ua.emer_codigo = e.emer_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
 left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo and spe.reex_status = 'NC')  
 where   (usu_codigo_envio is null or spe1.reex_cientificalab_codigo is null)     
 and aa.atendamb_datafinal is null    
 and l.pst_codigo = @pst_codigo    
 and re.usu_codigo_envio is null
      
 order by risco desc, sp.solped_datahora asc                      
end                    
                  
--> VERIFICA SE PEDIDO FOI AGENDADO                  
if @opcao = 8                  
begin                  
 select  1                  
 from  agenda_exame  a                
 inner join solicitacao_pedido s on a.ped_codigo = s.ped_codigo                
 where  s.[ped_codigo] = @solped_codigo                  
end            
          
          
if @opcao = 9                  
begin                  
  update  solicitacao_pedido                   
  SET                
  solped_DataLaudo = getdate()          
  where solped_codigo = @solped_codigo        
  and solped_DataLaudo is null                  
end          
      
if @opcao = 10      
begin                  
  update  solicitacao_pedido                   
  SET                
  [solped_laudo_lido] = 'S'      
  where solped_codigo = @solped_codigo;      
        
  insert into laudo_poolimp 
  (Url_Laudo)     
  values      
  (ISNULL(@url_laudo, null));      
        
end      
       
--> SOLICITACOES COM REQUISICAO EXTERNA - Fila da Administração      
if @opcao = 11      
begin                      
                    
 select distinct sp.[ped_codigo],                       
   re.reex_numero_amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when  pa.spa_nome_social is null THEN pa.spa_nome   
        else rtrim(pa.spa_nome_social) +' ['+rtrim(pa.spa_nome)+']' 
   end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   re.reex_status                
                       
 from pronto_atendimento pa                        
 inner join  atendimento_ambulatorial aa on pa.spa_codigo = aa.spa_codigo    
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo                     
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 5       
 and sp.solped_TipoSolicitacao = 7                   
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())           
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo  = pa.locatend_codigo and cdSexo = pac.pac_sexo   
 left join  requisicao_externa re on sp.[ped_codigo] = re.ped_codigo               
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
 left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo)  
 where aa.atendamb_datafinal is null and re.reex_numero_amostra is not null
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))                  
 and ss.tiposetor = '3'     
 and ss.pst_codigo = @pst_codigo    
 and not exists (select 1 from internacao i where i.spa_codigo = pa.spa_codigo)    
                
 union all    
     
 /*spa vermelho sem internação*/    
 select distinct sp.[ped_codigo],                       
   re.reex_numero_amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when  pa.spa_nome_social is null THEN pa.spa_nome   
        else rtrim(pa.spa_nome_social) +' ['+rtrim(pa.spa_nome)+']' 
   end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   re.reex_status                
                       
 from pronto_atendimento pa                        
 inner join  atendimento_ambulatorial aa on pa.spa_codigo = aa.spa_codigo  
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo                       
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 5       
 and sp.solped_TipoSolicitacao = 7                   
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())           
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo  = pa.locatend_codigo and cdSexo = pac.pac_sexo   
 left join  requisicao_externa re on sp.[ped_codigo] = re.ped_codigo               
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
 left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo)  
 where aa.atendamb_datafinal is null and re.reex_numero_amostra is not null
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))                  
 and ss.tiposetor = '2'    
 and ucr.upaclaris_risco = '6'  
 and ss.pst_codigo = @pst_codigo    
 and not exists (select 1 from internacao i where i.spa_codigo = pa.spa_codigo)               
                
 union all                  
                   
 select distinct sp.[ped_codigo],                       
   re.reex_numero_amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when e.emer_nome_social is null THEN e.emer_nome   
        else rtrim( e.emer_nome_social) +' ['+rtrim( e.emer_nome)+']' 
   end  as pac_nome,            
 ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   re.reex_status    
            
 from   emergencia e                        
 inner join  atendimento_ambulatorial aa on   e.emer_codigo = aa.emer_codigo  
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo                       
 inner join  vwsolicitacao_pedido sp on   aa.emer_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 3        
 and sp.solped_TipoSolicitacao = 7                
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())               
 inner join upa_acolhimento ua on ua.emer_codigo = e.emer_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo  = e.locatend_codigo and cdSexo = pac.pac_sexo   
 left join  requisicao_externa re on   sp.[ped_codigo] = re.ped_codigo                        
 left join risco_acolhimento ra on ra.risaco_codigo = e.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo and spe.reex_status = 'NC')  
 where aa.atendamb_datafinal is null and re.reex_numero_amostra is not null
 and ss.tiposetor = '2'     
 and ss.pst_codigo = @pst_codigo                                       
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))    
 and not exists (select 1 from internacao i where i.emer_codigo = e.emer_codigo)    
                        
 union all                        
 /*internacao spa*/                      
 select distinct sp.[ped_codigo],                       
   re.reex_numero_amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when  pa.spa_nome_social is null THEN pa.spa_nome   
        else rtrim(pa.spa_nome_social) +' ['+rtrim(pa.spa_nome)+']' 
   end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   re.reex_status                
                      
 from   pronto_atendimento pa                         
 inner join  atendimento_ambulatorial aa on   pa.spa_codigo = aa.spa_codigo                        
 inner join  internacao i on aa.spa_codigo = i.spa_codigo                       
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 5       
 and sp.solped_TipoSolicitacao = 7       
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())                    
 inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo    
 left join  requisicao_externa re on   sp.[ped_codigo] = re.ped_codigo                        
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo)  
 where aa.atendamb_datafinal is null and re.reex_numero_amostra is not null
 and l.pst_codigo = @pst_codigo                    
     
 union all                        
 /*internacao emergência*/                      
 select distinct sp.[ped_codigo],                       
   re.reex_numero_amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when e.emer_nome_social is null THEN e.emer_nome   
        else rtrim( e.emer_nome_social) +' ['+rtrim( e.emer_nome)+']' 
   end  as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   re.reex_status                
                      
 from   emergencia e                         
 inner join  atendimento_ambulatorial aa on   e.emer_codigo = aa.emer_codigo                        
 inner join  internacao i on aa.emer_codigo = i.emer_codigo                       
 inner join  vwsolicitacao_pedido sp on aa.emer_codigo = sp.solped_codigoorigem       
 and sp.oripac_codigo = 3       
 and sp.solped_TipoSolicitacao = 7       
 and sp.solped_DataHora > dateadd(dd, -@solped_Periodo, getdate())                    
 inner join vwleito l on i.locatend_leito = l.locatend_codigo and i.lei_codigo = l.lei_codigo    
 left join  requisicao_externa re on   sp.[ped_codigo] = re.ped_codigo                        
 inner join upa_acolhimento ua on ua.emer_codigo = e.emer_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 left join (select distinct ped_codigo, reex_cientificalab_codigo from solicitacao_pedido_exame) spe1 on re.ped_codigo = spe1.ped_codigo    
 left join solicitacao_pedido_exame spe on (sp.ped_codigo = spe.ped_codigo)  
 where aa.atendamb_datafinal is null and re.reex_numero_amostra is not null
 and l.pst_codigo = @pst_codigo    
 and re.usu_codigo_envio is null
      
 order by risco desc, sp.solped_datahora asc                      
end                    
    
--> LISTA PEDIDO POR CÓDIGO DE ORIGEM                  
if @opcao = 12    
begin                
 select  sp.[ped_codigo] ,                
  solped_datahora ,                
  sp.prof_codigo,                
  solped_tiposolicitacao,                
  re.reex_codigo,
  re.reex_cientificalab_codigo, 
  sp.solped_disponivel,                
  sp.solped_urgencia,                
  sp.unid_codigo,                
  sp.solped_unid_descricao,                 
  sp.solped_prof_nome,                 
  sp.solped_setor_descricao,                
  sp.solped_codigo,              
  sp.solped_CodigoPedido,            
  re.reex_url_laudo,            
  spe.reex_status,    
  spe.solpedexa_descricao,     
  reex_cientificalab_observacao,    
  el.exalab_mneumonico     
  ,sp.solped_Observacao              
 from  vwsolicitacao_pedido sp                
                
 inner join requisicao_externa re                 
 on   sp.[ped_codigo] = re.ped_codigo                
    
 inner join solicitacao_pedido_exame spe on spe.ped_codigo = re.ped_codigo     
 inner join exame_laboratorio el on el.exalab_codigo = spe.solpedexa_Codigo_Exame    
               
 where   sp.oripac_codigo = @oripac_codigo                
 and  sp.solped_codigoorigem = @solped_codigoorigem                
 --and re.reex_codigo = spe.reex_codigo               
 and re.reex_numero_amostra = @reex_codigo_externo 
 order by solped_datahora desc                
end                
                  
if @opcao = 13  
begin                
  select  distinct
  sp.[ped_codigo] ,                
  spe.reex_status,
  solped_datahora ,                
  sp.prof_codigo,                
  solped_tiposolicitacao,                
  re.reex_codigo,
  re.reex_cientificalab_codigo, 
  sp.solped_disponivel,                
  sp.solped_urgencia,                
  sp.unid_codigo,                
  sp.solped_unid_descricao,                 
  sp.solped_prof_nome,                 
  sp.solped_setor_descricao,                
  sp.solped_codigo,              
  sp.solped_CodigoPedido,            
  re.reex_url_laudo,            
  re.reex_status      
                 
 from  vwsolicitacao_pedido sp                
 
 left outer join requisicao_externa re                 
 on   sp.ped_codigo = re.ped_codigo                
                 
 left  join solicitacao_pedido_exame spe   
 on (re.ped_codigo = spe.ped_codigo)
          
 where   sp.oripac_codigo = @oripac_codigo                
 and  sp.solped_codigoorigem = @solped_codigoorigem                
  and (((spe.reex_status is null or spe.reex_status = 'AC') )
 or (spe.reex_status = 'NC'))
 and (spe.reex_codigo is null or re.reex_codigo = spe.reex_codigo)
 and re.reex_datahora_envio is null
 order by solped_datahora desc                
end

if @opcao = 16  
begin                
 select distinct sp.[ped_codigo],                       
   ami.Amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when  pa.spa_nome_social is null THEN pa.spa_nome   
        else rtrim(pa.spa_nome_social) +' ['+rtrim(pa.spa_nome)+']' 
   end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   null as reex_status                
                       
 from pronto_atendimento pa                        
 inner join  atendimento_ambulatorial aa on pa.spa_codigo = aa.spa_codigo    
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo                     
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem and sp.oripac_codigo = 5 and sp.solped_TipoSolicitacao = 7 and sp.solped_DataHora > dateadd(dd, -30, getdate())            -- dateadd(dd, -@solped_Periodo, getdate())                     
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                        
 inner join AmostraMigradaI9LIS ami on sp.solped_codigo = ami.CodigoPedido
 where aa.atendamb_datafinal is null  
 and not exists (select 1 from internacao i where i.spa_codigo = pa.spa_codigo)    
                
 union all    
     
 /*spa vermelho sem internação*/    
 select distinct sp.[ped_codigo],                       
   ami.Amostra as reex_codigo_externo,
   sp.solped_codigoorigem,                      
   sp.oripac_codigo,                      
   sp.solped_datahora,                      
   case when  pa.spa_nome_social is null THEN pa.spa_nome   
        else rtrim(pa.spa_nome_social) +' ['+rtrim(pa.spa_nome)+']' 
   end as pac_nome,            
   ra.Risaco_cor_leve,      
   ucr.risaco_codigo as risco,
   null as reex_status                
                       
 from pronto_atendimento pa                        
 inner join  atendimento_ambulatorial aa on pa.spa_codigo = aa.spa_codigo  
 inner join paciente pac on aa.pac_codigo = pac.pac_codigo                       
 inner join  vwsolicitacao_pedido sp on aa.spa_codigo = sp.solped_codigoorigem and sp.oripac_codigo = 5  and sp.solped_TipoSolicitacao = 7 and sp.solped_DataHora > dateadd(dd, -30, getdate()) -- dateadd(dd, -@solped_Periodo, getdate())           
 inner join setor_clinica_paramtetro_stok ss on ss.locatendcodigo  = pa.locatend_codigo and cdSexo = pac.pac_sexo             
 inner join upa_acolhimento ua on ua.spa_codigo = pa.spa_codigo        
 left join upa_classificacao_risco ucr on ucr.aco_codigo = ua.aco_codigo         
 left join risco_acolhimento ra on ra.risaco_codigo = ucr.risaco_codigo                         
 inner join AmostraMigradaI9LIS ami on sp.solped_codigo = ami.CodigoPedido
 where aa.atendamb_datafinal is null
 and (ss.risaco_codigo = ucr.risaco_codigo or (ss.risaco_codigo is null and ucr.risaco_codigo is null))                  
 and ss.tiposetor = '2' and ucr.upaclaris_risco = '6'  
 and not exists (select 1 from internacao i where i.spa_codigo = pa.spa_codigo)               
                
end
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_procedimento_internacao_real]...';


GO
ALTER PROCEDURE [dbo].[ksp_procedimento_internacao_real]
@opcao INT, @inter_codigo CHAR (12), @co_procedimento CHAR (10), @quantidade INT, @cbo_codigo CHAR (6), @prof_codigo CHAR (4), @data_inclusao DATETIME, @IdEquCodigo INT, @CNPJFornecedor VARCHAR (14), @CNPJFabricante VARCHAR (14), @Lote VARCHAR (20), @Serie VARCHAR (20), @NotaFiscal VARCHAR (6), @RegistroANVISA VARCHAR (20), @Competencia VARCHAR (6), @Servico CHAR (3), @Classificacao CHAR (3), @ObitoFetal INT, @CodigoUnidade CHAR (4), @CNES CHAR (7), @CNS CHAR (15), @NumSISPreNatal INT, @NumNascVivo INT, @NumAltas INT, @NumTransferencias INT, @NumObitos INT, @LocalAdicionarProcedimento varchar(50), @IdNefro INT = null
AS
BEGIN

IF @opcao = 0
BEGIN
	SELECT
		P.NO_PROCEDIMENTO,
		O.NO_OCUPACAO,
		PR.PROF_NOME,
		PIR.*
	FROM
		PROCEDIMENTO_INTERNACAO_REAL PIR INNER JOIN TB_PROCEDIMENTO P ON (PIR.CO_PROCEDIMENTO=P.CO_PROCEDIMENTO)
		LEFT JOIN TB_OCUPACAO O ON (PIR.CBO_CODIGO=O.CO_OCUPACAO)
		LEFT JOIN PROFISSIONAL_REDE PR ON (PIR.PROF_CODIGO=PR.PROF_CODIGO)
	WHERE
		inter_codigo = @inter_codigo
END

IF @opcao = 1
BEGIN
	INSERT INTO PROCEDIMENTO_INTERNACAO_REAL
		(inter_codigo,
		co_procedimento,
		quantidade,
		cbo_codigo,
		prof_codigo,
		data_inclusao,
		IdEquCodigo,
		CNPJFornecedor,
		CNPJFabricante,
		Lote,
		Serie,
		NotaFiscal,
		RegistroANVISA,
		Competencia,
		Servico,
		Classificacao,
		ObitoFetal,
		CNS,
		CNES,
		CodigoUnidade,
		NumSISPreNatal,
		NumNascVivo,
		NumAltas,
		NumTransferencias,
		NumObitos,
		LocalAdicionarProcedimento,
		IdNefro)
	VALUES
		(@inter_codigo,
		@co_procedimento,
		@quantidade,
		@cbo_codigo,
		@prof_codigo,
		@data_inclusao,
		@IdEquCodigo,
		@CNPJFornecedor,
		@CNPJFabricante,
		@Lote,
		@Serie,
		@NotaFiscal,
		@RegistroANVISA,
		@Competencia,
		@Servico,
		@Classificacao,
		@ObitoFetal,
		@CNS,
		@CNES,
		@CodigoUnidade,
		@NumSISPreNatal,
		@NumNascVivo,
		@NumAltas,
		@NumTransferencias,
		@NumObitos,
		@LocalAdicionarProcedimento,
		@IdNefro)
END

IF @opcao = 2
BEGIN
	DELETE FROM PROCEDIMENTO_INTERNACAO_REAL WHERE INTER_CODIGO=@inter_codigo AND co_procedimento=@co_procedimento
END

if @opcao = 3
begin 
	SELECT inter_codigo, p.co_procedimento, p.NO_PROCEDIMENTO, sum(Quantidade) as Quantidade, 
	GETDATE() as data_inclusao --~Data da inclussão inserida pois aplicação não esta rodando quando era nula
		
	FROM
		PROCEDIMENTO_INTERNACAO_REAL PIR INNER JOIN TB_PROCEDIMENTO P ON (PIR.CO_PROCEDIMENTO=P.CO_PROCEDIMENTO)
		LEFT JOIN TB_OCUPACAO O ON (PIR.CBO_CODIGO=O.CO_OCUPACAO)
		LEFT JOIN PROFISSIONAL_REDE PR ON (PIR.PROF_CODIGO=PR.PROF_CODIGO)
	WHERE
		inter_codigo = @inter_codigo
	and LocalAdicionarProcedimento = 'ADICIONADOPELAEVOLUCAO'

	group by inter_codigo, p.co_procedimento, p.NO_PROCEDIMENTO
end

if @opcao = 4
Begin
	Delete from PROCEDIMENTO_INTERNACAO_REAL where IdNefro = @IdNefro AND inter_codigo=@inter_codigo
end

END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Setor]...';


GO
-- drop PROCEDURE [dbo].[ksp_Setor]    
ALTER PROCEDURE [dbo].[ksp_Setor]    
@opcao SMALLINT, @tp_pesq SMALLINT, @codigo CHAR (4), @descricao VARCHAR (30), @setcli_codigo CHAR (4), @setcli_descricao VARCHAR (30), @divisao CHAR (2), @unidade CHAR (4), @setorAmb CHAR (1)=NULL, @setorAdm CHAR (1)=NULL, @setorAlmox CHAR (1)=NULL, @setorLab CHAR (1)=NULL, @setorInter CHAR (1)=NULL, @setorLeitoInter CHAR (1)=NULL, @setorEmerg CHAR (1)=NULL, @setorSpa CHAR (1)=NULL, @setorSolicitaCirurgia CHAR (1)=NULL, @tipo_censo CHAR (1)=NULL, @procambCod_spa CHAR (10)=null, @grpAtendCod_spa CHAR (3)=  NULL,
 @tpAtendCod_spa CHAR (3)=NULL, @atvProfCod_spa CHAR (3)=NULL, @procambCod_eme CHAR (10)=null, @grpAtendCod_eme CHAR (3)=NULL, @tpAtendCod_eme CHAR (3)=NULL, @atvProfCod_eme CHAR (3)=NULL, @procambCod_chk CHAR (10)=null, @grpAtendCod_chk CHAR (3)=NULL,
  @tpAtendCod_chk CHAR (3)=NULL, @atvProfCod_chk CHAR (3)=NULL, @setcli_usa_autorizacao CHAR (1)=NULL, @setcli_dias_fechamento INT=0, @locatend_codigo CHAR (4)=NULL, @setor_Atualiza_Clinica_Movimentacao CHAR (1)=null, @setor_Padrao_Clinica CHAR (1)=null, 
  @setor_Impede_Fora_Clinica CHAR (1)=null, @procambCod_chk_Sub CHAR (10)=null, @grpAtendCod_chk_Sub CHAR (3)=NULL, @tpAtendCod_chk_Sub CHAR (3)=NULL, @atvProfCod_chk_Sub CHAR (3)=NULL, @procambCod_chk_Extra CHAR (10)=null, @grpAtendCod_chk_Extra CHAR (3)=NULL
, @tpAtendCod_chk_Extra CHAR (3)=NULL, @atvProfCod_chk_Extra CHAR (3)=NULL, @procambCod_chk_Triagem CHAR (10)=null, @grpAtendCod_chk_Triagem CHAR (3)=NULL, @tpAtendCod_chk_Triagem CHAR (3)=NULL, @atvProfCod_chk_Triagem CHAR (3)=NULL, @procambCod_chk_Fichar CHAR (10)=null, @grpAtendCod_chk_Fichar CHAR (3)=NULL, @tpAtendCod_chk_Fichar CHAR (3)=NULL, @atvProfCod_chk_Fichar CHAR (3)=NULL, @procambCod_chk_Retorno CHAR (10)=null, @grpAtendCod_chk_Retorno CHAR (3)=NULL, @tpAtendCod_chk_Retorno CHAR (3)=NULL,
   @atvProfCod_chk_Retorno CHAR (3)=NULL, @setcli_local_emergencia CHAR (1)=null, @setcli_dias_uteis CHAR (1)=null, @setcli_dias_feriados CHAR (1)=null, @codproc CHAR (10)=Null, @idade SMALLINT=Null, @Codigo_CBO_EME CHAR (6)=null, @Codigo_CBO_SPA CHAR (6)=null,
 @Codigo_CBO_CHK CHAR (6)=null, @Codigo_CBO_CHK_Sub CHAR (6)=null, @Codigo_CBO_CHK_Extra CHAR (6)=null, @Codigo_CBO_CHK_Triagem CHAR (6)=null, @Codigo_CBO_CHK_Fichar CHAR (6)=null, @Codigo_CBO_CHK_Retorno CHAR (6)=null, @Codigo_Setor_Clinica VARCHAR (3000)=null, 
@Codigo_Setor_CID VARCHAR (3000)=null, @Codigo_Integracao VARCHAR (10)=null, @set_encaminhamento_interno CHAR (1)='N', @setcli_operacional CHAR (1)=null, @procambCod_risco_pressao CHAR (10)=NULL, @grpAtendCod_risco_pressao CHAR (3)=NULL, @tpAtendCod_risco_pressao CHAR (3)=NULL,
 @atvProfCod_risco_pressao CHAR (3)=NULL, @Codigo_CBO_risco_pressao CHAR (6)=NULL, @procambCod_risco_glicemia CHAR (10)=NULL, @grpAtendCod_risco_glicemia CHAR (3)=NULL, @tpAtendCod_risco_glicemia CHAR (3)=NULL, @atvProfCod_risco_glicemia CHAR (3)=NULL, 
@Codigo_CBO_risco_glicemia CHAR (6)=NULL, @procambCod_risco_consulta CHAR (10)=NULL, @grpAtendCod_risco_consulta CHAR (3)=NULL, @tpAtendCod_risco_consulta CHAR (3)=NULL, @atvProfCod_risco_consulta CHAR (3)=NULL, @Codigo_CBO_risco_consulta CHAR (6)=NULL, 
@procamb_codigo_inalacao char(10) = null, @cbo_codigo_inalacao char(6) = null, @procamb_codigo_administracao_medicamento char(10) = null, @cbo_codigo_administracao_medicamento char(6) = null, @procamb_codigo_evolucao_urg_emer char(10) = null,
 @cbo_codigo_evolucao_urg_emer char(6) = null, @procamb_codigo_evolucao_internacao char(10) = null, @cbo_codigo_evolucao_internacao char(6) = null    
 ,@procamb_codigo_consulta_enfermagem char(10) = null , @cbo_codigo_consulta_enfermagem  char(6) = null ,@procamb_codigo_consulta_multiprofissional char(10) = null , @cbo_codigo_consulta_multiprofissional  char(6) = null
AS    
set nocount on    
 Declare @sql Varchar(8000)    
 Declare @par varchar(255)    
 Declare @var1 varchar(255)    
    
 declare @local char(4)    
 DECLARE @ERROR NUMERIC(6)    
 SET @ERROR = 0    
    
 declare @id_setor_clinica char(4)    
 DECLARE @S1 VARCHAR(100)    
 DECLARE @S2 VARCHAR(100)    
 DECLARE @ARRAY1 VARCHAR(3000)    
 DECLARE @ARRAY2 VARCHAR(3000)    
 DECLARE @DELIMITADOR CHAR(1)    
    
 SELECT @DELIMITADOR = '^'    
    
----------------------------- Selecao para Carga dos Dados ------------------------------------    
if @opcao = 0 --PESQUISA SETOR    
  begin    
 set @Sql = 'SELECT s.set_codigo, s.set_descricao, s.div_codigo, s.set_data, d.div_descricao '    
 set @Sql = @Sql + 'From Setor S, Divisao D '    
 set @Sql = @Sql + ' Where s.div_codigo *= d.div_codigo And '    
    
 if @codigo is not null    
    begin    
     Set @var1 = convert(varchar,@codigo)    
     Exec ksp_ParametroPesquisa @var1,'s.set_codigo',@tp_pesq, 't', @par output    
    end    
    
 if @descricao is not null    
    begin    
     Set @var1 = @descricao    
     Exec ksp_ParametroPesquisa @var1,'s.set_descricao',@tp_pesq, 't', @par output    
    end    
    
 if @setcli_descricao is not null  --APROVEITA PARA DIVISAO    
    begin    
     Set @var1 = @setcli_descricao    
     Exec ksp_ParametroPesquisa @var1,'D.div_descricao',@tp_pesq, 't', @par output    
    end    
    
 Set @Sql = @Sql + @par + ' Order by s.set_descricao '     
    
 exec(@Sql)    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
   end    
if @opcao = 1 --Inclui SETOR    
  begin    
     
 EXEC ksp_controle_sequencial @unidade, 'setor', null, 1, 4, null, @codigo output    
    
 insert into Setor ( set_codigo,     
    set_descricao,    
    div_codigo,    
    set_data)     
    
  values ( @codigo,     
    @descricao,    
    @divisao,    
    GETDATE())     
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
 select @codigo    
    
  END    
if @opcao = 2 --Altera SETOR    
  begin    
 update  setor     
 set  set_descricao  = @descricao,    
  div_codigo = @divisao    
 where set_codigo  = @codigo    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
 update  local_atendimento    
 set  div_codigo  = @divisao    
 where set_codigo  = @codigo    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
  END    
if @opcao = 3 --Exclui SETOR    
  begin    
    
 delete  from local_atendimento where set_codigo = @codigo    
  and unid_codigo = @unidade    
    
 delete  from setor where set_codigo = @codigo    
    
    
  END    
    
if @opcao = 4 --PESQUISA SETOR_CLINICA    
  begin    
 set @Sql = 'SELECT sc.setcli_operacional,sc.setcli_codigo_local, s.set_data, sc.setcli_descricao, l.div_codigo, d.div_descricao, l.unid_codigo, '+    
 'u.unid_descricao,l.locatend_codigo, l.set_codigo set_codigo, s.set_descricao set_descricao, sc.set_ambulatorio,sc.set_administrativo,sc.set_almoxarifado, '+    
 'sc.set_laboratorio,sc.set_internacao,sc.set_emergencia,sc.set_spa, sc.set_tipo_censo, sc.set_solicita_cirurgia, ' +     
 'sc.procamb_codigo_eme, p_eme.NO_PROCEDIMENTO procamb_descricao_eme, ' +    
 'sc.procamb_codigo_spa, p_spa.NO_PROCEDIMENTO procamb_descricao_spa, ' +    
 'sc.procamb_codigo_chk, p_chk.NO_PROCEDIMENTO procamb_descricao_chk, ' +    
 'sc.set_leitointernacao, sc.setcli_usa_autorizacao, sc.setcli_dias_fechamento, ' +    
 'sc.set_atualiza_clinica_movimentacao, sc.set_padrao_clinica, sc.set_impede_fora_clinica, ' +    
 'sc.procamb_codigo_chk_Sub, p_chk_Sub.NO_PROCEDIMENTO procamb_descricao_chk_Sub, ' +    
 'sc.procamb_codigo_chk_Extra, p_chk_Extra.NO_PROCEDIMENTO procamb_descricao_chk_Extra, ' +    
 'sc.procamb_codigo_chk_Triagem, p_chk_Triagem.NO_PROCEDIMENTO procamb_descricao_chk_Triagem, ' +    
 'sc.procamb_codigo_chk_Fichar, p_chk_Fichar.NO_PROCEDIMENTO procamb_descricao_chk_Fichar, ' +    
 'sc.procamb_codigo_chk_Retorno, p_chk_Retorno.NO_PROCEDIMENTO procamb_descricao_chk_Retorno, ' +    
 'sc.setcli_local_emergencia, sc.setcli_dias_uteis, sc.setcli_dias_feriados, ' +    
 'cbo_codigo_EME, sus_cbo_eme.no_ocupacao sus_descricao_eme, ' +    
 'cbo_codigo_SPA, sus_cbo_spa.no_ocupacao sus_descricao_spa, ' +    
 'cbo_codigo_CHK, sus_cbo_chk.no_ocupacao sus_descricao_chk, ' +    
 'cbo_codigo_CHK_Sub, sus_cbo_chk_Sub.no_ocupacao sus_descricao_chk_Sub, ' +    
 'cbo_codigo_CHK_Extra, sus_cbo_chk_Extra.no_ocupacao sus_descricao_chk_Extra, ' +    
 'cbo_codigo_CHK_Triagem, sus_cbo_chk_Triagem.no_ocupacao sus_descricao_chk_Triagem, ' +    
 'cbo_codigo_CHK_Fichar, sus_cbo_chk_Fichar.no_ocupacao sus_descricao_chk_Fichar, ' +    
 'cbo_codigo_CHK_Retorno, sus_cbo_chk_Retorno.no_ocupacao sus_descricao_chk_Retorno, ' +    
 'sc.Codigo_Integracao, sc.setcli_data, sc.set_encaminhamento_interno, ' +    
 'sc.procamb_codigo_RISCO_Pressao, p_risco_pressao.NO_PROCEDIMENTO procamb_descricao_risco_pressao, ' +    
 'sc.cbo_codigo_RISCO_Pressao, sus_cbo_risco_pressao.no_ocupacao sus_descricao_RISCO_Pressao, ' +     
 'sc.procamb_codigo_RISCO_Glicemia, p_risco_glicemia.NO_PROCEDIMENTO procamb_descricao_risco_Glicemia, ' +    
 'sc.cbo_codigo_RISCO_glicemia, sus_cbo_risco_glicemia.no_ocupacao sus_descricao_RISCO_Glicemia, ' +     
 'sc.procamb_codigo_RISCO_Consulta, p_risco_consulta.NO_PROCEDIMENTO procamb_descricao_risco_Consulta, ' +    
 'sc.cbo_codigo_RISCO_Consulta, sus_cbo_risco_consulta.no_ocupacao sus_descricao_RISCO_Consulta, ' +    
 'sc.procamb_codigo_inalacao, p_inalacao.NO_PROCEDIMENTO procamb_desc_inalacao,' +    
 'sc.cbo_codigo_inalacao, sus_cbo_inalacao.no_ocupacao cbo_desc_inalacao, ' +    
 'sc.procamb_codigo_administracao_medicamento, p_adm_medicamento.NO_PROCEDIMENTO procamb_desc_adm_medicamento,' +    
 'sc.cbo_codigo_administracao_medicamento, sus_cbo_administracao_medicamento.no_ocupacao cbo_desc_adm_medicamento,  ' +    
 'sc.procamb_codigo_evolucao_urg_emer, p_evolucao_urg_emer.NO_PROCEDIMENTO procamb_desc_evolucao_urg_emer,' +    
 'sc.cbo_codigo_evolucao_urg_emer, sus_cbo_evolucao_Ugr_Emer.no_ocupacao cbo_desc_evolucao_urg_emer,  ' +    
   
 'sc.procamb_codigo_evolucao_internacao, p_evolucao_internacao.NO_PROCEDIMENTO procamb_desc_evolucao_internacao,' +    
 'sc.cbo_codigo_evolucao_internacao, sus_cbo_evolucao_internacao.no_ocupacao cbo_desc_evolucao_internacao,  ' +    
  
 'sc.procamb_codigo_consulta_enfermagem, p_consulta_enfermagem.NO_PROCEDIMENTO procamb_desc_consulta_enfermagem, ' +    
 'sc.cbo_codigo_consulta_enfermagem, sus_cbo_consulta_enfermagem.no_ocupacao sus_desc_consulta_enfermagem, ' +     

  'sc.procamb_codigo_consulta_multiprofissional, p_consulta_multiprofissional.NO_PROCEDIMENTO procamb_desc_consulta_multiprofissional, ' +    
 'sc.cbo_codigo_consulta_multiprofissional, sus_cbo_consulta_multiprofissional.no_ocupacao sus_desc_consulta_multiprofissional ' +     
    
  
    'FROM setor s ' +    
    'JOIN local_atendimento l ' +    
    '  ON s.set_codigo = l.set_codigo ' +    
    'JOIN divisao d ' +    
    '  ON l.div_codigo = d.div_codigo ' +    
    'JOIN unidade u ' +    
    '  ON l.unid_codigo = u.unid_codigo ' +    
    'JOIN setor_clinica sc ' +    
    '  ON l.setcli_codigo = sc.setcli_codigo ' +    
    'LEFT JOIN tb_procedimento p_eme ' +    
    '  ON sc.procamb_codigo_eme = p_eme.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_spa ' +    
    '  ON sc.procamb_codigo_spa = p_spa.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_chk ' +    
    '  ON sc.procamb_codigo_chk = p_chk.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_chk_Sub ' +    
    '  ON sc.procamb_codigo_chk_Sub = p_chk_Sub.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_chk_Extra ' +    
    '  ON sc.procamb_codigo_chk_Extra = p_chk_Extra.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_chk_Triagem ' +    
    '  ON sc.procamb_codigo_chk_Triagem = p_chk_Triagem.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_chk_Fichar ' +    
    '  ON sc.procamb_codigo_chk_Fichar = p_chk_Fichar.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_chk_Retorno ' +    
    '  ON sc.procamb_codigo_chk_Retorno = p_chk_Retorno.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_risco_pressao ' +    
    '  ON sc.procamb_codigo_risco_pressao = p_risco_pressao.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_risco_glicemia ' +    
    '  ON sc.procamb_codigo_risco_glicemia = p_risco_glicemia.CO_PROCEDIMENTO ' +    
    'LEFT JOIN tb_procedimento p_risco_consulta ' +    
    '  ON sc.procamb_codigo_risco_consulta = p_risco_consulta.CO_PROCEDIMENTO ' +    
 'LEFT JOIN tb_procedimento p_inalacao ' +    
    '  ON sc.procamb_codigo_inalacao = p_inalacao.CO_PROCEDIMENTO ' +    
 'LEFT JOIN tb_procedimento p_adm_medicamento ' +    
    '  ON sc.procamb_codigo_administracao_medicamento = p_adm_medicamento.CO_PROCEDIMENTO ' +    
 'LEFT JOIN tb_procedimento p_evolucao_urg_emer ' +    
    '  ON sc.procamb_codigo_evolucao_urg_emer = p_evolucao_urg_emer.CO_PROCEDIMENTO ' +    
 'LEFT JOIN tb_procedimento p_evolucao_internacao ' +    
    '  ON sc.procamb_codigo_evolucao_internacao = p_evolucao_internacao.CO_PROCEDIMENTO ' +    
 'LEFT JOIN tb_procedimento p_consulta_enfermagem ' +    
    '  ON sc.procamb_codigo_consulta_enfermagem = p_consulta_enfermagem.CO_PROCEDIMENTO ' +    

	 'LEFT JOIN tb_procedimento p_consulta_multiprofissional ' +    
    '  ON sc.procamb_codigo_consulta_multiprofissional = p_consulta_multiprofissional.CO_PROCEDIMENTO ' +    
    
    'LEFT JOIN tb_ocupacao sus_cbo_eme ' +    
    '  ON sc.cbo_codigo_EME = sus_cbo_eme.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_spa ' +    
    '  ON sc.cbo_codigo_SPA = sus_cbo_spa.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_chk ' +    
    '  ON sc.cbo_codigo_CHK = sus_cbo_chk.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_chk_Sub ' +    
    '  ON sc.cbo_codigo_CHK_Sub = sus_cbo_chk_Sub.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_chk_Extra ' +    
    '  ON sc.cbo_codigo_CHK_Extra = sus_cbo_chk_Extra.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_chk_Triagem ' +    
    '  ON sc.cbo_codigo_CHK_Triagem = sus_cbo_chk_Triagem.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_chk_Fichar ' +    
    '  ON sc.cbo_codigo_CHK_Fichar = sus_cbo_chk_Fichar.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_chk_Retorno ' +    
    '  ON sc.cbo_codigo_CHK_Retorno = sus_cbo_chk_Retorno.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_risco_pressao ' +    
    '  ON sc.cbo_codigo_risco_pressao = sus_cbo_risco_pressao.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_risco_glicemia ' +    
    '  ON sc.cbo_codigo_risco_glicemia = sus_cbo_risco_glicemia.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_risco_consulta ' +    
    '  ON sc.cbo_codigo_risco_consulta = sus_cbo_risco_consulta.co_ocupacao ' +       
 'LEFT JOIN tb_ocupacao sus_cbo_inalacao ' +    
    '  ON sc.cbo_codigo_inalacao = sus_cbo_inalacao.co_ocupacao ' +    
    'LEFT JOIN tb_ocupacao sus_cbo_administracao_medicamento ' +    
    '  ON sc.cbo_codigo_administracao_medicamento = sus_cbo_administracao_medicamento.co_ocupacao ' +      
 'LEFT JOIN tb_ocupacao sus_cbo_evolucao_Ugr_Emer ' +    
    '  ON sc.cbo_codigo_evolucao_urg_emer = sus_cbo_evolucao_Ugr_Emer.co_ocupacao ' +      
 'LEFT JOIN tb_ocupacao sus_cbo_evolucao_internacao ' +    
    '  ON sc.cbo_codigo_evolucao_internacao = sus_cbo_evolucao_internacao.co_ocupacao ' +      
  
  'LEFT JOIN tb_ocupacao sus_cbo_consulta_enfermagem ' +    
    '  ON sc.cbo_codigo_consulta_enfermagem = sus_cbo_consulta_enfermagem.co_ocupacao ' +      
            
	'LEFT JOIN tb_ocupacao sus_cbo_consulta_multiprofissional ' +    
    '  ON sc.cbo_codigo_consulta_multiprofissional = sus_cbo_consulta_multiprofissional.co_ocupacao ' +      
  
  
    'WHERE l.enf_codigo is null ' +    
 'AND u.unid_codigo = ''' + @unidade + ''''    
    
    
 set @par = ' '     
    
 if @setcli_codigo is not null    
    begin    
     Set @var1 = convert(varchar,@setcli_codigo)    
     Exec ksp_ParametroPesquisa @var1, 'sc.setcli_codigo_local', @tp_pesq, 't', @par output    
     Set @Sql = @Sql + ' and ' + @par    
    end    
     
 set @par = ' '     
    
 if @setcli_descricao is not null    
    begin    
     Set @var1 = @setcli_descricao    
     Exec ksp_ParametroPesquisa @var1,'sc.setcli_descricao', @tp_pesq, 't', @par output    
     Set @Sql = @Sql + ' and ' + @par    
    end    
    
 set @par = ' '    
        
 if @locatend_codigo is not null    
    begin    
     Set @var1 = @locatend_codigo    
     Exec ksp_ParametroPesquisa @var1,'l.locatend_codigo', @tp_pesq, 't', @par output    
     Set @Sql = @Sql + ' and ' + @par    
    end    
    
    
 Set @Sql = @Sql + ' Order by sc.setcli_descricao '     
     
 exec(@Sql)    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
   end    
    
-------------------- Inclusao dos Dados ---------------------------------------    
If @opcao = 5    
   BEGIN    
    
 select @divisao = div_codigo from setor where set_codigo = @codigo    
    
 --verifica a UNIDADE     
 IF NOT EXISTS (select 1 from local_atendimento where unid_codigo = @unidade and div_codigo is null)    
 begin    
  -- Inclui Local_Atendimento, referente à UNIDADE    
  EXEC ksp_controle_sequencial @unidade, 'local_atendimento', null, 1, 4, null, @local output    
  INSERT INTO Local_Atendimento     
   (Locatend_codigo,unid_codigo)    
  VALUES              
   (@local ,@unidade)    
    
  IF @@ERROR <> 0 SET @ERROR = @@ERROR    
 end    
    
 --verifica a DIVISAO    
 IF NOT EXISTS ( select 1 from local_atendimento     
   where  unid_codigo = @unidade     
   and  div_codigo = @divisao    
   and  set_codigo is null)    
 begin    
  -- Inclui Local_Atendimento, referente à DIVISAO    
  EXEC ksp_controle_sequencial @unidade, 'local_atendimento', null, 1, 4, null, @local output    
  INSERT INTO Local_Atendimento     
   (Locatend_codigo,unid_codigo,div_codigo)    
  VALUES              
   (@local ,@unidade,@divisao)    
  IF @@ERROR <> 0 SET @ERROR = @@ERROR    
 end    
    
 --verifica o SETOR    
 IF NOT EXISTS ( select 1 from local_atendimento     
   where  unid_codigo = @unidade     
   and  div_codigo = @divisao    
   and  set_codigo = @codigo    
   and  setcli_codigo is null)    
 begin    
  -- Inclui Local_Atendimento, referente à SETOR    
  EXEC ksp_controle_sequencial @unidade, 'local_atendimento', null, 1, 4, null, @local output    
  INSERT INTO Local_Atendimento     
   (Locatend_codigo,unid_codigo,div_codigo,set_codigo)    
  VALUES              
   (@local ,@unidade,@divisao,@codigo)    
  IF @@ERROR <> 0 SET @ERROR = @@ERROR    
 end    
    
    
 EXEC ksp_controle_sequencial @unidade, 'Setor_clinica', null, 1, 4, null, @local output    
    
    
 if @setcli_codigo is null    
 begin    
  select  @setcli_codigo = max(sc.setcli_codigo_local)     
     from setor_clinica sc inner join local_atendimento la    
     on la.setcli_codigo = sc.setcli_codigo    
     and la.enf_codigo is null and isnumeric(sc.setcli_codigo_local) = 1    
     and la.unid_codigo = @unidade    
    
  if @setcli_codigo is null    
     begin    
   set @setcli_codigo = '0001'    
     end    
  else    
  begin    
   set @setcli_codigo = right('0000' + rtrim(convert(varchar, convert(int, @setcli_codigo) + 1 )),4)    
  end    
     
      
 end    
    
    
 INSERT INTO Setor_clinica    
  (setcli_codigo, setcli_codigo_local,Setcli_descricao,     
  procamb_Codigo_eme, grpAtend_Codigo_eme, tpAtend_Codigo_eme,     
        procamb_Codigo_spa, grpAtend_Codigo_spa, tpAtend_Codigo_spa,     
        procamb_Codigo_chk, grpAtend_Codigo_chk, tpAtend_Codigo_chk,     
  procamb_Codigo_chk_Sub, grpAtend_Codigo_chk_Sub, tpAtend_Codigo_chk_Sub,     
  procamb_Codigo_chk_Extra, grpAtend_Codigo_chk_Extra, tpAtend_Codigo_chk_Extra,     
  procamb_Codigo_chk_Triagem, grpAtend_Codigo_chk_Triagem, tpAtend_Codigo_chk_Triagem,     
  procamb_Codigo_chk_Fichar, grpAtend_Codigo_chk_Fichar, tpAtend_Codigo_chk_Fichar,     
  procamb_Codigo_chk_Retorno, grpAtend_Codigo_chk_Retorno, tpAtend_Codigo_chk_Retorno,     
  set_ambulatorio, set_administrativo, set_almoxarifado,    
  set_laboratorio, set_internacao, set_LeitoInternacao, set_emergencia,    
  set_spa, set_solicita_cirurgia, set_tipo_censo, setcli_usa_autorizacao, setcli_dias_fechamento,      
        set_atualiza_clinica_movimentacao, set_padrao_clinica, set_impede_fora_clinica, setcli_local_emergencia,    
        setcli_dias_uteis, setcli_dias_feriados,    
        atvProf_Codigo_eme, atvProf_Codigo_spa, atvProf_Codigo_chk, atvProf_Codigo_chk_Sub, atvProf_Codigo_chk_Extra,    
        atvProf_Codigo_chk_Triagem, atvProf_Codigo_chk_Fichar, atvProf_Codigo_chk_Retorno,    
        cbo_codigo_EME, cbo_codigo_SPA, cbo_codigo_CHK, cbo_codigo_CHK_Sub, cbo_codigo_CHK_Extra,    
        cbo_codigo_CHK_Triagem, cbo_codigo_CHK_Fichar, cbo_codigo_CHK_Retorno, Codigo_Integracao,    
        set_encaminhamento_interno, setcli_data, setcli_operacional,    
        procamb_codigo_RISCO_Pressao, grpatend_codigo_RISCO_Pressao, atvprof_codigo_RISCO_Pressao, tpatend_codigo_RISCO_Pressao, cbo_codigo_RISCO_Pressao,    
  procamb_codigo_RISCO_Glicemia, grpatend_codigo_RISCO_Glicemia, atvprof_codigo_RISCO_Glicemia, tpatend_codigo_RISCO_Glicemia, cbo_codigo_RISCO_Glicemia,    
  procamb_codigo_RISCO_Consulta, grpatend_codigo_RISCO_Consulta, atvprof_codigo_RISCO_Consulta, tpatend_codigo_RISCO_Consulta, cbo_codigo_RISCO_Consulta,    
  procamb_codigo_inalacao, cbo_codigo_inalacao, procamb_codigo_administracao_medicamento, cbo_codigo_administracao_medicamento,    
  procamb_codigo_evolucao_urg_emer, cbo_codigo_evolucao_urg_emer, procamb_codigo_evolucao_internacao, cbo_codigo_evolucao_internacao,  
  procamb_codigo_consulta_enfermagem, cbo_codigo_consulta_enfermagem  
        )    
    
 VALUES       
  (@local, @setcli_codigo,@setcli_descricao,     
  @procambCod_eme, @grpAtendCod_eme, @tpAtendCod_eme,     
  @procambCod_spa, @grpAtendCod_spa, @tpAtendCod_spa,     
  @procambCod_chk, @grpAtendCod_chk, @tpAtendCod_chk,     
     @procambCod_chk_Sub, @grpAtendCod_chk_Sub, @tpAtendCod_chk_Sub,     
  @procambCod_chk_Extra, @grpAtendCod_chk_Extra, @tpAtendCod_chk_Extra,     
  @procambCod_chk_Triagem, @grpAtendCod_chk_Triagem, @tpAtendCod_chk_Triagem,     
  @procambCod_chk_Fichar, @grpAtendCod_chk_Fichar, @tpAtendCod_chk_Fichar,     
  @procambCod_chk_Retorno, @grpAtendCod_chk_Retorno, @tpAtendCod_chk_Retorno,     
  @setorAmb, @setorAdm, @setorAlmox,    
  @setorLab, @setorInter, @setorLeitoInter, @setorEmerg,    
  @setorSpa, @setorSolicitaCirurgia, @tipo_censo, @setcli_usa_autorizacao, @setcli_dias_fechamento,    
     @setor_Atualiza_Clinica_Movimentacao, @setor_Padrao_Clinica, @setor_Impede_Fora_Clinica, @setcli_local_emergencia,    
        @setcli_dias_uteis, @setcli_dias_feriados,    
        @atvProfCod_eme, @atvProfCod_spa, @atvProfCod_chk, @atvProfCod_chk_Sub, @atvProfCod_chk_Extra,     
        @atvProfCod_chk_Triagem, @atvProfCod_chk_Fichar, @atvProfCod_chk_Retorno,    
        @Codigo_CBO_EME, @Codigo_CBO_SPA, @Codigo_CBO_CHK, @Codigo_CBO_CHK_Sub, @Codigo_CBO_CHK_Extra,     
        @Codigo_CBO_CHK_Triagem, @Codigo_CBO_CHK_Fichar, @Codigo_CBO_CHK_Retorno,@Codigo_Integracao,    
        @set_encaminhamento_interno, GETDATE(), @setcli_operacional    
        ,@procambCod_risco_pressao, @grpAtendCod_risco_pressao, @tpAtendCod_risco_pressao, @atvProfCod_risco_pressao, @Codigo_CBO_risco_pressao    
  ,@procambCod_risco_glicemia, @grpAtendCod_risco_glicemia, @tpAtendCod_risco_glicemia, @atvProfCod_risco_glicemia, @Codigo_CBO_risco_glicemia    
  ,@procambCod_risco_consulta, @grpAtendCod_risco_consulta, @tpAtendCod_risco_consulta, @atvProfCod_risco_consulta, @Codigo_CBO_risco_consulta,    
  @procamb_codigo_inalacao, @cbo_codigo_inalacao, @procamb_codigo_administracao_medicamento, @cbo_codigo_administracao_medicamento,    
  @procamb_codigo_evolucao_urg_emer, @cbo_codigo_evolucao_urg_emer, @procamb_codigo_evolucao_internacao, @cbo_codigo_evolucao_internacao  ,  
  @procamb_codigo_consulta_enfermagem, @cbo_codigo_consulta_enfermagem  )    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
    declare @codigo_local char(4)     
    
    set @codigo_local = @setcli_codigo     
    
 SET @setcli_codigo = @LOCAL    
    
 EXEC ksp_controle_sequencial @unidade, 'local_atendimento', null, 1, 4, null, @local output    
    
 -- Insere na tabela Local_Atendimento    
 INSERT INTO Local_Atendimento     
  (Locatend_codigo,unid_codigo,div_codigo,set_codigo,setcli_codigo)    
 VALUES              
  (@local ,@unidade,@divisao,@codigo,@setcli_codigo)    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
 Select @codigo_local      
   END    
    
-------------------- Alteracao dos Dados ---------------------------------------    
if @opcao = 6    
   BEGIN    
    
    
 select @id_setor_clinica = sc.setcli_codigo     
  from  setor_clinica  sc, local_atendimento la    
  where sc.setcli_codigo = la.setcli_codigo     
  and sc.setcli_codigo_local = @setcli_codigo    
  and la.unid_codigo = @unidade    
    
    
 UPDATE Local_Atendimento SET      
  set_codigo    = @codigo,    
  div_codigo     = (select div_codigo from setor where set_codigo = @codigo)    
 WHERE   Setcli_codigo    = @id_setor_clinica    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
 UPDATE Setor_Clinica SET    
  Setcli_descricao  = @setcli_descricao,    
    
  set_ambulatorio    = isnull(@setorAmb,'N'),    
  set_administrativo = isnull(@setorAdm,'N'),    
  set_almoxarifado   = isnull(@setorAlmox,'N'),    
  set_laboratorio    = isnull(@setorLab,'N'),    
  set_internacao     = isnull(@setorInter,'N'),    
  set_LeitoInternacao = isnull(@setorLeitoInter,'N'),    
  set_emergencia     = isnull(@setorEmerg,'N'),    
  set_spa            = isnull(@setorSpa,'N'),    
  set_solicita_cirurgia = isnull(@setorSolicitaCirurgia,'N'),    
  set_tipo_censo     = @tipo_censo,    
    
  procamb_Codigo_eme = @procambCod_eme,    
  procamb_Codigo_spa = @procambCod_spa,    
  procamb_Codigo_chk = @procambCod_chk,    
  procamb_Codigo_chk_Sub = @procambCod_chk_Sub,    
  procamb_Codigo_chk_Extra = @procambCod_chk_Extra,    
  procamb_Codigo_chk_Triagem = @procambCod_chk_Triagem,    
  procamb_Codigo_chk_Fichar = @procambCod_chk_Fichar,    
  procamb_Codigo_chk_Retorno = @procambCod_chk_Retorno,    
      
  setcli_usa_autorizacao = @setcli_usa_autorizacao,    
  setcli_dias_fechamento = @setcli_dias_fechamento,    
    set_atualiza_clinica_movimentacao = @setor_Atualiza_Clinica_Movimentacao,    
  set_padrao_clinica = @setor_Padrao_Clinica,     
  set_impede_fora_clinica = @setor_Impede_Fora_Clinica,    
  setcli_local_emergencia = @setcli_local_emergencia,     
  setcli_dias_uteis = @setcli_dias_uteis,    
  setcli_dias_feriados = @setcli_dias_feriados,    
    
         cbo_codigo_EME = @Codigo_CBO_EME,    
         cbo_codigo_SPA = @Codigo_CBO_SPA,    
         cbo_codigo_CHK = @Codigo_CBO_CHK,    
         cbo_codigo_CHK_Sub = @Codigo_CBO_CHK_Sub,    
         cbo_codigo_CHK_Extra = @Codigo_CBO_CHK_Extra,    
         cbo_codigo_CHK_Triagem = @Codigo_CBO_CHK_Triagem,    
         cbo_codigo_CHK_Fichar = @Codigo_CBO_CHK_Fichar,    
         cbo_codigo_CHK_Retorno = @Codigo_CBO_CHK_Retorno,    
    
  Codigo_Integracao      = @Codigo_Integracao,    
  set_encaminhamento_interno = @set_encaminhamento_interno,    
  setcli_operacional = @setcli_operacional,      
  procamb_codigo_RISCO_Pressao = @procambCod_risco_pressao,     
  cbo_codigo_RISCO_Pressao = @Codigo_CBO_risco_pressao,      
  procamb_codigo_RISCO_Glicemia = @procambCod_risco_glicemia,    
  cbo_codigo_RISCO_Glicemia = @Codigo_CBO_risco_glicemia,    
  procamb_codigo_RISCO_Consulta = @procambCod_risco_consulta,    
  cbo_codigo_RISCO_Consulta = @Codigo_CBO_risco_consulta,    
  procamb_codigo_inalacao = @procamb_codigo_inalacao,     
  cbo_codigo_inalacao = @cbo_codigo_inalacao,     
  procamb_codigo_administracao_medicamento = @procamb_codigo_administracao_medicamento,     
  cbo_codigo_administracao_medicamento = @cbo_codigo_administracao_medicamento,    
  procamb_codigo_evolucao_urg_emer = @procamb_codigo_evolucao_urg_emer,    
  cbo_codigo_evolucao_urg_emer = @cbo_codigo_evolucao_urg_emer,    
  procamb_codigo_evolucao_internacao = @procamb_codigo_evolucao_internacao,    
  cbo_codigo_evolucao_internacao = @cbo_codigo_evolucao_internacao,  
  procamb_codigo_consulta_enfermagem = @procamb_codigo_consulta_enfermagem,  
  cbo_codigo_consulta_enfermagem  = @cbo_codigo_consulta_enfermagem ,

   procamb_codigo_consulta_multiprofissional = @procamb_codigo_consulta_multiprofissional,  
  cbo_codigo_consulta_multiprofissional  = @cbo_codigo_consulta_multiprofissional    
    
 WHERE   Setcli_codigo      = @id_setor_clinica    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
   END    
    
--------------------- Exclusao dos Dados ---------------------------------------    
If @opcao = 7    
   BEGIN      
 DECLARE @locatend_codigo_cid CHAR(4)    
    
 select @id_setor_clinica = sc.setcli_codigo     
  from  setor_clinica  sc, local_atendimento la    
  where sc.setcli_codigo = la.setcli_codigo     
  and sc.setcli_codigo_local = @setcli_codigo    
  and la.unid_codigo = @unidade    
    
 select @locatend_codigo_cid=locatend_codigo     
 from vwlocal_unidade     
 where unid_codigo=@unidade AND SET_CODIGO=@setcli_codigo    
    
 DELETE FROM local_atendimento    
 WHERE   Setcli_codigo      = @id_setor_clinica    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
 DELETE FROM setor_clinica    
 WHERE   Setcli_codigo      = @id_setor_clinica    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
 DELETE FROM Setor_Clinica_Cid     
 WHERE   locatend_codigo      = @locatend_codigo_cid    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
   END    
    
-------------------------------------------------------------------------------------------    
if @opcao = 8    
   BEGIN    
 SELECT  PROCAMB_DESCRICAO     
  FROM PROCEDIMENTO_AMBULATORIAL      
  WHERE PROCAMB_CODIGO = @procambCod_SPA    
   END    
    
---Verifica se há referencia de Setor para exclusão ------------------------------------------    
If @Opcao = 9     
   BEGIN    
    
 --Se possui clinica para este setor    
 select * from local_atendimento where set_codigo = @codigo    
 and setcli_codigo is not null     
   end    
    
If @Opcao = 10     
   BEGIN    
    
 select @id_setor_clinica = sc.setcli_codigo     
  from  setor_clinica  sc, local_atendimento la    
  where sc.setcli_codigo = la.setcli_codigo     
  and sc.setcli_codigo_local = @setcli_codigo    
  and la.unid_codigo = @unidade    
    
    
 DECLARE @CONTA INT    
 DECLARE @CMD VARCHAR(1000)    
 DECLARE @TAB VARCHAR(1000)    
 DECLARE @CAM VARCHAR(1000)    
    
 --VERIFICA AS TABELAS QUE POSSUEM O CAMPO....    
 create table #temp (TABELA sysname, CAMPO sysname)    
     
 insert into #temp    
 select  sysobjects.name TABELA ,upper(syscolumns.name) CAMPO    
 from  sysobjects, syscolumns     
 where  upper(syscolumns.name) like '%locatend%'    
 and  sysobjects.id = syscolumns.id     
 and  sysobjects.xtype = 'U'    
 order by sysobjects.name    
    
 --DESCARTA AS TABELAS QUE NAO DEVE VERIFICAR (POIS SERAO DELETADAS OU MANTIDAS)    
 DELETE FROM #TEMP WHERE TABELA = 'enfermaria_historico'    
 DELETE FROM #TEMP WHERE TABELA = 'leito_historico'    
 DELETE FROM #TEMP WHERE TABELA = 'local_atendimento_historico'    
 DELETE FROM #TEMP WHERE TABELA = 'MONITORACAO_LABORATORIO_MLIMA'    
 DELETE FROM #TEMP WHERE TABELA = 'local_atendimento'    
     
 SELECT @CONTA = COUNT(0) FROM #TEMP    
     
 CREATE TABLE ##VALIDA_SETOR ( PODE_DELETAR VARCHAR(100) )    
    
 WHILE @CONTA > 0     
 BEGIN    
    
  SELECT  TOP 1    
   @TAB = TABELA,    
   @CAM = CAMPO    
  FROM #TEMP  ORDER BY TABELA, CAMPO    
  --VERIFICA EM CADA TABELA SE HÁ REGISTROS    
  SET @CMD = 'INSERT INTO ##VALIDA_SETOR SELECT TOP 1 '''  + @TAB + ''' FROM ' + @TAB + ' WHERE ' + @CAM + ' = ''' + @id_setor_clinica  + ''''    
  EXEC (@CMD)    
    
  IF @@ROWCOUNT > 0    
  BEGIN    
   --SE TIVER, NÃO PODE DELETAR    
   SELECT 'NAO PODE'    
   DROP TABLE ##VALIDA_SETOR    
   DROP TABLE #TEMP    
   RETURN    
  END    
    
  DELETE FROM #TEMP WHERE TABELA = @TAB AND CAMPO = @CAM    
  SET @CONTA = @CONTA -1    
 END    
 drop table #temp    
    
 --PODE DELETAR (NÃO HA REFERENCIAS)    
    
 DROP TABLE ##VALIDA_SETOR    
    
    
   END    
---buca Grupo de Atendimento -----------------------------------------------------------------    
if @opcao = 11    
   begin    
 if @grpAtendCod_eme is not null    
 begin    
    select grpatend_codigo, grpatend_descricao from grupo_atendimento where grpatend_codigo= @grpAtendCod_eme    
 end    
   end     
---buca Grupo de Atendimento -----------------------------------------------------------------    
if @opcao = 12    
   begin    
 if @tpAtendCod_eme is not null    
 begin    
    select tpatend_codigo, tpatend_descricao from tipo_atendimento where tpatend_codigo= @tpAtendCod_eme    
 end    
   end     
---buca Grupo de Atendimento -----------------------------------------------------------------    
if @opcao = 13    
   begin    
 if @atvProfCod_eme is not null    
 begin    
    select atvprof_codigo, atvprof_descricao from atividade_profissional     
    where atvprof_codigo= @atvProfCod_eme    
 end    
   end     
---busca SETOR_CLINICA pelo Locatend_codigo (da Local_Atendimento)    
if @opcao = 14    
begin    
 select  s.setCLI_codigo_local, s.setCLI_descricao, l.unid_codigo    
 from  setor_CLINICA s, local_atendimento l    
 where  s.setCLI_codigo = l.setCLI_codigo    
 and l.locatend_codigo = @codigo    
end    
---Valida existência de Leito em um Local de Internação    
if @opcao = 15    
begin    
 select  count(1)    
 from  setor_CLINICA s, local_atendimento l    
 where  s.setCLI_codigo = l.setCLI_codigo    
 and l.enf_codigo is not null    
        and     s.setcli_codigo_local = @setcli_codigo    
 and l.unid_codigo = @unidade    
end    
    
---Carga para a TreeView de Acesso a Agenda    
if @opcao = 16    
begin    
 select   la.locatend_codigo, la.set_descricao, pr.prof_codigo, pr.prof_nome, s.setcli_codigo      
 from   vwlocal_atendimento la, profissional_rede pr, profissional_lotacao pl, setor_clinica s    
 where   la.locatend_codigo = pl.locatend_codigo    
 and   pl.prof_codigo = pr.prof_codigo    
 and  la.set_codigo = s.setcli_codigo      
 and   pl.prof_ativo = 'S'    
 and   pl.prof_permite_agenda = 'S'    
 and   la.unid_codigo = @unidade    
 order by la.set_descricao,pr.prof_nome    
end    
    
-- busca setor_clinica pelo set_encaminha_classificacao_risco    
if @opcao = 17    
  begin    
 SELECT  L.locatend_codigo as locatend_codigo,     
  SC.setCLI_descricao as setcli_descricao    
 FROM  Local_Atendimento L,     
  unidade U,     
  setor_clinica SC    
 WHERE  L.unid_codigo =  U.unid_codigo     
 AND  l.SETCLI_codigo = sc.SETCLI_codigo    
 AND  L.enf_codigo IS NULL        
 AND  (SC.set_encaminha_classificacao_risco = 'S')    
      AND U.unid_codigo = isnull(@unidade, U.unid_codigo )    
      ORDER BY setcli_descricao    
  end    
    
-- verifica se o procedimento pode ser realizado para a idade do paciente selecionado    
    
if @opcao = 18    
begin    
    
 SELECT count(0)    
 FROM tb_procedimento    
 WHERE   co_procedimento = @codproc    
 AND ((vl_idade_minima <= (@idade*12) AND vl_idade_maxima >= (@idade*12)) OR vl_idade_maxima = 9999)     
    
     
    
end    
    
---buca CBO -----------------------------------------------------------------    
if @opcao = 19    
   begin    
 if @Codigo_CBO_EME is not null    
 begin    
    select co_ocupacao as codigo, no_ocupacao as descricao from tb_ocupacao     
    where co_ocupacao= @Codigo_CBO_EME    
 end    
   end     
    
    
---PESQUISA CLINICA-----------------------------------------------------------------    
if @opcao = 20     
  begin    
 SET @Sql = 'select V.locatend_descricao,V.locatend_codigo '      
 SET @Sql = @Sql  +  'from vwlocal_unidade V   '    
 SET @Sql = @Sql  +  'where V.unid_codigo = ''' + @unidade + '''' + ' AND '    
    
 if @codigo is not null    
    begin    
     Set @var1 = convert(varchar,@codigo)    
     Exec ksp_ParametroPesquisa @var1,'V.locatend_codigo',@tp_pesq, 't', @par output    
    end    
    
 if @descricao is not null    
    begin    
     Set @var1 = @descricao    
     Exec ksp_ParametroPesquisa @var1,'V.locatend_descricao',@tp_pesq, 't', @par output    
    end    
    
 Set @Sql = @Sql + @par + ' Order by V.locatend_descricao '     
    
 exec(@Sql)    
     
 IF @@ERROR <> 0 SET @ERROR = @@ERROR     
  end     
---------- Insere na Tabela Setor_Clinica_Cid--------------------------------    
if @opcao = 21    
begin    
    
 SET @S1  = NULL    
 SET @S2  = NULL    
    
 SELECT @ARRAY1   = @Codigo_Setor_Clinica    
 SELECT @ARRAY2   = @Codigo_Setor_CID    
    
 WHILE LEN(@ARRAY1) > 0    
 BEGIN    
  SELECT @S1  = LTRIM(SUBSTRING(@ARRAY1,  1,  CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))    
  SELECT @S2  = LTRIM(SUBSTRING(@ARRAY2,  1,  CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))    
    
  INSERT INTO Setor_Clinica_Cid     
  (     
  Locatend_codigo,    
  Cid_codigo    
  )       
  VALUES     
  (    
  CONVERT(char(4),@S1),    
  CONVERT(char(9),@S2)    
  )    
      
  SELECT @ARRAY1  = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))    
  SELECT @ARRAY2  = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))    
 END    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
END    
    
---------- Altera na Tabela Setor_Clinica_Cid--------------------------------    
if @opcao = 22    
begin    
 DECLARE @ULT_S1 CHAR(4)    
    
 SET @S1     = NULL    
 SET @S2     = NULL    
 SET @ULT_S1 = NULL    
    
 SELECT @ARRAY1   = @Codigo_Setor_Clinica    
 SELECT @ARRAY2   = @Codigo_Setor_CID    
    
 WHILE LEN(@ARRAY1) > 0    
 BEGIN    
  SELECT @S1  = LTRIM(SUBSTRING(@ARRAY1,  1,  CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))    
  SELECT @S2  = LTRIM(SUBSTRING(@ARRAY2,  1,  CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))    
      
  IF (@ULT_S1 <> @S1)    
  BEGIN    
   DELETE FROM Setor_Clinica_Cid     
   WHERE   locatend_codigo  = @S1    
   SET @ULT_S1=@S1    
  END    
    
  INSERT INTO Setor_Clinica_Cid     
  (     
  Locatend_codigo,    
  Cid_codigo    
  )       
  VALUES     
  (    
  CONVERT(char(4),@S1),    
  CONVERT(char(9),@S2)    
  )    
      
  SELECT @ARRAY1  = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))    
  SELECT @ARRAY2  = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))    
 END    
    
 IF @@ERROR <> 0 SET @ERROR = @@ERROR    
    
END    
    
---Lista Setor_Clinica_CID -----------------------------------------------------------------    
if @opcao = 24    
begin    
   select V.locatend_descricao,S.Cid_codigo,S.locatend_codigo     
   from Setor_Clinica_Cid S, vwlocal_unidade V    
   where S.locatend_codigo = V.locatend_codigo and    
  S.Locatend_codigo = @setcli_codigo    
end    
    
    
----Verifica Leito Operacional --------------------------------------------------------------    
    
if @opcao = 25 --PESQUISA SETOR_CLINICA    
BEGIN    
 SELECT *     
    FROM setor s     
  INNER JOIN local_atendimento l  ON s.set_codigo = l.set_codigo     
  INNER JOIN divisao d  ON l.div_codigo = d.div_codigo     
  INNER JOIN unidade u  ON l.unid_codigo = u.unid_codigo     
  INNER JOIN setor_clinica sc ON l.setcli_codigo = sc.setcli_codigo     
  INNER JOIN enfermaria e on (e.enf_codigo = l.enf_codigo)    
    WHERE u.unid_codigo = @unidade    
 AND sc.setcli_codigo_local = @setcli_codigo    
 AND e.enf_operacional = 'S' or l.enf_codigo is null    
END     
IF @opcao = 26 -- RETORNA SETOR CLINICA    
BEGIN    
 select setcli_codigo from local_atendimento where locatend_codigo=@locatend_codigo    
END    
IF @opcao = 27    
BEGIN    
  SELECT distinct sc.setCli_descricao     
  FROM setor s     
   INNER JOIN local_atendimento l  ON s.set_codigo = l.set_codigo     
   INNER JOIN divisao d  ON l.div_codigo = d.div_codigo     
   INNER JOIN unidade u  ON l.unid_codigo = u.unid_codigo     
   INNER JOIN setor_clinica sc ON l.setcli_codigo = sc.setcli_codigo     
  WHERE u.unid_codigo = @unidade    
END    
----------------------------------------------------------------------------------------------    
If (@ERROR <> 0)    
   BEGIN    
 Select @sql = 'ERRO - Tabela de Setor. Opção : ' + convert(varchar,@opcao)    
        RAISERROR(@sql,1,1)    
             
   END    
    
    
  
  
--SELECT * FROM setor_clinica WHERE setCli_descricao LIKE '%AMB%'  
  
--alter table setor_clinica add procamb_codigo char(1)   
  
--alter table setor_clinica add procamb_codigo_consulta_enfermagem char(10) null  
--alter table setor_clinica add cbo_codigo_consulta_enfermagem char(6) null
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_LocalAtendimento_EspecialidadeSER2]...';


GO
ALTER PROCEDURE [dbo].[ksp_LocalAtendimento_EspecialidadeSER2]

@idEspecialidadeSER2 varchar(100) = null,
@descricaoEspecialidadeSER2 varchar(max) = null,
@aliasProvedorSER2 varchar(max) = null,
@locatend_codigo char(4) = null,
@set_codigo char(4) = null,
@set_descricao varchar(100) = null,
@unid_codigo char(4) = null,
@unid_Descricao varchar(100) = null,
@LocAtend_descricao varchar(100) = null,
@opcao INT

AS    

DECLARE @SQL VARCHAR(255)
DECLARE @PAR VARCHAR(255)
DECLARE @VAR1 VARCHAR(255)



----------------------------- SELECAO DOS REGISTROS POR ID------------------------------------
IF @OPCAO = 0

  BEGIN
	
	SELECT 
		LAE.idEspecialidadeSER2,
		LAE.descricaoEspecialidadeSER2,
		LAE.aliasProvedorSER2,
		LAE.locatend_codigo,
		VLA.unid_codigo,
		VLA.unid_Descricao,
		VLA.set_codigo,
		VLA.set_descricao,
		VLA.LocAtend_descricao 
	FROM LocalAtendimento_EspecialidadeSER2 LAE
	LEFT join vwlocal_Atendimento VLA ON LAE.locatend_codigo = VLA.locatend_codigo
	WHERE LAE.idEspecialidadeSER2 = ISNULL(@idEspecialidadeSER2, LAE.idEspecialidadeSER2)
	AND LAE.locatend_codigo = ISNULL(@locatend_codigo, LAE.locatend_codigo)

   END

   
----------------------------- INSERCAO ------------------------------------
IF @opcao = 1   
	BEGIN     
	
	INSERT INTO LocalAtendimento_EspecialidadeSER2 (idEspecialidadeSER2, descricaoEspecialidadeSER2, aliasProvedorSER2, locatend_codigo)
	VALUES (@idEspecialidadeSER2, @descricaoEspecialidadeSER2, @aliasProvedorSER2, @locatend_codigo)			
	    
	END    
 

----------------------------- ATUALIZACAO ------------------------------------
IF @opcao = 2
	BEGIN     
	
		UPDATE LocalAtendimento_EspecialidadeSER2
			SET 
			descricaoEspecialidadeSER2 = @descricaoEspecialidadeSER2, 
			aliasProvedorSER2 = @aliasProvedorSER2, 
			locatend_codigo = @locatend_codigo
		WHERE idEspecialidadeSER2 = @idEspecialidadeSER2
	
	END    
 
 

----------------------------- SELECAO DE TODOS OS REGISTROS ------------------------------------
IF @opcao = 4    
    
  BEGIN     
		select 
			LAE.idEspecialidadeSER2,
			LAE.descricaoEspecialidadeSER2,
			LAE.aliasProvedorSER2,
			LAE.locatend_codigo,
			vla.unid_codigo,
			vla.unid_Descricao,
			vla.set_codigo,
			vla.set_descricao,
			vla.LocAtend_descricao 
		from LocalAtendimento_EspecialidadeSER2 LAE
		inner join vwlocal_Atendimento vla on LAE.locatend_codigo = vla.locatend_codigo
		    
	END    

----------------------------- SELECAO DE TODOS OS LOCAIS DE ATENDIMENTOS DO KLINIKOS DE CARATER AMBULATORIAL (A PARTIR DA VIEW vwLocal_Atendimento) ------------------------------------
IF @opcao = 5    
    
  BEGIN    
    
  select 
	locatend_codigo,
	unid_codigo,
	unid_descricao,
	set_codigo,
	set_descricao,
	LocAtend_descricao 
 from vwLocal_Atendimento
			
    
END    


----------------------------- EXCLUSAO DE TODOS OS REGISTROS ------------------------------------
IF @opcao = 6
    
  BEGIN     
DELETE from LocalAtendimento_EspecialidadeSER2 
			
    
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_UPA_Atendimento_Medico]...';


GO
ALTER PROCEDURE [dbo].[ksp_UPA_Atendimento_Medico]
@atendamb_codigo CHAR (12)=null, @upaatemed_Anamnese VARCHAR (2000)=null, @upaatemed_HipoteseDiagnostica VARCHAR (2000)=null, @upaatemed_ProcedimentoProposto VARCHAR (2000)=null, @upaatemed_Destino VARCHAR (20)=null, @upaatemed_Observacao VARCHAR (2000)=null, @tipsai_codigo INT=null, @upaatemed_DataSaida DATETIME=null, @tipsai_codigoAmbulatorio INT=null, @usu_codigo CHAR (4)=null, @tipsai_codigoEncaminhamento INT=null, @upaatemed_Reavaliacao VARCHAR (2000)=null, @upaatemed_encaminhamentoEixo VARCHAR (2)=null, @prof_codigo_encerramento CHAR (4)=null, @locatend_codigo_encerramento CHAR (4)=null, @upaatemed_TipoLeito CHAR (1)=null, @TP_PESQ SMALLINT=null, @OPCAO SMALLINT, @upaatemed_ExameFisico VARCHAR (2000)=NULL, @upaatemed_resumoalta VARCHAR (2000)=NULL, @upaatemed_condutaorientacao VARCHAR (2000)=NULL, @upaatemed_sugestaoreavaliacao VARCHAR (2000)=NULL, @upaatemed_temporeavaliacao VARCHAR (2000)=NULL

AS
SET NOCOUNT ON    
    
DECLARE @SQL VARCHAR(500)    
     
IF( @OPCAO = 0 )    
 BEGIN    
    
      SELECT  *    
                FROM UPA_Atendimento_Medico    
          
 END    
    
ELSE IF( @OPCAO = 1 )    
 BEGIN     
      SELECT  *    
      FROM  UPA_Atendimento_Medico    
      WHERE     
   atendamb_codigo = @atendamb_codigo      
             
 END    
ELSE IF(@OPCAO = 2)    
 BEGIN     
 declare @unid_codigo char(4)  
 declare @proate_codigo char(4)  
 set @unid_codigo = '00' + substring(@atendamb_codigo, 1,2)  
 select @proate_codigo = unid_modelo_risco from unidade where unid_codigo = @unid_codigo   
  INSERT INTO UPA_Atendimento_Medico     
  (    
  atendamb_codigo,    
  upaatemed_Anamnese,    
  upaatemed_HipoteseDiagnostica,    
  upaatemed_ProcedimentoProposto,    
  upaatemed_Destino,    
  upaatemed_Observacao,    
  tipsai_codigo,    
  upaatemed_DataSaida,    
  tipsai_codigoAmbulatorio,    
  usu_codigo,    
  tipsai_codigoEncaminhamento,    
  upaatemed_Reavaliacao,    
  upaatemed_encaminhamentoEixo,  
  prof_codigo_encerramento,  
  locatend_codigo_encerramento ,  
  upaatemed_TipoLeito,   
  proate_codigo ,
  upaatemed_ExameFisico ,
  upaatemed_resumoalta,
  upaatemed_condutaorientacao,
  upaatemed_sugestaoreavaliacao,
  upaatemed_temporeavaliacao  
  )    
  VALUES     
  (    
  @atendamb_codigo,    
  @upaatemed_Anamnese,    
  @upaatemed_HipoteseDiagnostica,    
  @upaatemed_ProcedimentoProposto,    
  @upaatemed_Destino,    
  @upaatemed_Observacao,    
  @tipsai_codigo,    
  @upaatemed_DataSaida,    
  @tipsai_codigoAmbulatorio,    
  @usu_codigo,    
  @tipsai_codigoEncaminhamento,    
  @upaatemed_Reavaliacao,    
  @upaatemed_encaminhamentoEixo,  
  @prof_codigo_encerramento,  
  @locatend_codigo_encerramento,  
  @upaatemed_TipoLeito,  
  @proate_codigo,
  @upaatemed_ExameFisico,
  @upaatemed_resumoalta,
  @upaatemed_condutaorientacao,
  @upaatemed_sugestaoreavaliacao,
  @upaatemed_temporeavaliacao  
  )      
     IF (@@ERROR <> 0)    
     BEGIN    
      GOTO ERRO     
     END   
  
 update atendimento_clinico  
  set atendamb_encaminhamento = @tipsai_codigo  
 where  atendamb_codigo = @atendamb_codigo   
         
 END    
    
ELSE IF(@OPCAO = 3)    
 BEGIN    
  UPDATE UPA_Atendimento_Medico SET    
   upaatemed_Anamnese = @upaatemed_Anamnese,    
   upaatemed_HipoteseDiagnostica = @upaatemed_HipoteseDiagnostica,    
   upaatemed_ProcedimentoProposto = @upaatemed_ProcedimentoProposto,    
   upaatemed_Destino = @upaatemed_Destino,    
   upaatemed_Observacao = @upaatemed_Observacao,    
   tipsai_codigo = @tipsai_codigo,    
   upaatemed_DataSaida = @upaatemed_DataSaida,    
   tipsai_codigoAmbulatorio = @tipsai_codigoAmbulatorio,    
   usu_codigo = @usu_codigo,    
   tipsai_codigoEncaminhamento = @tipsai_codigoEncaminhamento,    
   upaatemed_Reavaliacao = @upaatemed_Reavaliacao,    
   upaatemed_encaminhamentoEixo = @upaatemed_encaminhamentoEixo,  
   prof_codigo_encerramento = @prof_codigo_encerramento,  
   locatend_codigo_encerramento = @locatend_codigo_encerramento  ,  
   upaatemed_TipoLeito = @upaatemed_TipoLeito ,
   upaatemed_ExameFisico = @upaatemed_ExameFisico,
   upaatemed_resumoalta = @upaatemed_resumoalta,
   upaatemed_condutaorientacao = @upaatemed_condutaorientacao,
   upaatemed_sugestaoreavaliacao = @upaatemed_sugestaoreavaliacao,
   upaatemed_temporeavaliacao = @upaatemed_temporeavaliacao   
      WHERE     
       atendamb_codigo = @atendamb_codigo      
     IF (@@ERROR <> 0)    
     BEGIN    
      GOTO ERRO     
     END    
  
  
 update atendimento_clinico  
  set atendamb_encaminhamento = @tipsai_codigo  
 where  atendamb_codigo = @atendamb_codigo      
     IF (@@ERROR <> 0)    
     BEGIN    
      GOTO ERRO     
     END    
 END    
    
ELSE IF(@OPCAO = 4)    
 BEGIN    
  DELETE FROM UPA_Atendimento_Medico      
  WHERE    
   atendamb_codigo = @atendamb_codigo      
     IF (@@ERROR <> 0)    
     BEGIN    
      GOTO ERRO     
     END    
 END    
    
     
RETURN    
ERRO:    
     SET @SQL = 'ERRO - UPA_Atendimento_Medico. OPÇÃO : ' + CONVERT(VARCHAR,@OPCAO)    
     RAISERROR(@SQL,1,1)    
          
    
SET QUOTED_IDENTIFIER ON    
SET ANSI_NULLS  ON
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_PEP_Exame_Fisico]...';


GO
-- DROP PROCEDURE [dbo].[ksp_PEP_Exame_Fisico]        
ALTER PROCEDURE [dbo].[ksp_PEP_Exame_Fisico]        
@exafis_codigo CHAR (12), @exafis_peso VARCHAR (5), @exafis_altura VARCHAR (5), @atendamb_codigo CHAR (12), @prof_codigo CHAR (4), @locatend_codigo CHAR (4), @unid_codigo CHAR (4),      
@exafis_altura_posicao INT, @exafis_exame_fisico VARCHAR (2000), @exafis_pc VARCHAR (5), @exafis_pt VARCHAR (5), @exafis_circ_cintura VARCHAR (6), @inter_codigo CHAR (12),      
@atenf_codigo UNIQUEIDENTIFIER,@exafis_saturacao DECIMAL,@exafis_hgt int = null  , @tp_pesq SMALLINT=null, @opcao SMALLINT        
AS        
DECLARE @SQL VARCHAR(500)        
         
if( @opcao = 0 )        
begin         
 SELECT  exafis_codigo,        
   exafis_peso,        
   exafis_altura,        
   exafis_pa_sistolica,        
   exafis_pa_diastolica,        
   exafis_temperatura,        
   exafis_freq_respiratoria,        
   exafis_pulso,        
   exafis_saturacao_O2,        
   atendamb_codigo,        
   prof_codigo,        
   locatend_codigo,        
   exafis_datahora,        
   exafis_altura_posicao,        
   exafis_exame_fisico,        
   exafis_pc,        
   exafis_pt,        
   exafis_circ_cintura,        
   inter_codigo,      
   atenf_codigo,      
   exafis_saturacao,  
   exafis_hgt  
         
 FROM pep_exame_fisico        
              
end        
        
else if( @opcao = 1 )        
begin         
        
 DECLARE @dataatual varchar(10)        
 set @dataatual = convert(varchar(10), getdate(), 103)        
        
 EXEC KSP_CONTROLE_SEQUENCIAL @Unidade    = @unid_codigo,        
                             @Chave      = 'PEP_EXAME_FISICO',        
                             @data       = @dataatual,        
                             @NovoCodigo = @exafis_codigo OUTPUT        
        
 INSERT INTO PEP_EXAME_FISICO        
 (        
  exafis_codigo,        
  exafis_peso,        
  exafis_altura,        
  atendamb_codigo,        
  prof_codigo,        
  locatend_codigo,        
  exafis_datahora,        
  exafis_altura_posicao,        
  exafis_exame_fisico,        
  exafis_pc,        
  exafis_pt,        
  exafis_circ_cintura,        
  inter_codigo,      
  atenf_codigo,      
  exafis_saturacao,  
  exafis_hgt  
 )        
 VALUES         
 (        
  @exafis_codigo,        
  @exafis_peso,        
  @exafis_altura,        
  @atendamb_codigo,        
  @prof_codigo,        
  @locatend_codigo,        
  getdate(),        
  @exafis_altura_posicao,        
  @exafis_exame_fisico,        
  @exafis_pc,        
  @exafis_pt,        
  @exafis_circ_cintura,        
  @inter_codigo,      
  @atenf_codigo,      
  @exafis_saturacao,  
  @exafis_hgt   
 )          
        
 IF (@@ERROR <> 0)        
  GOTO ERRO         
        
 SELECT @exafis_codigo        
        
end        
        
else if( @opcao = 2 )        
begin         
        
 UPDATE  pep_exame_fisico        
 SET  exafis_peso = @exafis_peso,        
  exafis_altura = @exafis_altura,        
  exafis_altura_posicao = @exafis_altura_posicao,        
  exafis_circ_cintura = @exafis_circ_cintura,        
  exafis_pc = @exafis_pc,        
  exafis_pt = @exafis_pt,        
  exafis_exame_fisico = @exafis_exame_fisico,        
  inter_codigo = @inter_codigo ,     
  exafis_hgt = @exafis_hgt  
         WHERE exafis_codigo = @exafis_codigo        
        
end        
        
else if( @opcao = 3 )        
begin         
        
    SELECT TOP 1 *        
    FROM pep_exame_fisico        
    WHERE         
    atendamb_codigo = isnull(@atendamb_codigo, null)        
    or         
 inter_codigo = isnull(@inter_codigo, null)        
    ORDER BY exafis_datahora DESC        
        
end        
        
else if( @opcao = 5 )        
  BEGIN    
    
  SELECT  exafis_codigo,        
   exafis_peso,        
   exafis_altura,        
   exafis_pa_sistolica,        
   exafis_pa_diastolica,        
   exafis_temperatura,        
   exafis_freq_respiratoria,        
   exafis_pulso,        
   exafis_saturacao_O2,        
   atendamb_codigo,        
   prof_codigo,        
   locatend_codigo,        
   exafis_datahora,        
   exafis_altura_posicao,        
   exafis_exame_fisico,        
   exafis_pc,        
   exafis_pt,        
   exafis_circ_cintura,        
   inter_codigo,      
   atenf_codigo,      
   exafis_saturacao,  
       exafis_hgt  
 FROM pep_exame_fisico        
 WHERE atenf_codigo = @atenf_codigo    
    
END    
     
      
RETURN        
ERRO:        
     SET @SQL = 'ERRO - ksp_PEP_EXAME_FISICO. OP??O : ' + CONVERT(VARCHAR,@OPCAO)        
     RAISERROR(@SQL,1,1)        
              
        
SET QUOTED_IDENTIFIER ON        
SET ANSI_NULLS  ON
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_Relatorio_Assinado]...';


GO
--EXEC ksp_Relatorio_Assinado  @CodigoRelatorio = 604, @codigoReceita = '012007200001', @opcao = 0
ALTER PROCEDURE [dbo].[ksp_Relatorio_Assinado]
 @ArquivoRPT varchar(300) = null, @CodigoRelatorio int = null, @DataHora datetime = null, @ResultadoLink varchar(300) = null, 
 @ResultadoBase64 VARBINARY(MAX) = null, @CodigoPrescricao varchar(12) = null, @CodigoProfissional varchar(4) = null, 
 @CodigoReceita varchar(12) = null, @AtestadoMedicoCodigo int = null, @AtendCodigo varchar(12) = null, @PacCodigo varchar(12) = null,
 @opcao int
as 
BEGIN
	IF (@opcao = 0)
	BEGIN 
		select top 1 * from RelatorioAssinado
		where CodigoRelatorio = @CodigoRelatorio 
		and ((@CodigoPrescricao is not null and CodigoPrescricao = @CodigoPrescricao)
		     or (@CodigoPrescricao is null and CodigoPrescricao is null))
		and ((@CodigoReceita is not null and CodigoReceita = @CodigoReceita)
		     or (@CodigoReceita is null and CodigoReceita is null))
		and ((@AtestadoMedicoCodigo is not null and AtestadoMedicoCodigo = @AtestadoMedicoCodigo)
		     or (@AtestadoMedicoCodigo is null and AtestadoMedicoCodigo is null))
		and ((@AtendCodigo is not null and AtendCodigo = @AtendCodigo)
		     or (@AtendCodigo is null and AtendCodigo is null))
		and ((@PacCodigo is not null and PacCodigo = @PacCodigo)
		     or (@PacCodigo is null and PacCodigo is null))
		order by datahora desc 
	END

	IF (@opcao = 1)
	BEGIN
		if(not exists(
			select top 1 * from RelatorioAssinado
		where CodigoRelatorio = @CodigoRelatorio 
		and (@CodigoPrescricao is not null and CodigoPrescricao = @CodigoPrescricao)
		     or (@CodigoPrescricao is null and CodigoPrescricao is null)
		and (@CodigoReceita is not null and CodigoReceita = @CodigoReceita)
		     or (@CodigoReceita is null and CodigoReceita is null)
		and (@AtestadoMedicoCodigo is not null and AtestadoMedicoCodigo = @AtestadoMedicoCodigo)
		     or (@AtestadoMedicoCodigo is null and AtestadoMedicoCodigo is null)
		and (@AtendCodigo is not null and AtendCodigo = @AtendCodigo)
		     or (@AtendCodigo is null and AtendCodigo is null)
		and (@PacCodigo is not null and PacCodigo = @PacCodigo)
		     or (@PacCodigo is null and PacCodigo is null)
		))
		Begin
			insert into RelatorioAssinado 
			(ArquivoRPT, CodigoRelatorio, DataHora, ResultadoLink, ResultadoBase64, CodigoPrescricao, CodigoProfissional, CodigoReceita, AtestadoMedicoCodigo, AtendCodigo, PacCodigo)
			values 
			(@ArquivoRPT, @CodigoRelatorio, @DataHora, @ResultadoLink, @ResultadoBase64, @CodigoPrescricao, @CodigoProfissional, @CodigoReceita, @AtestadoMedicoCodigo, @AtendCodigo, @PacCodigo)
		END
		ELSE
		BEGIN
			update RelatorioAssinado
			set DataHora = @DataHora, ResultadoLink = @ResultadoLink, ResultadoBase64 = @ResultadoBase64, CodigoProfissional = @CodigoProfissional
			where CodigoRelatorio = @CodigoRelatorio 
			and (@CodigoPrescricao is not null and CodigoPrescricao = @CodigoPrescricao)
				or (@CodigoPrescricao is null and CodigoPrescricao is null)
			and (@CodigoReceita is not null and CodigoReceita = @CodigoReceita)
				or (@CodigoReceita is null and CodigoReceita is null)
			and (@AtestadoMedicoCodigo is not null and AtestadoMedicoCodigo = @AtestadoMedicoCodigo)
				or (@AtestadoMedicoCodigo is null and AtestadoMedicoCodigo is null)
			and (@AtendCodigo is not null and AtendCodigo = @AtendCodigo)
				or (@AtendCodigo is null and AtendCodigo is null)
			and (@PacCodigo is not null and PacCodigo = @PacCodigo)
				or (@PacCodigo is null and PacCodigo is null) 
		END
	END

	IF (@opcao = 2)
	BEGIN
		update RelatorioAssinado
			set DataHora = @DataHora, ResultadoLink = @ResultadoLink, ResultadoBase64 = @ResultadoBase64, CodigoProfissional = @CodigoProfissional
			where CodigoRelatorio = @CodigoRelatorio 
			and (@CodigoPrescricao is not null and CodigoPrescricao = @CodigoPrescricao)
				or (@CodigoPrescricao is null and CodigoPrescricao is null)
			and (@CodigoReceita is not null and CodigoReceita = @CodigoReceita)
				or (@CodigoReceita is null and CodigoReceita is null)
			and (@AtestadoMedicoCodigo is not null and AtestadoMedicoCodigo = @AtestadoMedicoCodigo)
				or (@AtestadoMedicoCodigo is null and AtestadoMedicoCodigo is null)
			and (@AtendCodigo is not null and AtendCodigo = @AtendCodigo)
				or (@AtendCodigo is null and AtendCodigo is null)
			and (@PacCodigo is not null and PacCodigo = @PacCodigo)
				or (@PacCodigo is null and PacCodigo is null) 
	END

	IF (@opcao = 3)
	BEGIN 
		select * from RelatorioAssinado
	END
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[KSP_ATENDIMENTO_ENFERMAGEM]...';


GO
-- drop PROCEDURE KSP_ATENDIMENTO_ENFERMAGEM        
CREATE PROCEDURE KSP_ATENDIMENTO_ENFERMAGEM        
        
@atenf_codigo uniqueidentifier = null    
,@atenf_data datetime = null    
,@atenf_data_fim datetime = null    
,@agd_sequencial char(120) = null    
,@atenf_preconsulta varchar(2000)     = null    
,@atenf_hipertensao char     = null    
,@atenf_diabetes char     = null    
,@atenf_dpoc char     = null    
,@atenf_cardiopatia char     = null    
,@atenf_renalcronico char     = null    
,@atenf_outros varchar     = null    
,@atenf_posconsulta varchar(2000)     = null    
,@prof_codigo char (4) = null  
,@opcao int         
    
        
as        
        
-- ----------------------------------------------------------------------------------------------------------------------        
 -- Atualiza uma consulta de enfermagem        
-- ----------------------------------------------------------------------------------------------------------------------        
 IF @OPCAO = 0       
   BEGIN        
          UPDATE Atendimento_Enfermagem        
             SET atenf_data_FIM = @atenf_data_FIM
               , agd_sequencial = @agd_sequencial        
               , atenf_preconsulta = @atenf_preconsulta        
               , atenf_hipertensao = @atenf_hipertensao        
               , atenf_diabetes = @atenf_diabetes        
               , atenf_dpoc = @atenf_dpoc        
               , atenf_cardiopatia = @atenf_cardiopatia        
               , atenf_renalcronico = @atenf_renalcronico        
               , atenf_outros = @atenf_outros        
               , atenf_posconsulta = @atenf_posconsulta        
     WHERE atenf_codigo = @atenf_codigo        
   END    
-- ----------------------------------------------------------------------------------------------------------------------        
 -- Cria uma consulta de enfermagem        
-- ----------------------------------------------------------------------------------------------------------------------        
IF @OPCAO = 1      
   BEGIN        
     INSERT INTO Atendimento_Enfermagem        
               ( atenf_codigo        
               , atenf_data        
               , agd_sequencial         
               , atenf_preconsulta         
               , atenf_hipertensao         
               , atenf_diabetes         
               , atenf_dpoc         
               , atenf_cardiopatia         
               , atenf_renalcronico         
               , atenf_outros         
               , atenf_posconsulta  
      , prof_codigo )        
          VALUES ( @atenf_codigo        
               , @atenf_data        
               , @agd_sequencial         
               , @atenf_preconsulta         
               , @atenf_hipertensao         
               , @atenf_diabetes         
               , @atenf_dpoc         
               , @atenf_cardiopatia         
               , @atenf_renalcronico         
               , @atenf_outros         
               , @atenf_posconsulta  
      , @prof_codigo )        
   END       
    
IF @OPCAO = 2    
   BEGIN    
          SELECT  atenf_codigo        
               , atenf_data      
			   , atenf_data_fim  
               , agd_sequencial         
               , atenf_preconsulta         
               , atenf_hipertensao         
               , atenf_diabetes         
               , atenf_dpoc         
               , atenf_cardiopatia         
               , atenf_renalcronico         
               , atenf_outros         
               , atenf_posconsulta    
      , prof_codigo  
       FROM Atendimento_Enfermagem      
    WHERE atenf_codigo = @atenf_codigo    
   END      
    
IF @OPCAO = 3    
   BEGIN    
          SELECT  atenf_codigo        
               , atenf_data        
               , agd_sequencial         
               , atenf_preconsulta         
               , atenf_hipertensao         
               , atenf_diabetes         
               , atenf_dpoc         
               , atenf_cardiopatia         
               , atenf_renalcronico         
               , atenf_outros         
               , atenf_posconsulta    
      , prof_codigo  
       FROM Atendimento_Enfermagem      
    WHERE agd_sequencial = @agd_sequencial    
   END 
-- ----------------------------------------------------------------------------------------------------------------------        
 -- Finaliza uma consulta de enfermagem        
-- ----------------------------------------------------------------------------------------------------------------------        
IF @opcao = 4
  BEGIN
  UPDATE Atendimento_Enfermagem        
       SET atenf_data_FIM = @atenf_data_FIM
     WHERE atenf_codigo = @atenf_codigo        

  END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[KSP_Atendimento_Multiprofissional]...';


GO
CREATE PROCEDURE KSP_Atendimento_Multiprofissional                  
                  
 @atenm_codigo uniqueidentifier = NULL                  
,@atenm_data_final datetime = NULL                  
,@atenm_data_inicio datetime = null              
,@agd_sequencial CHAR(12) = NULL                  
,@atenm_consulta varchar(2000) = NULL                  
,@prof_codigo char(4) = NULL                  
,@opcao int = NULL                  
                  
AS                  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
-- Inclusão de registro                  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
IF @opcao = 0                  
  BEGIN                  
    INSERT INTO Atendimento_Multiprofissional                  
           ( atenm_codigo                  
           , atenm_data_inicio                  
           , agd_sequencial                  
           , atenm_consulta                  
           , prof_codigo)                  
  VALUES                   
           ( @atenm_codigo                  
           , @atenm_data_inicio                  
           , @agd_sequencial                  
           , @atenm_consulta                  
           , @prof_codigo)              
END                  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
-- Atualização de registro                  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
IF @opcao = 1                  
  BEGIN                  
    UPDATE Atendimento_Multiprofissional                   
       SET atenm_consulta = @atenm_consulta               
      , atenm_data_final = @atenm_data_final              
  WHERE atenm_codigo = @atenm_codigo                  
                
                  
END                  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
-- Histórico de atendimento                
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
IF @opcao = 2                  
  BEGIN                  
                
    SELECT DISTINCT Atendimento_Multiprofissional.atenm_codigo                  
         , Atendimento_Multiprofissional.atenm_data_inicio                  
         , PR.prof_nome                  
         , TP.tipprof_descricao  as Especialidade                  
         , setor_clinica.setCli_descricao as 'TipoProfissional'      
   , PL.prof_codigo    
   , PL.cbo_codigo    
      FROM Atendimento_Multiprofissional                   
INNER JOIN PROFISSIONAL_REDE PR           
        ON Atendimento_Multiprofissional.prof_codigo = PR.prof_codigo                  
INNER JOIN agenda_consulta                 
        ON Atendimento_Multiprofissional.agd_sequencial = agenda_consulta.agd_sequencial                
INNER JOIN Profissional_Lotacao PL          
        ON PL.prof_codigo = PR.prof_codigo AND PL.unid_codigo = agenda_consulta.unid_codigo          
INNER JOIN Tipo_Profissional TP          
        ON TP.tipprof_codigo = PL.tipprof_codigo          
INNER JOIN Local_Atendimento LA
        ON PL.locatend_codigo = LA.locatend_codigo
inner join setor_clinica
        ON LA.SETCLI_CODIGO = setor_clinica.setCli_Codigo
     WHERE Atendimento_Multiprofissional.agd_sequencial = @agd_sequencial                  
    and Atendimento_MultiProfissional.atenm_data_final is not null  
                
END             
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
-- Consultar por atendimentos em aberto            
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
IF @opcao = 3                  
  BEGIN                  
                
    SELECT Atendimento_Multiprofissional.atenm_codigo                  
         , Atendimento_Multiprofissional.atenm_data_inicio         
      FROM Atendimento_Multiprofissional                   
     WHERE agd_sequencial = @agd_sequencial                  
    and atenm_data_final  IS NULL            
               
END             
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
-- Consultar por Id            
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
IF @opcao = 4            
  BEGIN                  
                
      SELECT atenm_codigo                  
           , atenm_data_inicio                  
           , agd_sequencial                  
           , atenm_consulta                  
           , prof_codigo                  
        FROM Atendimento_Multiprofissional                   
       WHERE atenm_codigo = @atenm_codigo              
                
END             
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
-- Obter atendimento multiprofissional por agenda e código de profissional            
-- --------------------------------------------------------------------------------------------------------------------------------------------------------                  
IF @opcao = 5            
  BEGIN                  
                
      SELECT atenm_codigo                  
           , atenm_data_inicio                  
           , am.agd_sequencial                  
           , atenm_consulta                  
           , am.prof_codigo                  
     , aa.atendamb_codigo      
        FROM Atendimento_Multiprofissional AM      
   LEFT JOIN agenda_consulta AC      
          ON AM.agd_sequencial = AC.agd_sequencial      
   LEFT JOIN atendimento_ambulatorial AA      
          ON AC.atend_codigo = AA.atend_codigo      
       WHERE AM.agd_sequencial = @agd_sequencial              
         and AM.prof_codigo = @prof_codigo            
                
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[KSP_Atendimento_Multiprofissional_PROCEDIMENTO]...';


GO
-- DROP PROCEDURE KSP_Atendimento_Multiprofissional_PROCEDIMENTO  
CREATE PROCEDURE KSP_Atendimento_Multiprofissional_PROCEDIMENTO  
  
 @atenm_codigo uniqueidentifier = NULL  
,@proc_codigo char(10) = NULL  
,@quantidade INT  = null  
,@opcao int = NULL  
,@prof_codigo char(4) = null
  
AS  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------  
-- Inclusão de registro  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------  
IF @opcao = 0  
  BEGIN  
   
 INSERT INTO Atendimento_Multiprofissional_PROCEDIMENTO  
           ( atenm_codigo  
           , proc_codigo  
           , quantidade  
		   , prof_codigo)  
   VALUES   
     ( @atenm_codigo  
     , @proc_codigo  
     , @quantidade
	 , @prof_codigo)  
       
END  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------  
-- Exclusão de registro  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------  
IF @opcao = 1  
  BEGIN  
   
 DELETE   
   FROM Atendimento_Multiprofissional_PROCEDIMENTO  
  WHERE atenm_codigo = @atenm_codigo  
    AND proc_codigo = @proc_codigo  
       
END  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------  
-- Consulta procedimentos de um atendimento  
-- --------------------------------------------------------------------------------------------------------------------------------------------------------  
IF @opcao = 2  
  BEGIN  
   
 SELECT procedimento.proc_codigo  
      , procedimento.proc_descricao  
      , Atendimento_Multiprofissional_PROCEDIMENTO.quantidade  
      , Atendimento_Multiprofissional_PROCEDIMENTO.atenm_codigo  
   FROM Atendimento_Multiprofissional_PROCEDIMENTO  
INNER JOIN procedimento  
        ON Atendimento_Multiprofissional_PROCEDIMENTO.proc_codigo = procedimento.proc_codigo  
  WHERE atenm_codigo = @atenm_codigo  
       
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[KSP_ATENDIMENTOENFERMAGEM_MEDICAMENTO]...';


GO
-- DROP PROCEDURE KSP_ATENDIMENTOENFERMAGEM_MEDICAMENTO    
CREATE PROCEDURE KSP_ATENDIMENTOENFERMAGEM_MEDICAMENTO    
    
@insu_codigo varchar(20),    
@atenf_codigo uniqueidentifier,    
@insu_descricao varchar(600),  
@opcao int    
    
AS    
    
IF @opcao = 0    
  BEGIN    
    
  INSERT INTO AtendimentoEnfermagem_Medicamento     
            ( insu_codigo    
            , atenf_codigo  
   , insu_descricao)  
       VALUES    
            ( @insu_codigo    
   , @atenf_codigo  
   , @insu_descricao)  
 END  
  
IF @opcao = 1  
  BEGIN    
    
       SELECT insu_codigo    
            , atenf_codigo  
   , insu_descricao  
         FROM AtendimentoEnfermagem_Medicamento       
        WHERE atenf_codigo = @atenf_codigo    
  
 END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[KSP_BAA_MultiAtendimentos]...';


GO
-- drop   PROCEDURE KSP_BAA_MultiAtendimentos     
CREATE PROCEDURE KSP_BAA_MultiAtendimentos     
    
@atend_codigo char(12)     
    
AS    
    
    SELECT DISTINCT Tipo_Profissional.tipprof_descricao as TituloConsulta    
         , Atendimento_Multiprofissional.atenm_data_final as dataconsulta    
         , PROFISSIONAL_REDE.prof_nome  as profissionalconsulta    
         , Atendimento_Multiprofissional.atenm_consulta as consulta    
      FROM Atendimento_Multiprofissional       
INNER JOIN PROFISSIONAL_REDE       
        ON Atendimento_Multiprofissional.prof_codigo = PROFISSIONAL_REDE.prof_codigo      
INNER JOIN agenda_consulta     
        ON Atendimento_Multiprofissional.agd_sequencial = agenda_consulta.agd_sequencial    
INNER JOIN Profissional_Lotacao 
        ON PROFISSIONAL_REDE.prof_codigo = Profissional_Lotacao.prof_codigo
INNER JOIN Tipo_Profissional 
        ON Profissional_Lotacao.tipprof_codigo = Tipo_Profissional.tipprof_codigo
     WHERE agenda_consulta.atend_codigo =@atend_codigo
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_ciclo_interconsultas]...';


GO
CREATE PROCEDURE [dbo].[ksp_ciclo_interconsultas]
@opcao SMALLINT, @Atend_codigo CHAR (12), @Reavaliacao INT = 0 
AS
declare @sql varchar(255)
declare @pac_codigo varchar(12)
declare @dataatendimentoatual DATETIME
declare @primeiravez DATETIME
declare @altadecisaomedica DATETIME
DECLARE @atual_locaatend_codigo varchar(12)

SET NOCOUNT ON
--------------------------------------------------------------------------------------------------
SELECT TOP 1 @dataatendimentoatual = ATEND_DATA, @pac_codigo = pac_codigo,@atual_locaatend_codigo = locatend_codigo FROM atendimento WHERE atend_codigo = @Atend_codigo;

-- HISTORICO DO CICLO
if @opcao = 1
begin

	--declare @primeiravez DATETIME
	--declare @altadecisaomedica DATETIME
	--SELECT TOP 1 @dataatendimentoatual = ATENDAMB_DATAINICIO, @pac_codigo = pac_codigo FROM atendimento_ambulatorial WHERE atendamb_codigo = @Atendamb_codigo;
	--SELECT TOP 1 @dataatendimentoatual = ATENDAMB_DATAINICIO, @pac_codigo = pac_codigo FROM atendimento_ambulatorial WHERE atend_codigo = @Atend_codigo;
	--SELECT TOP 1 @dataatendimentoatual = ATEND_DATA, @pac_codigo = pac_codigo FROM atendimento WHERE atend_codigo = @Atend_codigo;

	SET @primeiravez = (
	   select TOP 1
			A.ATEND_DATA
			from atendimento_ambulatorial aa
				inner join atendimento a on aa.atend_codigo = a.atend_codigo
				inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
				inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
				inner join paciente p on p.pac_codigo = aa.pac_codigo
				left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data <= @dataatendimentoatual
			 and ac.agd_tphorario = 1
			order by a.atend_data desc
	)

	SET @altadecisaomedica = ISNULL((
	   select TOP 1
			A.ATEND_DATA
			from atendimento_ambulatorial aa
				inner join atendimento a on aa.atend_codigo = a.atend_codigo
				inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
				inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
				inner join paciente p on p.pac_codigo = aa.pac_codigo
				left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data >= @dataatendimentoatual
			 and tp.tipsai_codigo = 15 --A.1 - Alta por Decisão Médica - Externa
			order by a.atend_data desc
	),GETDATE())


	select 
		p.pac_nome,
		p.pac_nascimento,
		case agd_tphorario 
		when 1 then 'Primeira Vez'
		when 2 then 'Subsequente'
		when 4 then 'Triagem'
		when 5 then 'Fichar'
		when 6 then 'Retorno Rapido'
		when 7 then 'Interconsulta'
		else 'Não Identificado' end as TipoAgendamento,
		a.ATEND_DATA,
		tp.tipsai_Descricao,	
		vwla.set_descricao,
		pr.prof_nome,
		uam.upaatemed_resumoalta,
		aa.atendamb_codigo,
		aa.atend_codigo,
		upr.LOGO,
   		upr.cabecalho_report1,                                        
   		upr.cabecalho_report2,  
   		upr.cabecalho_report3,
   		u.unid_descricao
		from atendimento_ambulatorial aa
		 inner join atendimento a on aa.atend_codigo = a.atend_codigo
		 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
		 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
		 inner join paciente p on p.pac_codigo = aa.pac_codigo
		 left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
		 inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
		 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
		 inner join unidade u on u.unid_codigo = vwla.unid_codigo
		 inner join unidade_parametro_relatorio upr on u.unid_codigo = upr.unid_codigo
	   where aa.pac_codigo = @pac_codigo       
		   and a.atend_data between @primeiravez and @altadecisaomedica 
		 --and (
		 --     (  @altadecisaomedica != '' and aa.atendamb_datainicio between @primeiravez and @altadecisaomedica ) or
		 --      (   @altadecisaomedica = '' and aa.atendamb_datainicio >= @primeiravez )		   
			-- )
		order by a.atend_data desc


	--PRINT 'PRIMEIRA VEZ'
	--PRINT @primeiravez
	--PRINT 'ALTA DECISAO MEDICA'
	--PRINT @altadecisaomedica
	--PRINT 'DATA ATENDIMENTO ATUAL'
	--PRINT @dataatendimentoatual
	--PRINT 'ATEND CODIGO'
	--PRINT @Atend_codigo
	--PRINT 'pac_codigo'
	--PRINT @pac_codigo



    
	--select 
	--p.pac_nome,
	--case agd_tphorario 
	--when 1 then 'Primeira Vez'
	--when 2 then 'Subsequente'
	--when 4 then 'Triagem'
	--when 5 then 'Fichar'
	--when 6 then 'Retorno Rapido'
	--when 7 then 'Interconsulta'
	--else 'Não Identificado' end as TipoAgendamento,
	--aa.ATENDAMB_DATAINICIO,
	--tp.tipsai_Descricao,	
	--* 
	--from atendimento_ambulatorial aa
	-- inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
	-- inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
	-- inner join paciente p on p.pac_codigo = aa.pac_codigo
	-- left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
 --  where aa.pac_codigo = '011506120022'
 --   order by aa.atendamb_datainicio desc



 --   select * from paciente where pac_nome like '%ANA CAROLINA AGUIAR COSTA%'
	--select * from upa_atendimento_medico where upaatemed_Anamnese like '%ANA CAROLINA AGUIAR COSTA%'
	--select pac_codigo,locatend_codigo, * from atendimento_ambulatorial where  pac_codigo = '011506120022' order by atendamb_datainicio desc     --atendamb_codigo = '012007020008'
	--select atend_codigo,* from agenda_consulta where pac_codigo = '011506120022' order by agd_datahora desc
	--select * from tipo_saida
	--select * from Local_Atendimento where locatend_codigo = 0041
	--select * from setor_clinica where setcli_codigo = '0041'
	--select * from Profissional_Lotacao
	--select * from vwlocal_unidade where locatend_codigo = '0041'
	--select * from PROFISSIONAL_REDE where prof_codigo = '0033'

	--select * from ATENDIMENTO_AMBULATORIAL aa
	--		inner join agenda_consulta ac on aa.atend_codigo = ac.atend_codigo
	--		where aa.pac_codigo = 011908050006



	--	select 		c.co_cid, c.no_cid, c.tp_agravo, cu.tp_agravo as tp_agravo_unid
	--	from 		tb_cid c

	--	left join 	cid_unidade cu
	--	on		c.co_cid = cu.co_cid
end
--------------------------------------------------------------------------------------------------
-- Habilita A.1 - Alta por Decisão Médica - Externa
if @opcao = 2
	begin

		DECLARE @unidade_igual_1vez SMALLINT

		
		DECLARE @primeiravez_locaatend_codigo varchar(12)

		SET @primeiravez_locaatend_codigo = (
		   select TOP 1
				a.locatend_codigo
				from atendimento a 
					inner join agenda_consulta ac on ac.atend_codigo = a.atend_codigo
				where a.pac_codigo = @pac_codigo 
				 and ac.agd_tphorario = 1
				order by atend_data desc
		)
		

		if ( @atual_locaatend_codigo = @primeiravez_locaatend_codigo)
		  begin
			set @unidade_igual_1vez = 1;
		  end

		select @unidade_igual_1vez as habilita;

	end
--------------------------------------------------------------------------------------------------
-- CONSULTAS DO CICLO EM ABERTO PARA ENCERRAMENTO DO CICLO
if @opcao = 3
	begin
		
	 SET @primeiravez = (
	   select TOP 1
			A.ATEND_DATA
			from atendimento_ambulatorial aa
				inner join atendimento a on aa.atend_codigo = a.atend_codigo
				inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
				inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
				inner join paciente p on p.pac_codigo = aa.pac_codigo
				left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data <= @dataatendimentoatual
			 and ac.agd_tphorario = 1
			order by a.atend_data desc
	 )

	 	SET @altadecisaomedica = ISNULL((
	   select TOP 1
			A.ATEND_DATA
			from atendimento_ambulatorial aa
				inner join atendimento a on aa.atend_codigo = a.atend_codigo
				inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
				inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
				inner join paciente p on p.pac_codigo = aa.pac_codigo
				left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data >= @dataatendimentoatual
			 and tp.tipsai_codigo = 15 --A.1 - Alta por Decisão Médica - Externa
			order by a.atend_data desc
	),GETDATE())

	 select 
		p.pac_nome,
		p.pac_nascimento,
		case agd_tphorario 
		when 1 then 'Primeira Vez'
		when 2 then 'Subsequente'
		when 4 then 'Triagem'
		when 5 then 'Fichar'
		when 6 then 'Retorno Rapido'
		when 7 then 'Interconsulta'
		else 'Não Identificado' end as TipoAgendamento,
		a.ATEND_DATA,
		tp.tipsai_Descricao,	
		vwla.set_descricao,
		pr.prof_nome,
		uam.upaatemed_resumoalta,
		aa.atendamb_codigo,
		aa.atend_codigo,
   		u.unid_descricao
		from atendimento_ambulatorial aa
		 inner join atendimento a on aa.atend_codigo = a.atend_codigo
		 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
		 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
		 inner join paciente p on p.pac_codigo = aa.pac_codigo
		 left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
		 inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
		 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
		 inner join unidade u on u.unid_codigo = vwla.unid_codigo
	   where aa.pac_codigo = @pac_codigo   
	       and a.atend_codigo <> @Atend_codigo    
		   and (@primeiravez IS NULL or a.atend_data >= @primeiravez )
		   and (@altadecisaomedica IS NULL or a.atend_data > @altadecisaomedica )
		   and (aa.atendamb_datafinal IS null or uam.tipsai_codigo is null)
		order by a.atend_data desc

	end
--------------------------------------------------------------------------------------------------
--  CONULTA PRIMEIRA VEZ - INICIO CICLO
if @opcao = 4
	begin
		
		--SELECT TOP 1 @dataatendimentoatual = ATEND_DATA, @pac_codigo = pac_codigo, @atual_locaatend_codigo = locatend_codigo 
		--	FROM atendimento WHERE atend_codigo = @Atend_codigo;

		select TOP 1
	p.pac_nome,
	p.pac_nascimento,
	case agd_tphorario 
	when 1 then 'Primeira Vez'
	when 2 then 'Subsequente'
	when 4 then 'Triagem'
	when 5 then 'Fichar'
	when 6 then 'Retorno Rapido'
	when 7 then 'Interconsulta'
	else 'Não Identificado' end as TipoAgendamento,
	a.ATEND_DATA,
	tp.tipsai_Descricao,	
	vwla.set_descricao,
	pr.prof_nome,
	uam.upaatemed_resumoalta,
	aa.atendamb_codigo,
	aa.atend_codigo,
	upr.LOGO,
   	upr.cabecalho_report1,                                        
   	upr.cabecalho_report2,  
   	upr.cabecalho_report3,
   	u.unid_descricao
	from atendimento_ambulatorial aa
	 inner join atendimento a on aa.atend_codigo = a.atend_codigo
	 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
	 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
	 inner join paciente p on p.pac_codigo = aa.pac_codigo
	 left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
	 inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
	 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
	 inner join unidade u on u.unid_codigo = vwla.unid_codigo
	 inner join unidade_parametro_relatorio upr on u.unid_codigo = upr.unid_codigo
				where aa.pac_codigo = @pac_codigo 
				 and a.atend_codigo <> @Atend_codigo
				 AND A.atend_data <= @dataatendimentoatual
				 and ac.agd_tphorario = 1
				order by atend_data desc
	end
--------------------------------------------------------------------------------------------------
-- CONULTA ALTA - FIM DO CICLO 
if @opcao = 5
	begin
		
		--SELECT TOP 1 @dataatendimentoatual = ATEND_DATA, @pac_codigo = pac_codigo, @atual_locaatend_codigo = locatend_codigo 
		--	FROM atendimento WHERE atend_codigo = @Atend_codigo;

		select TOP 1
			p.pac_nome,
			p.pac_nascimento,
			case agd_tphorario 
			when 1 then 'Primeira Vez'
			when 2 then 'Subsequente'
			when 4 then 'Triagem'
			when 5 then 'Fichar'
			when 6 then 'Retorno Rapido'
			when 7 then 'Interconsulta'
			else 'Não Identificado' end as TipoAgendamento,
			a.ATEND_DATA,
			tp.tipsai_Descricao,	
			vwla.set_descricao,
			pr.prof_nome,
			uam.upaatemed_resumoalta,
			aa.atendamb_codigo,
			aa.atend_codigo,
			upr.LOGO,
   			upr.cabecalho_report1,                                        
   			upr.cabecalho_report2,  
   			upr.cabecalho_report3,
   			u.unid_descricao
			from atendimento_ambulatorial aa
			 inner join atendimento a on aa.atend_codigo = a.atend_codigo
			 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
			 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
			 inner join paciente p on p.pac_codigo = aa.pac_codigo
			 left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			 inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
			 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
			 inner join unidade u on u.unid_codigo = vwla.unid_codigo
			 inner join unidade_parametro_relatorio upr on u.unid_codigo = upr.unid_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data >= @dataatendimentoatual
			 and tp.tipsai_codigo = 15 --A.1 - Alta por Decisão Médica - Externa
			order by a.atend_data desc

	end
--------------------------------------------------------------------------------------------------
-- IMPRESSAO PTS
if @opcao = 6
	begin

		declare @hipotese_diagnosticada varchar(500);
		declare @cid varchar(500);
		declare @especialidade varchar(500);
		declare @nome_medico_inicial varchar(500);
		declare @dt_primeira_consulta datetime;
		declare @medico_telefone varchar(500);

		select TOP 1
				@hipotese_diagnosticada = (  
				select top 1 cid2.cid_descricao from atendimento_clinico ac2
				        inner join atendimento_ambulatorial aa2 on ac2.atendamb_codigo = aa2.atendamb_codigo
						inner join cid_10 cid2 on ac2.cid_codigo = cid2.cid_codigo
						where aa2.atend_codigo = aa.atend_codigo
				),
				@cid = (  
				select top 1 cid2.cid_codigo from atendimento_clinico ac2
				        inner join atendimento_ambulatorial aa2 on ac2.atendamb_codigo = aa2.atendamb_codigo
						inner join cid_10 cid2 on ac2.cid_codigo = cid2.cid_codigo
						where aa2.atend_codigo = aa.atend_codigo
				),
				@especialidade = (  
				select top 1 vwla2.set_descricao from vwLocal_Atendimento vwla2				        
						where vwla2.locatend_codigo = ac.locatend_codigo
				),
				@nome_medico_inicial = pr.prof_nome,
				@dt_primeira_consulta = a.atend_data,
				@medico_telefone = pr.Prof_ddd + pr.Prof_telefone
			from atendimento_ambulatorial aa
			 inner join atendimento a on aa.atend_codigo = a.atend_codigo
			-- inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
			 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
			 inner join paciente p on p.pac_codigo = aa.pac_codigo
			 --left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			 --inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
			 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
			-- inner join unidade u on u.unid_codigo = vwla.unid_codigo
			-- inner join unidade_parametro_relatorio upr on u.unid_codigo = upr.unid_codigo
						where aa.pac_codigo = @pac_codigo 
						 --and a.atend_codigo <> @Atend_codigo
						 AND A.atend_data <= @dataatendimentoatual
						 and ac.agd_tphorario = 1 --Primeira VEz
						order by atend_data desc




			SET @primeiravez = (
			   select TOP 1
					A.ATEND_DATA
					from atendimento_ambulatorial aa
						inner join atendimento a on aa.atend_codigo = a.atend_codigo
						inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
						inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
						inner join paciente p on p.pac_codigo = aa.pac_codigo
						left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
					where aa.pac_codigo = @pac_codigo 
					 AND A.atend_data <= @dataatendimentoatual
					 and ac.agd_tphorario = 1
					order by a.atend_data desc
			)

			SET @altadecisaomedica = ISNULL((
			   select TOP 1
					A.ATEND_DATA
					from atendimento_ambulatorial aa
						inner join atendimento a on aa.atend_codigo = a.atend_codigo
						inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
						inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
						inner join paciente p on p.pac_codigo = aa.pac_codigo
						left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
					where aa.pac_codigo = @pac_codigo
					 AND A.atend_data >= @dataatendimentoatual
					 and tp.tipsai_codigo = 15 --A.1 - Alta por Decisão Médica - Externa
					order by a.atend_data desc
			),GETDATE())

			DECLARE @RESULTADOS VARCHAR(5000)

			SET @RESULTADOS = (select substring (
				(  
				  select 'Data: ' + convert(varchar,a2.atend_data,103) + ' -' + 
				         ' Profissional: ' + RTRIM(pr.prof_nome) + ' -' + 
						 ' Especialidade: ' + vwla2.set_descricao +  
				         ' Resumo: ' + upaatemed_resumoalta + CHAR(13) + CHAR(10) as 'data()' 
				  from UPA_Atendimento_Medico upa2
				    inner join atendimento_ambulatorial aa2 on upa2.atendamb_codigo = aa2.atendamb_codigo
					inner join atendimento a2 on aa2.atend_codigo = a2.atend_codigo
					inner join agenda_consulta ac2 on ac2.atend_codigo = aa2.atend_codigo
					inner join vwLocal_Atendimento vwla2 on vwla2.locatend_codigo = ac2.locatend_codigo
					inner join profissional_rede pr on pr.prof_codigo = aa2.prof_codigo
				   where  a2.atend_data >= @primeiravez and a2.atend_data < @altadecisaomedica
					     and aa2.pac_codigo = @pac_codigo
				     order by a2.atend_data desc
				  for xml path('')
				),0,5000) as retorno)

			SET @RESULTADOS = CASE WHEN @RESULTADOS IS NULL THEN '' ELSE REPLACE(SUBSTRING(@RESULTADOS,0,LEN(@RESULTADOS)),'&#x0D','') END

			DECLARE @DIAGNOSTICOS VARCHAR(5000)
			SET @DIAGNOSTICOS = (select substring (
				(  
				  select 'Data: ' + convert(varchar,a2.atend_data,103) + ' -' + 
				         ' Profissional: ' + RTRIM(pr.prof_nome) + ' -' + 
						 ' Especialidade: ' + vwla2.set_descricao +  
				         ' Diagnóstico: ' + cid2.cid_codigo + ' - ' + cid2.cid_descricao + CHAR(13) + CHAR(10) as 'data()'  
				  from UPA_Atendimento_Medico upa2
				    inner join atendimento_ambulatorial aa2 on upa2.atendamb_codigo = aa2.atendamb_codigo
					inner join atendimento a2 on aa2.atend_codigo = a2.atend_codigo
					inner join atendimento_clinico ac2 on aa2.atendamb_codigo = ac2.atendamb_codigo
					inner join cid_10 cid2 on ac2.cid_codigo = cid2.cid_codigo
					inner join agenda_consulta agc2 on agc2.atend_codigo = aa2.atend_codigo
					inner join vwLocal_Atendimento vwla2 on vwla2.locatend_codigo = agc2.locatend_codigo
					inner join profissional_rede pr on pr.prof_codigo = aa2.prof_codigo
				   where  a2.atend_data >= @primeiravez and a2.atend_data <= @altadecisaomedica
					     and aa2.pac_codigo = @pac_codigo
				    order by a2.atend_data desc
				  for xml path('')
				),0, 999 ) as retorno)

			SET @DIAGNOSTICOS = CASE WHEN @DIAGNOSTICOS IS NULL THEN '' ELSE replace(SUBSTRING(@DIAGNOSTICOS,0,LEN(@DIAGNOSTICOS)),'&#x0D','') END



		select TOP 1
			p.pac_nome,
			convert(varchar,p.pac_nascimento,103) as pac_nascimento,
			ur.unidref_descricao as unidade_origem,			
			( 
			  select top 1 pac_prontuario_numero from Paciente_Prontuario pr
			    where pr.pac_codigo = p.pac_codigo and pr.unid_codigo = p.unid_codigo
			) as pac_prontuario,
			(
			   case  when p.pac_celular is not null and p.pac_celular <> '' then p.pac_celular
					  when p.pac_telefone is not null and p.pac_telefone <> '' then p.pac_telefone
					  when p.pac_telefone2 is not null and p.pac_telefone2 <> '' then p.pac_telefone2
				else '' end
			) as pac_telefone,
			@hipotese_diagnosticada as hipotese_diagnosticada,
			@cid as cid,
			@especialidade as especialidade,
			@nome_medico_inicial as medico_inicial,
			@dt_primeira_consulta as dt_primeira_consulta,
			@medico_telefone as medico_telefone,
			a.ATEND_DATA AS DT_ALTA,
			uam.upaatemed_resumoalta,
			tp.tipsai_Descricao,	
			vwla.set_descricao,
			pr.prof_nome,
			uam.upaatemed_resumoalta,
			aa.atendamb_codigo,
			aa.atend_codigo,
			--(
			--	select substring (
			--	(  
			--	  select ' ' + upaatemed_resumoalta + ',' as 'data()' 
			--	  from UPA_Atendimento_Medico upa2
			--	    inner join atendimento_ambulatorial aa2 on upa2.atendamb_codigo = aa2.atendamb_codigo
			--		inner join atendimento a2 on aa2.atend_codigo = a2.atend_codigo
			--	   where  a2.atend_data between @primeiravez and @altadecisaomedica
			--	     order by a2.atend_data desc
			--	  for xml path('')
			--	),0,999) as retorno
			--) as resultados,
			@RESULTADOS AS resultados,
			@DIAGNOSTICOS AS diagnosticos,
			--(
			--	select substring (
			--	(  
			--	  select   ' ' + cid2.cid_codigo + ',' as 'data()' 
			--	  from UPA_Atendimento_Medico upa2
			--	    inner join atendimento_ambulatorial aa2 on upa2.atendamb_codigo = aa2.atendamb_codigo
			--		inner join atendimento a2 on aa2.atend_codigo = a2.atend_codigo
			--		inner join atendimento_clinico ac2 on aa2.atendamb_codigo = ac2.atendamb_codigo
			--		inner join cid_10 cid2 on ac2.cid_codigo = cid2.cid_codigo
			--	   where  a2.atend_data between @primeiravez and @altadecisaomedica
			--	    order by a2.atend_data desc
			--	  for xml path('')
			--	),0, 999 ) as retorno
			--) as diagnosticos2,
			uam.upaatemed_condutaorientacao ,
			case uam.upaatemed_sugestaoreavaliacao when 'S' then 'Sim' else 'Não' end  as sugestaoreavaliacao,
			case uam.upaatemed_sugestaoreavaliacao when 'S' then uam.upaatemed_temporeavaliacao + ' Meses' else '' end as temporeavaliacao,

			upr.LOGO,
   			upr.cabecalho_report1,                                        
   			upr.cabecalho_report2,  
   			upr.cabecalho_report3,
   			u.unid_descricao
			from atendimento_ambulatorial aa
			 inner join atendimento a on aa.atend_codigo = a.atend_codigo
			 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
			 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
			 inner join paciente p on p.pac_codigo = aa.pac_codigo
			 left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			 inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
			 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
			 inner join unidade u on u.unid_codigo = vwla.unid_codigo
			 inner join unidade_parametro_relatorio upr on u.unid_codigo = upr.unid_codigo
			 LEFT join unidade_referencia ur on ur.unidref_codigo = p.Pac_UnidRef_Codigo and ur.unid_codigo = u.unid_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data >= @dataatendimentoatual
			 and tp.tipsai_codigo = 15 --A.1 - Alta por Decisão Médica - Externa
			order by a.atend_data desc

	end
--------------------------------------------------------------------------------------------------
-- EXISTE INTERCONSULTA REAVALIACAO MAIOR
if @opcao = 7
	begin

	SET @primeiravez = (
	   select TOP 1
			A.ATEND_DATA
			from atendimento_ambulatorial aa
				inner join atendimento a on aa.atend_codigo = a.atend_codigo
				inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
				inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
				inner join paciente p on p.pac_codigo = aa.pac_codigo
				left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data <= @dataatendimentoatual
			 and ac.agd_tphorario = 1
			order by a.atend_data desc
	)


	  select 
		RTRIM(pr.prof_nome) as prof_nome,
		uam.upaatemed_temporeavaliacao as temporeavaliacao
		from atendimento_ambulatorial aa
		 inner join atendimento a on aa.atend_codigo = a.atend_codigo
		 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
		 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
		 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
	   where aa.pac_codigo = @pac_codigo       
		   and a.atend_data >= @primeiravez
		   and a.atend_codigo <> @Atend_codigo
		   --and agd_tphorario = 7
		   --AND uam.upaatemed_sugestaoreavaliacao is not null 
		   --and uam.upaatemed_sugestaoreavaliacao = 'S'
		   and uam.upaatemed_temporeavaliacao > @Reavaliacao
		order by a.atend_data desc

	end
	--------------------------------------------------------------------------------------------------
-- VERIFICA EXAMES PENDENTES NO CICLO
if @opcao = 8
	begin

	  SET @primeiravez = (
	   select TOP 1
			A.ATEND_DATA
			from atendimento_ambulatorial aa
				inner join atendimento a on aa.atend_codigo = a.atend_codigo
				inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
				inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
				inner join paciente p on p.pac_codigo = aa.pac_codigo
				left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
			where aa.pac_codigo = @pac_codigo 
			 AND A.atend_data <= @dataatendimentoatual
			 and ac.agd_tphorario = 1
			order by a.atend_data desc
	)

	select 
	   --Paciente com exame(s) pendente(s) e/ou não realizado(s)
       (		     
			 select
				 count(*)
				from pedido p
				inner join Solicitacao_Pedido sp on p.ped_codigo = sp.ped_codigo
				where 
					 p.ped_codigo_origem = a.atend_codigo
				 and p.pac_codigo = @pac_codigo
				 and sp.solped_CodigoPedido is null 	   
	   ) as examespendentes,
	   --Existem exames de laboratório sem liberação
	   (
			   select count(*) 
				from Pedido_Exame_Laboratorio pel
				where 
				    pel.status_geracao_laudo in ('C','S','L')
				 and pel.pac_codigo = @pac_codigo
				 and (pel.emer_codigo = a.atend_codigo or pel.spa_codigo = a.atend_codigo)
				 
	   ) as exameslaboratoriosemliberacao,
	   --Existem exames de radiologia sem liberação
	  (
			select 
				count(*) 
			from pedido_exame_radiologico per
			where per.status <> 'L'
			 and per.pac_codigo = @pac_codigo
			 and (per.emer_codigo = a.atend_codigo or per.spa_codigo = a.atend_codigo)
			 
	   ) as examesradiologiasemliberacao
		from atendimento_ambulatorial aa
		 inner join atendimento a on aa.atend_codigo = a.atend_codigo
		 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
		 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
	   where aa.pac_codigo = @pac_codigo       
		   and a.atend_data >= @primeiravez

	end
--------------------------------------------------------------------------------------------------
-- ATENDIMENTO ATUAL
if @opcao = 9
	begin
	  
	  
	  select TOP 1
		p.pac_nome,
		p.pac_nascimento,
		case agd_tphorario 
		when 1 then 'Primeira Vez'
		when 2 then 'Subsequente'
		when 4 then 'Triagem'
		when 5 then 'Fichar'
		when 6 then 'Retorno Rapido'
		when 7 then 'Interconsulta'
		else 'Não Identificado' end as TipoAgendamento,
		a.ATEND_DATA,
		tp.tipsai_Descricao,	
		vwla.set_descricao,
		pr.prof_nome,
		uam.upaatemed_resumoalta,
		uam.upaatemed_Anamnese,
		aa.atendamb_codigo,
		aa.atend_codigo,
   		u.unid_descricao
		from atendimento_ambulatorial aa
		 inner join atendimento a on aa.atend_codigo = a.atend_codigo
		 inner join upa_atendimento_medico uam on aa.atendamb_codigo = uam.atendamb_codigo
		 inner join agenda_consulta ac on ac.atend_codigo = aa.atend_codigo
		 inner join paciente p on p.pac_codigo = aa.pac_codigo
		 left join tipo_saida tp on tp.tipsai_codigo = uam.tipsai_codigo
		 inner join vwLocal_Atendimento vwla on vwla.locatend_codigo = ac.locatend_codigo
		 inner join profissional_rede pr on pr.prof_codigo = aa.prof_codigo
		 inner join unidade u on u.unid_codigo = vwla.unid_codigo
	   where aa.pac_codigo = @pac_codigo       
		   and a.atend_codigo = @Atend_codigo





	end
--------------------------------------------------------------------------------------------------
if (@@ERROR <> 0)
      	BEGIN
		Select @sql = 'ERRO - KPS_CICLO_INTERCONSULTA. Opção : ' + convert(varchar,@opcao)
         	RAISERROR(@sql,1,1)
         	 
      	END


SET NOCOUNT OFF

SET QUOTED_IDENTIFIER  OFF    SET ANSI_NULLS  ON
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_Dripping_Evolucao_Diurna]...';


GO
CREATE PROCEDURE [dbo].[ksp_Dripping_Evolucao_Diurna]
@DrippingId int = null, @CodigoUtiDiurno int = null, @InterCodigo varchar(12) = null, @ProfCodigo varchar(4) = null, 
@DrippingCodigoStok varchar(50) = null, @DrippingDescricao varchar(2000) = null, @mlh varchar(10) = null, @opcao int = null
as
BEGIN
	IF (@opcao = 0)
	BEGIN 
		select *
		from DrippingEvolucaoDiurna 
		where (DrippingId = @DrippingId or @DrippingId is null)
		and (CodigoUtiDiurno = @CodigoUtiDiurno or @CodigoUtiDiurno is null)		
	END

	IF (@opcao = 1)
	BEGIN
		insert into DrippingEvolucaoDiurna 
		(CodigoUtiDiurno, InterCodigo, ProfCodigo, DrippingCodigoStok, DrippingDescricao, mlh) 
		values 
		(@CodigoUtiDiurno, @InterCodigo, @ProfCodigo, @DrippingCodigoStok, @DrippingDescricao, @mlh) 

		SELECT IDENT_CURRENT('DrippingEvolucaoDiurna')
	END

	IF (@opcao = 2)
	BEGIN
		update DrippingEvolucaoDiurna
		set InterCodigo = @InterCodigo, ProfCodigo = @ProfCodigo, DrippingCodigoStok = @DrippingCodigoStok, @drippingDescricao = @DrippingDescricao, mlh = @mlh
		where DrippingId = @DrippingId		

	END
	IF (@opcao = 3)
	BEGIN 
		select * from DrippingEvolucaoDiurna
	END
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_Evolucao_Uti_Intercorrencia]...';


GO
CREATE PROCEDURE [dbo].[ksp_Evolucao_Uti_Intercorrencia]
@evouti_codigo int = null, @DataInclusao datetime = null, @inter_codigo char(12) = null, @prof_codigo char(4) = null, @locatend_codigo char(4) = null,
@Intercorrencia varchar(8000) = null, @opcao int = null, @Rascunho bit = null, @OrigemCopiaID int = null
as 
BEGIN
	IF (@opcao = 0)
	BEGIN 
		select evouti_codigo
			,DataInclusao
			,inter_codigo
			,prof_codigo
			,locatend_codigo
			,Intercorrencia
			,isnull(Rascunho,0) as 'Rascunho'
			,DataUltimaAlteracao
			,OrigemCopiaID
		from EvolucaoUtiIntercorrencia 
		where (evouti_codigo = @evouti_codigo or @evouti_codigo is null)
		and (inter_codigo = @inter_codigo or @inter_codigo is null)
		order by DataInclusao desc

		
	END

	IF (@opcao = 1)
	BEGIN
		insert into EvolucaoUtiIntercorrencia 
		(DataInclusao, inter_codigo, prof_codigo, locatend_codigo, Intercorrencia, Rascunho, FECHAMENTO_AUTOMATICO, OrigemCopiaID) 
		values 
		(@DataInclusao, @inter_codigo, @prof_codigo, @locatend_codigo, @Intercorrencia, @Rascunho, CASE WHEN ISNULL(@Rascunho,0) = 0 THEN 'N' ELSE NULL END, @OrigemCopiaID) 

		SET @evouti_codigo = IDENT_CURRENT('EvolucaoUtiIntercorrencia')
		SELECT IDENT_CURRENT('EvolucaoUtiIntercorrencia')

		  if(@inter_codigo is not null)
		  begin 
		   EXEC  KSP_Baixa_Automatica_EvolucaoUti @prof_codigo, @locatend_codigo, @inter_codigo, @evouti_codigo
		  end 
	END

	IF (@opcao = 2)
	BEGIN
		update EvolucaoUtiIntercorrencia
		set inter_codigo = @inter_codigo, prof_codigo = @prof_codigo, locatend_codigo = @locatend_codigo, Intercorrencia = @Intercorrencia, Rascunho = @Rascunho, DataUltimaAlteracao = getdate(), FECHAMENTO_AUTOMATICO = CASE WHEN ISNULL(@Rascunho,0) = 0 THEN 'N' ELSE NULL END
		where evouti_codigo = @evouti_codigo

		  if(@inter_codigo is not null)
		  begin 
		   EXEC  KSP_Baixa_Automatica_EvolucaoUti @prof_codigo, @locatend_codigo, @inter_codigo, @evouti_codigo
		  end 
		

	END
	IF (@opcao = 3)
	BEGIN 
		select * from EvolucaoUtiIntercorrencia
	END
END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_exame_fisico_rel]...';


GO
CREATE procedure ksp_exame_fisico_rel   
  
@atend_codigo varchar(100)  
  
AS  
  
 SELECT TOP 1 exafis_codigo,        
   exafis_peso,        
   exafis_altura,        
   exafis_pa_sistolica,        
   exafis_pa_diastolica,        
   exafis_temperatura,        
   exafis_freq_respiratoria,        
   exafis_pulso,        
   exafis_saturacao_O2,        
   atendamb_codigo,        
   exafis_datahora,        
   exafis_altura_posicao,        
   exafis_exame_fisico,        
   exafis_pc,        
   exafis_pt,        
   exafis_circ_cintura ,
   exafis_saturacao       
 FROM pep_exame_fisico pep  
 inner join atendimento_Enfermagem af   
 on af.atenf_codigo = pep.atenf_codigo  
 inner join agenda_consulta ac   
 on af.agd_sequencial = ac.agd_sequencial  
 inner join Atendimento a  
 on ac.atend_codigo =  a.atend_codigo  
  WHERE a.atend_codigo = @atend_codigo
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_nefro]...';


GO

CREATE PROCEDURE [dbo].[ksp_nefro] @Opcao INT, @Tp_pesq INT,  @Codigo_Inter VARCHAR (12), @Profissao VARCHAR (4), @Pac_Codigo VARCHAR (12),
@Justificativa TEXT, @Dialisa VARCHAR(2), @Modalidade VARCHAR(4), @HD VARCHAR(4), @UF VARCHAR(4), @DATA SMALLDATETIME, @Id_nefro INT
AS
IF @Opcao = 0
	begin
		Select 
			N.data_nefro as Data,
			Pro.prof_codigo as CodProf,
			P.pac_codigo as Pac_codigo,
			I.inter_codigo as Inter_codigo,
			N.dialisa as Dialisa,
			N.justificativa as Justificativa,
			N.modalidade as Modalidade,
			N.tempo_Hd as Tempo_hd,
			N.uf_efetiva as Uf_Efetiva,
			N.Id_Nefro as Id_Nefro

			from hemodialise N,
				Internacao I,
				Paciente P,
				Profissional Pro

			where N.pac_codigo = P.pac_codigo
			And N.prof_codigo = Pro.prof_codigo
			AND N.data_nefro = ISNULL(@DATA, N.data_nefro)
			AND N.dialisa = ISNULL(@Dialisa, N.dialisa)
			AND N.modalidade = ISNULL(@Modalidade, N.modalidade)

	END

IF @Opcao = 1
	Begin
		Insert Into Hemodialise(
			inter_codigo,
			pac_codigo,
			prof_codigo,
			dialisa,
			justificativa,
			modalidade,
			tempo_hd,
			uf_efetiva,
			data_nefro
			)
			VALUES(
			@Codigo_Inter,
			@Pac_Codigo,
			@Profissao,
			@Dialisa,
			@Justificativa,
			@Modalidade,
			@HD,
			@UF,
			@DATA
			)

			SELECT convert(int,IDENT_CURRENT('hemodialise'))
	END

IF @Opcao = 2
	Begin
		Update Hemodialise SET
			dialisa = @Dialisa,
			justificativa = @Justificativa,
			modalidade = @Modalidade,
			tempo_hd = @HD,
			uf_efetiva = @UF,
			data_nefro = @Data

			where inter_codigo = @Codigo_Inter
			AND pac_codigo = @Pac_Codigo
			AND prof_codigo = @Profissao
	END
IF @Opcao = 3 
	Begin 
		DELETE FROM Hemodialise
		Where id_nefro = @Id_nefro
	END
IF @Opcao = 4
	Begin
		Declare @lsql varchar(1024)

		Set @lsql = @lsql + 'Select I.inter_codigo, P.pac_nome, N.justificativa, Pro.prof_nome'
		Set @lsql = @lsql + 'From Internacao I, paciente P, Hemodialise N, Profissional Pro'
		Set @lsql = @lsql + 'Where p.pac_nome = I.pac_nome'

		If @Tp_pesq is not null
		Begin

			If @Codigo_Inter is Not Null
				Begin
					if @Tp_pesq = 0 or @Tp_pesq = 4 -- 0-Identico 4-Igual
					Begin
						Set @lSql = @lSql + ' and I.Inter_Codigo = "' + @Codigo_Inter + '"'
					End
					if @Tp_pesq = 1 -- Inicio
					Begin
						Set @lSql = @lSql + ' and N.Inter_Codigo Like "' + rtrim(ltrim(@Codigo_Inter)) + '%"'
					End
					if @Tp_pesq = 2 -- Parte
					Begin
						Set @lSql = @lSql + ' and N.Inter_Codigo Like "%' + rtrim(ltrim(@Codigo_Inter)) + '%"'
					End
					if @Tp_pesq = 3 -- Fonetica
					Begin
						Set @lSql = ''
					End
					if @Tp_pesq = 5 -- Maior
					Begin
						Set @lSql = @lSql + ' and N.Inter_Codigo > "' + @Codigo_Inter + '"'
					End
					if @Tp_pesq = 6 -- Menor
					Begin
						Set @lSql = @lSql + ' and N.Inter_Codigo < "' + @Codigo_Inter + '"'
					End
					if @Tp_pesq = 7 -- Maior ou Igual
					Begin
						Set @lSql = @lSql + ' and N.Inter_Codigo >= "' + @Codigo_Inter + '"'
					End
					if @Tp_pesq = 8 -- Menor ou Igual
					Begin
						Set @lSql = @lSql + ' and N.Inter_Codigo <= "' + @Codigo_Inter + '"'
					End
				End

			-- Pesquisa por DATA
			If @Data is Not Null
			Begin
				if @Tp_pesq = 0 or @Tp_pesq = 4 -- 0-Identico 4-Igual
				Begin
					Set @lSql = @lSql + ' and N.nefro_data = "' + rtrim(ltrim(@Data)) + '"'
				End
				if @Tp_pesq = 1 or @Tp_pesq = 2 or @Tp_pesq = 3 -- Inicio, Parte ou Fonetica
				Begin
					Set @lSql = ''
				End
				if @Tp_pesq = 5 -- Maior
				Begin
					Set @lSql = @lSql + ' and N.nefro_data > "' + rtrim(ltrim(@Data)) + '"'
				End
				if @Tp_pesq = 6 -- Menor
				Begin
					Set @lSql = @lSql + ' and N.nefro_data < "' + rtrim(ltrim(@Data)) + '"'
				End
				if @Tp_pesq = 7 -- Maior ou Igual
				Begin
					Set @lSql = @lSql + ' and N.nefro_data >= "' + rtrim(ltrim(@Data)) + '"'
				End
				if @Tp_pesq = 8 -- Menor ou Igual
				Begin
					Set @lSql = @lSql + ' and N.nefro_data <= "' + rtrim(ltrim(@Data)) + '"'
				End
			End

		END

		Execute (@lSql)

	END

IF @Opcao = 5
	Begin
		Select data_nefro as Data, dialisa as Dialisa, justificativa as Justificativa, modalidade as Modalidade, tempo_hd, uf_efetiva as Uf_Efetiva, id_nefro, N.prof_codigo as CodProf, N.inter_codigo
		from Hemodialise N
		INNER JOIN Internacao I on I.inter_codigo = N.inter_codigo 
		where N.inter_codigo = @Codigo_Inter
		ORDER BY Data Desc
	END
------------------------------------------------------------------------------------------------
If (@@ERROR <> 0)
	Begin
		RAISERROR('ERRO - Tabela de Evolucao.',1,1)
         	 
    End
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_Parametronefro]...';


GO

CREATE PROCEDURE [dbo].[ksp_Parametronefro] @Id Int = Null, @Procedimento VARCHAR(250) = Null , @Modalidade VARCHAR(3) = NULL, @CodigoUnidade varchar(4), @co_procedimento VARCHAR(10) = Null ,@Opcao INT, @Tp_pesq INT

AS

IF @Opcao = 1
Begin 
	
	Insert into Parametro_Nefro(
		Modalidade,
		CodigoUnidade,
		co_procedimento,
		Procedimento
		)
	Values(
		@Modalidade,
		@CodigoUnidade,
		@co_procedimento,
		@Procedimento
	)

End

If @Opcao = 3
BEGIN

	DELETE FROM Parametro_Nefro where Id = @Id

END

IF @Opcao = 4
Begin
	
	Select P.Modalidade, P.Procedimento, P.co_procedimento ,P.Id, P.co_procedimento
		from Parametro_Nefro P
		INNER JOIN unidade U on U.unid_codigo = P.CodigoUnidade
		where P.CodigoUnidade = @CodigoUnidade

End

IF @Opcao = 6
Begin

	Select P.Modalidade, P.Procedimento, P.co_procedimento ,P.Id, P.co_procedimento, p.CodigoUnidade
		from Parametro_Nefro P
		where P.CodigoUnidade = @CodigoUnidade AND P.Modalidade = @Modalidade

End
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_Relatorio_Ambulatorio_Producao_InterConsulta]...';


GO

CREATE PROCEDURE [dbo].[ksp_Relatorio_Ambulatorio_Producao_InterConsulta]
@unid_codigo CHAR (4)=null, @data_inicial DATETIME, @data_final DATETIME, @prof_codigo CHAR (4)=null, @tipo_consulta CHAR (4) = 0, @especialidade varchar(10)=null
AS
SET NOCOUNT ON

--Carrega dados checkout
SELECT 'Realizadas' as Status,
	   A.atend_codigo as Checkin,
	   AG.agd_sequencial as Consulta,
	   PAC.pac_nome as Paciente,
	   PAC.pac_sexo as Sexo,
	   PAC.pac_idade as Idade,
	   AA.atendamb_datainicio as Data_da_Consulta,
	   VW.set_descricao as Clinica,
	   AA.atendamb_codigo as CheckOut,
	   T.tipsai_Descricao as Tipo_de_Saida	 
	     	
INTO #Temp

FROM ATENDIMENTO A 
	INNER JOIN ATENDIMENTO_AMBULATORIAL AA 	ON A.ATEND_CODIGO = AA.ATEND_CODIGO
	INNER JOIN agenda_consulta AG ON AG.pac_codigo = AA.pac_codigo and A.atend_codigo =  AG.atend_codigo
	INNER JOIN VWLOCAL_ATENDIMENTO VW ON A.LOCATEND_CODIGO = VW.LOCATEND_CODIGO
	INNER JOIN PACIENTE PAC ON A.PAC_CODIGO = PAC.PAC_CODIGO
	INNER JOIN UPA_Atendimento_Medico UPM ON AA.atendamb_codigo = UPM.atendamb_codigo
	INNER JOIN Tipo_Saida T ON UPM.tipsai_codigo = T.tipsai_codigo
WHERE VW.UNID_CODIGO = @UNID_CODIGO
  AND AG.agd_datahora BETWEEN @data_inicial AND dateadd(DAY,1,@data_final) 
  AND AA.atendamb_datafinal IS NOT NULL
  and ( @prof_codigo is null or aa.prof_codigo = @prof_codigo )
  and ( @tipo_consulta is null or ag.agd_tphorario = @tipo_consulta )
  and ( @especialidade is null or ag.locatend_codigo = @especialidade )

  UNION
--Carrega dados do agendamento se não foi feito checkout

  SELECT 'Pendentes' as Status,
	   AC.atend_codigo as CheckIn,
	   AC.agd_sequencial as Consulta,
	   PAC.pac_nome as Paciente,
	   PAC.pac_sexo as Sexo,
	   PAC.pac_idade as Idade,
	   Ac.agd_datahora as Data_da_Consulta,
	   vwlocal.set_descricao as Clinica,
	   ab.atendamb_codigo as CheckOut,
	   '' as Tipo_de_Saida	

FROM agenda_consulta AC
		inner join profissional medico on medico.prof_codigo = AC.prof_codigo And  medico.locatend_codigo = AC.locatend_codigo
		inner join vwlocal_unidade vwlocal on vwlocal.locatend_codigo = AC.locatend_codigo
		inner join paciente PAC on PAC.pac_codigo = AC.pac_codigo
		LEFT join atendimento_ambulatorial ab on AC.atend_codigo = ab.atend_codigo
    WHERE AC.unid_codigo = @unid_codigo
	and AC.agd_datahora BETWEEN @data_inicial AND dateadd(DAY,1,@data_final) 
	and ab.atendamb_datafinal IS null
	and ( @prof_codigo is null or ab.prof_codigo = @prof_codigo )
    and ( @tipo_consulta is null or ac.agd_tphorario = @tipo_consulta )
    and ( @especialidade is null or ac.locatend_codigo = @especialidade )

	 select t.*,
	 @data_inicial as DataInicial,
	 @data_final as DataFinal     
 from      
 #temp t     
 order BY t.CheckIn    
 
 drop table #temp
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[ksp_Relatorio_Ambulatorio_Producao_InterConsulta_Realizados]...';


GO
CREATE PROCEDURE [dbo].[ksp_Relatorio_Ambulatorio_Producao_InterConsulta_Realizados]
@unid_codigo CHAR (4)=null, @data_inicial DATETIME, @data_final DATETIME, @prof_codigo CHAR (4)=null, @tipo_consulta CHAR (4) = 0, @especialidade varchar(10)=null
AS
SET NOCOUNT ON

--Carrega dados checkout
SELECT 'Realizados' as Status,
	   A.atend_codigo as Checkin,
	   AG.agd_sequencial as Consulta,
	   PAC.pac_nome as Paciente,
	   PAC.pac_sexo as Sexo,
	   PAC.pac_idade as Idade,
	   AA.atendamb_datainicio as Data_da_Consulta,
	   VW.set_descricao as Clinica,
	   AA.atendamb_codigo as CheckOut,
	   T.tipsai_Descricao as Tipo_de_Saida	 
	     	
INTO #Temp

FROM ATENDIMENTO A 
	INNER JOIN ATENDIMENTO_AMBULATORIAL AA 	ON A.ATEND_CODIGO = AA.ATEND_CODIGO
	INNER JOIN agenda_consulta AG ON AG.pac_codigo = AA.pac_codigo and A.atend_codigo =  AG.atend_codigo
	INNER JOIN VWLOCAL_ATENDIMENTO VW ON A.LOCATEND_CODIGO = VW.LOCATEND_CODIGO
	INNER JOIN PACIENTE PAC ON A.PAC_CODIGO = PAC.PAC_CODIGO
	INNER JOIN UPA_Atendimento_Medico UPM ON AA.atendamb_codigo = UPM.atendamb_codigo
	INNER JOIN Tipo_Saida T ON UPM.tipsai_codigo = T.tipsai_codigo
WHERE VW.UNID_CODIGO = @UNID_CODIGO
  AND AG.agd_datahora BETWEEN @data_inicial AND dateadd(DAY,1,@data_final) 
  AND AA.atendamb_datafinal IS NOT NULL
  and ( @prof_codigo is null or aa.prof_codigo = @prof_codigo )
  and ( @tipo_consulta is null or ag.agd_tphorario = @tipo_consulta )
  and ( @especialidade is null or ag.locatend_codigo = @especialidade )


	 select t.*,
	 @data_inicial as DataInicial,
	 @data_final as DataFinal     
 from      
 #temp t     
 order BY t.CheckIn    
 
 drop table #temp
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Creating [dbo].[KSP_RELATORIO_EVOLUCAO_CTI_Intercorrente]...';


GO
CREATE PROCEDURE [dbo].[KSP_RELATORIO_EVOLUCAO_CTI_Intercorrente] @inter_codigo char(12) = null, @evouti_codigo int = null
as
begin
select	convert(varchar(10), eui.DataInclusao, 103) as data,
		convert(varchar(5), eui.DataInclusao, 114) as hora,
		i.inter_codigo as internacao,
		p.pac_nome as nome,
		p.pac_idade	as idade,
		l.locint_descricao as leito,
		i.inter_datainter as dtinternacao,
		eui.Intercorrencia as Intercorrencia,
		isnull(eui.rascunho,0) as Rascunho,
		prof.prof_nome
from EvolucaoUtiIntercorrencia eui
inner join internacao i on eui.inter_codigo = i.inter_codigo
inner join vwleito l on l.lei_codigo = i.lei_codigo and l.locatend_codigo = i.locatend_leito
inner join paciente p on p.pac_codigo = i.pac_codigo 
inner join Profissional prof on prof.prof_codigo = eui.prof_codigo and prof.locatend_codigo = eui.locatend_codigo
where eui.evouti_codigo = isnull(@evouti_codigo, eui.evouti_codigo)
and   eui.inter_codigo = isnull(@inter_codigo, eui.inter_codigo)

end
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Altering [dbo].[ksp_CNES_unidade]...';


GO
ALTER PROCEDURE [dbo].[ksp_CNES_unidade]
@Codigo CHAR (4), @UNID_DESCRICAO VARCHAR (50)=NULL, @NIV_CODIGO CHAR (3)=NULL, @FLU_CODIGO CHAR (3)=NULL, @TUR_CODIGO CHAR (3)=NULL, @CEP_SEQUENCIAL CHAR (6)=NULL, @TIPPREST_CODIGO CHAR (3)=NULL, @NAT_CODIGO CHAR (2)=NULL, @TPUNID_CODIGO CHAR (3)=NULL, @UNID_SIGLA CHAR (10)=NULL, @UNID_CGC CHAR (14)=NULL, @UNID_DIRETOR_CLINICO VARCHAR (50)=NULL, @UNID_DIRETOR_CPF CHAR (11)=NULL, @UNID_ORGAO_RECEBEDOR_AIH CHAR (10)=NULL, @UNID_ENDERECO_NUM CHAR (5)=NULL, @UNID_ENDERECO_COMPL VARCHAR (20)=NULL, @UNID_TELEFONE VARCHAR (20)=NULL, @UNID_EMAIL VARCHAR (30)=NULL, @UNID_FIDEPS INT=NULL, @UNID_DISTRITO_SANITARIO CHAR (3)=NULL, @UNID_REGIAO CHAR (3)=NULL, @unid_banco CHAR (3)=NULL, @unid_agencia CHAR (6)=NULL, @unid_contacorrente CHAR (15)=NULL, @unid_contrato CHAR (8)=NULL, @unid_DtPublicacao SMALLDATETIME=null, @unid_DtPreenchimento SMALLDATETIME=null, @unid_quant_consultorio INT=-1, @unid_quant_odonto INT=-1, @unid_quant_gesso INT=-1, @unid_quant_peqcirurgia INT=-1, @unid_quant_cirurgiaamb INT=-1, @UNID_PESSOA CHAR (1)=NULL, @UNID_IR CHAR (1)=NULL, @UNID_codigoUPS CHAR (7)=NULL, @Unid_CODIGOCNES CHAR (7)=NULL, @Unid_Orgao_Local VARCHAR (10)=NULL, @Unid_Tipo_UTI CHAR (1)=NULL, @Unid_taxa_cesaria INT=-1, @Unid_critica_Aih_Gravacao CHAR (1)=NULL, @Unid_Competencia_Anterior CHAR (1)=NULL, @Unid_Competencia_Atual SMALLDATETIME=NULL, @Unid_Teto_Competencia FLOAT=-1, @UNID_CGC_FATURAMENTO CHAR (14)=NULL, @UNID_DIRETOR_CNS CHAR (15)=NULL, @UNID_PATH_XML VARCHAR (100)=NULL, @UNID_IMAGEM VARCHAR (10)=NULL, @TIPOPESSOA_COD CHAR (1)=NULL, @unid_UsaCentral CHAR (1)='N', @idt_USADEMANDAREPRIMIDA CHAR (1)='N', @unid_param_movPront_Amb CHAR (3)=NULL, @unid_Param_MovPront_Int CHAR (3)=NULL, @Unid_Param_MovPront_Adm CHAR (3)=NULL, @Unid_Param_Guarda_movPront CHAR (4)=NULL, @UNID_USAPACTO CHAR (1)=NULL, @unid_UsaInfMilitar CHAR (1)='N', @unid_UsaNumObito CHAR (1)='N', @Unid_PrefixoRN VARCHAR (20)='FILHO DE', @unid_Razao_Social_Cartorio VARCHAR (20)=NULL, @unid_usa_meses SMALLINT=1, @MAN_CNPJ VARCHAR (14)=NULL, @UNID_CODIGO_EXP VARCHAR (31)=NULL, @TIPSITUNI_CODIGO CHAR (1)=NULL, @UNID_CPF CHAR (11)=NULL, @UNID_CODIGO_SIASUS CHAR (10)=NULL, @UNID_CODIGO_OUTROS_SIASUS CHAR (10)=NULL, @Unid_NOME_FANTASIA VARCHAR (60)=NULL, @REGSAU_CODIGO CHAR (3)=NULL, @MICREG_CODIGO CHAR (6)=NULL, @MODASS_CODIGO CHAR (4)=NULL, @UNID_FAX VARCHAR (60)=NULL, @UNID_REGISTRO_CONSELHO VARCHAR (60)=NULL, @ESFADM_CODIGO CHAR (2)=NULL, @NATORG_CODIGO CHAR (2)=NULL, @RETTRI_CODIGO CHAR (2)=NULL, @ATIENS_CODIGO CHAR (2)=NULL, @NIVHIE_CODIGO CHAR (3)=NULL, @FLUCLI_CODIGO CHAR (3)=NULL, @UNID_IND_VINCULOSUS CHAR (1)=NULL, @UNID_NUMERO_ALVARA VARCHAR (50)=NULL, @UNID_DATA_EXPEDICAO DATETIME=NULL, @UNID_ORGAO_EXP_ALVARA VARCHAR (50)=null, @UNID_IND_AVALIACAO_PNASS CHAR (1)=NULL, @UNID_DATA_AVALIACAO_PNASS DATETIME=NULL, @UNID_IND_ACREDITACAO CHAR (1)=NULL, @UNID_DATA_ACREDITACAO DATETIME=null, @ACRAVA_CODIGO CHAR (1)=NULL, @UNID_IND_PROGRAMA_REESTRUTURACAO CHAR (1)=NULL, @UNID_IND_EXECUTADO_TERCEIRO CHAR (1)=NULL, @TIPATN_CODIGO VARCHAR (50)=NULL, @NIVGES_CODIGO VARCHAR (50)=NULL, @UNID_DDD VARCHAR (50)=NULL, @tp_pesq SMALLINT, @opcao SMALLINT, @Proximo NUMERIC (9)=NULL, @Urg_Atend_Pediatrico INT=0, @Urg_Atend_Masculino INT=0, @Urg_Atend_Feminino INT=0, @Urg_Atend_Indiferenciado INT=0, @Urg_Obs_Pediatrico INT=0, @Urg_Obs_Pediatrico_Leitos INT=0, @Urg_Obs_Masculino INT=0, @Urg_Obs_Masculino_Leitos INT=0, @Urg_Obs_Feminino INT=0, @Urg_Obs_Feminino_Leitos INT=0, @Urg_Obs_Indif INT=0, @Urg_Obs_Indif_Leitos INT=0, @Urg_Odont INT=0, @Urg_Odont_Equipos INT=0, @Urg_Higiene INT=0, @Urg_Gesso INT=0, @Urg_Curativo INT=0, @Urg_Peq_Cirurgia INT=0, @Urg_Cons_Medicos INT=0, @Amb_ClinBasicas INT=0, @Amb_ClinEspecializada INT=0, @Amb_ClinIndiferenciado INT=0, @Amb_OutrosConsultorios INT=0, @Amb_RepFeminino INT=0, @Amb_RepFemininoLeitos INT=0, @Amb_RepMasculino INT=0, @Amb_RepMasculinoLeitos INT=0, @Amb_RepPediatrico INT=0, @Amb_RepPediatricoLeitos INT=0, @Amb_RepIndiferenciado INT=0, @Amb_RepIndiferenciadoLeitos INT=0, @Amb_OdontoConsultorios INT=0, @Amb_PequenaCirurgia INT=0, @Amb_Enfermagem INT=0, @Amb_Imunizacao INT=0, @Amb_Nebulizacao INT=0, @Amb_SalaGesso INT=0, @Amb_SalaCurativo INT=0, @Amb_CirurgiaAmbulatorial INT=0, @Hos_CirSalaCirurgia INT=0, @Hos_CirRecuperacao INT=0, @Hos_CirRecuperacaoLeitos INT=0, @Hos_CirSalaCirurgiaAmb INT=0, @Hos_ObsPreParto INT=0, @Hos_ObsPrePartoLeitos INT=0, @Hos_ObsPartoNormal INT=0, @Hos_ObsSalaCuretagem INT=0, @Hos_ObsSalaCirurgia INT=0, @Hos_NeoRNNormal INT=0, @Hos_NeoRNpatologico INT=0, @Hos_NeoLeitos INT=0, @TipAteAti_codigo VARCHAR (100)=NULL, @TipAte_codigo VARCHAR (100)=NULL, @Nivel_codigo VARCHAR (100)=NULL, @tipatnpre_codigo VARCHAR (100)=NULL, @TipCon_codigo VARCHAR (100)=NULL, @VincContratoMunicipal VARCHAR (20)=NULL, @VincDataPubMunicipal DATETIME=NULL, @VincContratoEstadual VARCHAR (20)=NULL, @VincDataPubEstadual DATETIME=NULL, @VincBanco CHAR (3)=NULL, @VincAgencia CHAR (5)=NULL, @VincConta VARCHAR (14)=NULL, @VincAlvara VARCHAR (50)=NULL, @VincExpedicao DATETIME=NULL, @VincOrgao VARCHAR (50)=NULL, @Comissao_codigo VARCHAR (50)=NULL, @QuiRadSalaSimulacao SMALLINT=0, @QuiRadSalaPlanejamento SMALLINT=0, @QuiRadSalaArmFontes SMALLINT=0, @QuiRadSalaConfMascara SMALLINT=0, @QuiRadSalaMolde SMALLINT=0, @QuiRadSalaBlocoPers SMALLINT=0, @QuiQuiSalaArmazenamento SMALLINT=0, @QuiQuiSalaPreparo SMALLINT=0, @QuiQuiSalaCurtaDuracao SMALLINT=0, @QuiQuiSalaLongaDuracao SMALLINT=0, @QuiQuiSalaCapela SMALLINT=0, @QuiRadEqpSimulacao SMALLINT=0, @QuiRadEqpAte6MeV SMALLINT=0, @QuiRadEqpMaior6MeVSem SMALLINT=0, @QuiRadEqpMaior6MeVCom SMALLINT=0, @QuiRadEqpOrto_10_50 SMALLINT=0, @QuiRadEqpOrto_50_150 SMALLINT=0, @QuiRadEqpOrto_150_500 SMALLINT=0, @QuiRadEqpCobalto SMALLINT=0, @QuiRadEqpBraquiBaixa SMALLINT=0, @QuiRadEqpBraquiMedia SMALLINT=0, @QuiRadEqpBraquiAlta SMALLINT=0, @QuiRadEqpMonitorArea SMALLINT=0, @QuiRadEqpMonitorIndividual SMALLINT=0, @QuiRadEqpSistema SMALLINT=0, @QuiRadEqpDosimetro SMALLINT=0, @QuiRadEqpFonteSelada SMALLINT=0, @SerRef_codigo VARCHAR (100)=NULL, @QuiSerCPF VARCHAR (100)=NULL, @QuiSerCNPJ VARCHAR (100)=NULL, @QuiSerNome VARCHAR (3000)=NULL, @QuiSerMunicipio VARCHAR (100)=NULL, @QuiFormalizacao_codigo VARCHAR (100)=NULL, @QuiFormalizacaoCPF VARCHAR (100)=NULL, @QuiFormalizacaoNome VARCHAR (3000)=NULL, @Unid_Integracao_Organograma CHAR (1)=NULL, @unid_limite_apresentacao_aih INT=NULL, @subTipoUnidade_codigo CHAR (4)=NULL, @DiasRetroSolic INT=NULL, @Diasconsulta INT=NULL, @lista_eventos_unidade VARCHAR (100)=NULL, @atendimento_encerrado CHAR (1)='N', @unid_integracao_bombeiro CHAR (1)=NULL, @unid_integracao_rh CHAR (1)=NULL, @unid_usa_acolhimento CHAR (1)=NULL, @unid_modelo_risco CHAR (4)=NULL, @unid_etapa_classificacao CHAR (1)=NULL, @unid_encaminhamento_ambulatorial CHAR (1)='N', @unid_gera_prontuario CHAR (1)='S', @fluxo_atendimento CHAR (1)=NULL, @unidade_municipioCNES VARCHAR (50)=NULL, @unid_param_IMPRIME_DECLARACOES_A5 VARCHAR (4)=NULL, @recidiva VARCHAR (4)=NULL, @unid_param_Unificacao_de_Boletim VARCHAR (4)=NULL, @unid_Usa_Encaminhamento CHAR (1)=NULL, @cor_Encainhamento CHAR (1)=NULL, @unid_Radiologia_Entrega_Protocolo CHAR (1)='N', @unid_usa_ambulancia CHAR (1)='N', @unid_Usa_SISPRENATAL CHAR (1)=NULL, @unid_Usa_Orientacao CHAR (1)=NULL, @Usa_BaixaBoletimSimplificado CHAR (1)=NULL, @unid_param_IMPRIME_Paciente CHAR (1)=NULL, @CBO_Medico_Radiologia VARCHAR (500)=NULL, @nao_usa_vinculo_internacao CHAR (1)=null, @unid_LocalImpressoraIdentificacao VARCHAR (50)=NULL, @No_Imp_Pulseira_Identificacao VARCHAR (50)=NULL, @UsaProtocoloDengue CHAR (1)=NULL, @EnvioSMS_Dias INT=NULL, @filaDeEspera CHAR (1)=NULL, @SinalAlertaFilaEspera VARCHAR (50)=null, @Cnes_Unidade_Faturamento VARCHAR (50)=null, @Usa_Cid_Secundario_Novo CHAR (1)=null, @intervalo_internacao_consolidada INT=null, @Cep_Automatico CHAR (1)=null, @Usa_PriorizacaoIdosoFilaEspera char(1) = null, @ParbolCheckCNS bit = 0 , @ParbolCheckCPF bit = 0, @Usa_PrescricaoEletronica CHAR(1) = null, @FaturarExamesPartirPedidoRadiologia char(1) = 'N',
@ProtocoloCovid bit = 0
AS
SET NOCOUNT ON 
 
 Declare @sql  Varchar(8000)                
 Declare @par  varchar(255)                
 Declare @var1 varchar(255)                
 declare @UltCodigo char(10)                
                
 DECLARE @ARRAY1 VARCHAR(3000)                
 DECLARE @ARRAY2 VARCHAR(3000)                
 DECLARE @ARRAY3 VARCHAR(3000)                
 DECLARE @ARRAY4 VARCHAR(3000)                
 DECLARE @ARRAY5 VARCHAR(3000)                
 DECLARE @ARRAY6 VARCHAR(3000)                
 DECLARE @DELIMITADOR CHAR(1)                
                
 DECLARE @S1 CHAR(3)                
 DECLARE @S2 CHAR(1)                
 DECLARE @S3 CHAR(1)                
 DECLARE @S4 CHAR(2)                
 DECLARE @S5 CHAR(1)                
 DECLARE @S7 CHAR(7)                
 DECLARE @S8 CHAR(4)                
 DECLARE @S11 CHAR(11)                
 DECLARE @S14 CHAR(14)                
 DECLARE @S60 CHAR(60)                
 DECLARE @Erro int                
 SET @Erro = 0                

--ksp_CNES_Unidade @CODIGO =  NULL , @UNID_DESCRICAO = '%%%', @NIV_CODIGO =  NULL , @FLU_CODIGO =  NULL , @TUR_CODIGO =  NULL , @CEP_SEQUENCIAL =  NULL , @TIPPREST_CODIGO =  NULL , @NAT_CODIGO =  NULL , @TPUNID_CODIGO =  NULL , @UNID_SIGLA =  NULL , @UNID_CGC =  NULL , @UNID_DIRETOR_CLINICO =  NULL , @UNID_DIRETOR_CPF =  NULL , @UNID_ORGAO_RECEBEDOR_AIH =  NULL , @UNID_ENDERECO_NUM =  NULL , @UNID_ENDERECO_COMPL =  NULL , @UNID_TELEFONE =  NULL , @UNID_EMAIL =  NULL , @UNID_FIDEPS =  NULL , @UNID_REGIAO =  NULL , @UNID_BANCO =  NULL , @UNID_AGENCIA =  NULL , @UNID_CONTACORRENTE =  NULL , @UNID_CONTRATO =  NULL , @UNID_DTPUBLICACAO =  NULL , @UNID_DTPREENCHIMENTO =  NULL , @UNID_QUANT_CONSULTORIO =  NULL , @UNID_QUANT_ODONTO =  NULL , @UNID_QUANT_GESSO =  NULL , @UNID_QUANT_PEQCIRURGIA =  NULL , @UNID_QUANT_CIRURGIAAMB =  NULL , @UNID_PESSOA =  NULL , @UNID_IR =  NULL , @UNID_CODIGOUPS =  NULL , @UNID_CODIGOCNES =  NULL , @UNID_ORGAO_LOCAL =  NULL , @UNID_TIPO_UTI =  NULL , @UNID_TAXA_CESARIA =  NULL , @UNID_CRITICA_AIH_GRAVACAO =  NULL , @UNID_COMPETENCIA_ANTERIOR =  NULL , @UNID_COMPETENCIA_ATUAL =  NULL , @UNID_TETO_COMPETENCIA =  NULL , @UNID_CGC_FATURAMENTO =  NULL , @UNID_DIRETOR_CNS =  NULL , @UNID_PATH_XML =  NULL , @UNID_IMAGEM =  NULL , @TIPOPESSOA_COD =  NULL , @UNID_USACENTRAL =  NULL , @IDT_USADEMANDAREPRIMIDA =  NULL , @UNID_PARAM_MOVPRONT_AMB =  NULL , @UNID_PARAM_MOVPRONT_INT =  NULL , @UNID_PARAM_MOVPRONT_ADM =  NULL , @UNID_PARAM_GUARDA_MOVPRONT =  NULL , @UNID_USAPACTO =  NULL , @UNID_USAINFMILITAR =  NULL , @UNID_USANUMOBITO =  NULL , @UNID_PREFIXORN =  NULL , @UNID_RAZAO_SOCIAL_CARTORIO =  NULL , @UNID_USA_MESES = 0, @MAN_CNPJ =  NULL , @UNID_CODIGO_EXP =  NULL , @TIPSITUNI_CODIGO =  NULL , @UNID_CPF =  NULL , @UNID_NOME_FANTASIA =  NULL , @UNID_FAX =  NULL , @UNID_REGISTRO_CONSELHO =  NULL , @ESFADM_CODIGO =  NULL , @NATORG_CODIGO =  NULL , @RETTRI_CODIGO =  NULL , @ATIENS_CODIGO =  NULL , @NIVHIE_CODIGO =  NULL , @FLUCLI_CODIGO =  NULL , @UNID_IND_VINCULOSUS =  NULL , @UNID_NUMERO_ALVARA =  NULL , @UNID_DATA_EXPEDICAO =  NULL , @UNID_ORGAO_EXP_ALVARA =  NULL , @UNID_IND_AVALIACAO_PNASS =  NULL , @UNID_DATA_AVALIACAO_PNASS =  NULL , @UNID_IND_ACREDITACAO =  NULL , @UNID_DATA_ACREDITACAO =  NULL , @ACRAVA_CODIGO =  NULL , @UNID_IND_EXECUTADO_TERCEIRO =  NULL , @TIPATN_CODIGO =  NULL , @UNID_DDD =  NULL , @tp_pesq = 1, @opcao = 0, @PROXIMO = 1, @Urg_Atend_Pediatrico =  NULL , @Urg_Atend_Masculino =  NULL , @Urg_Atend_Feminino =  NULL , @Urg_Atend_Indiferenciado =  NULL , @Urg_Obs_Pediatrico =  NULL , @Urg_Obs_Pediatrico_Leitos =  NULL , @Urg_Obs_Masculino =  NULL , @Urg_Obs_Masculino_Leitos =  NULL , @Urg_Obs_Feminino =  NULL , @Urg_Obs_Feminino_Leitos =  NULL , @Urg_Obs_Indif =  NULL , @Urg_Obs_Indif_Leitos =  NULL , @Urg_Odont =  NULL , @Urg_Odont_Equipos =  NULL , @Urg_Higiene =  NULL , @Urg_Gesso =  NULL , @Urg_Curativo =  NULL , @Urg_Peq_Cirurgia =  NULL , @Urg_Cons_Medicos =  NULL , @Amb_ClinBasicas =  NULL , @Amb_ClinEspecializada =  NULL , @Amb_ClinIndiferenciado =  NULL , @Amb_OutrosConsultorios =  NULL , @Amb_RepFeminino =  NULL , @Amb_RepFemininoLeitos =  NULL , @Amb_RepMasculino =  NULL , @Amb_RepMasculinoLeitos =  NULL , @Amb_RepPediatrico =  NULL , @Amb_RepPediatricoLeitos =  NULL , @Amb_RepIndiferenciado =  NULL , @Amb_RepIndiferenciadoLeitos =  NULL , @Amb_OdontoConsultorios =  NULL , @Amb_PequenaCirurgia =  NULL , @Amb_Enfermagem =  NULL , @Amb_Imunizacao =  NULL , @Amb_Nebulizacao =  NULL , @Amb_SalaGesso =  NULL , @Amb_SalaCurativo =  NULL , @Amb_CirurgiaAmbulatorial =  NULL , @Hos_CirSalaCirurgia =  NULL , @Hos_CirRecuperacao =  NULL , @Hos_CirRecuperacaoLeitos =  NULL , @Hos_CirSalaCirurgiaAmb =  NULL , @Hos_ObsPreParto =  NULL , @Hos_ObsPrePartoLeitos =  NULL , @Hos_ObsPartoNormal =  NULL , @Hos_ObsSalaCuretagem =  NULL , @Hos_ObsSalaCirurgia =  NULL , @Hos_NeoRNNormal =  NULL , @Hos_NeoRNpatologico =  NULL , @Hos_NeoLeitos =  NULL , @TIPATEATI_CODIGO =  NULL , @TIPATE_CODIGO =  NULL , @NIVEL_CODIGO =  NULL , @TIPATNPRE_CODIGO =  NULL , @TIPCON_CODIGO =  NULL , @VincContratoMunicipal =  NULL , @VincDataPubMunicipal =  NULL , @VincContratoEstadual =  NULL , @VincDataPubEstadual =  NULL , @VincBanco =  NULL , @VincAgencia =  NULL , @VincConta =  NULL , @VincAlvara =  NULL , @VincExpedicao =  NULL , @Comissao_codigo =  NULL , @QuiRadSalaSimulacao =  NULL , @QuiRadSalaPlanejamento =  NULL , @QuiRadSalaArmFontes =  NULL , @QuiRadSalaConfMascara =  NULL , @QuiRadSalaMolde =  NULL , @QuiRadSalaBlocoPers =  NULL , @QuiQuiSalaArmazenamento =  NULL , @QuiQuiSalaPreparo =  NULL , @QuiQuiSalaCurtaDuracao =  NULL , @QuiQuiSalaLongaDuracao =  NULL , @QuiQuiSalaCapela =  NULL , @QuiRadEqpSimulacao =  NULL , @QuiRadEqpAte6MeV =  NULL , @QuiRadEqpMaior6MeVSem =  NULL , @QuiRadEqpMaior6MeVCom =  NULL , @QuiRadEqpOrto_10_50 =  NULL , @QuiRadEqpOrto_50_150 =  NULL , @QuiRadEqpOrto_150_500 =  NULL , @QuiRadEqpCobalto =  NULL , @QuiRadEqpBraquiBaixa =  NULL , @QuiRadEqpBraquiMedia =  NULL , @QuiRadEqpBraquiAlta =  NULL , @QuiRadEqpMonitorArea =  NULL , @QuiRadEqpMonitorIndividual =  NULL , @QuiRadEqpSistema =  NULL , @QuiRadEqpDosimetro =  NULL , @QuiRadEqpFonteSelada =  NULL , @SerRef_codigo =  NULL , @QuiSerCPF =  NULL , @QuiSerCNPJ =  NULL , @QuiSerNome =  NULL , @QuiSerMunicipio =  NULL , @QuiFormalizacao_codigo =  NULL , @QuiFormalizacaoCPF =  NULL , @QuiFormalizacaoNome =  NULL , @UNID_LIMITE_APRESENTACAO_AIH =  NULL , @subTipoUnidade_codigo =  NULL , @atendimento_encerrado =  NULL , @unid_integracao_bombeiro =  NULL                

----------------------------- Selecao para Carga dos Dados ------------------------------------                
                  
if @opcao = 0                
  begin                
    Execute ksp_controle_sequencial @codigo, 'Obito_Numero', '19000101', 1, 8, 1, @NovoCodigo = @UltCodigo OUTPUT                
                
 set @Sql = 'SELECT '                
 set @sql = @sql + ' u.unid_data,'       
 set @sql = @sql + ' u.unid_codigo,'                 
 set @sql = @sql + ' u.unid_descricao,'                
 set @sql = @sql + ' u.unid_sigla,'                
 set @sql = @sql + ' u.unid_cgc,'
 set @sql = @sql + ' u.unid_diretor_clinico,'                
 set @sql = @sql + ' u.unid_diretor_cpf,'                
 set @sql = @sql + ' u.unid_orgao_recebedor_aih,'                
 set @sql = @sql + ' u.unid_endereco_num,'                
 set @sql = @sql + ' u.unid_endereco_compl,'                
 set @sql = @sql + ' u.unid_telefone,'                
 set @sql = @sql + ' u.unid_email,'                
 set @sql = @sql + ' u.unid_fideps,'                
 set @sql = @sql + ' u.nat_codigo,'                
 set @sql = @sql + ' n.nat_descricao,'                
 set @sql = @sql + ' u.cep_sequencial,'                
 set @sql = @sql + ' u.niv_codigo,'                
 set @sql = @sql + ' nh.niv_descricao,'                
 set @sql = @sql + ' u.flu_codigo,'                
 set @sql = @sql + ' f.flu_descricao,'                
 set @sql = @sql + ' u.tur_codigo,'                
 set @sql = @sql + ' t.tur_descricao,'                
 set @sql = @sql + ' u.tipprest_codigo,'                
 set @sql = @sql + ' tp.tipprest_descricao,'                
 set @sql = @sql + ' u.tpunid_codigo,'                
 set @sql = @sql + ' tu.tpunid_descricao,'                
 set @sql = @sql + ' u.unid_distrito_sanitario,'                
 set @sql = @sql + ' u.unid_regiao,'                
 set @sql = @sql + ' u.unid_banco,'                
 set @sql = @sql + ' u.unid_agencia,'                
 set @sql = @sql + ' u.unid_contacorrente,'                
 set @sql = @sql + ' u.unid_contrato,'                
 set @sql = @sql + ' u.unid_publicacao,'                
 set @sql = @sql + ' u.unid_preenchimento,'                
 set @sql = @sql + ' u.unid_quant_consultorio,'                
 set @sql = @sql + ' u.unid_quant_odonto,'                
 set @sql = @sql + ' u.unid_quant_gesso,'                
 set @sql = @sql + ' u.unid_quant_peqcirurgia,'                
 set @sql = @sql + ' u.unid_quant_cirurgiaamb,'                
 set @sql = @sql + ' u.unid_pessoa,'                
 set @sql = @sql + ' u.unid_ir,'                
 set @sql = @sql + ' u.unid_codigoups,'                
 set @sql = @sql + ' c.cep_logradouro,'                
 set @sql = @sql + ' m.mun_descricao,'                
 set @sql = @sql + ' m.UF_CODIGO,'            
 set @sql = @sql + ' b.bai_descricao,'                
 set @sql = @sql + ' c.cep_cep,'                
 --set @sql = @sql + ' u.unid_orgao_local,'                
 set @sql = @sql + ' CASE WHEN puf.UNID_ORGAO_LOCAL is null THEN u.UNID_ORGAO_LOCAL ELSE puf.UNID_ORGAO_LOCAL END unid_orgao_local ,'                
 --set @sql = @sql + ' u.unid_tipo_uti,'
 set @sql = @sql + ' CASE WHEN puf.unid_tipo_uti is null THEN u.unid_tipo_uti else puf.unid_tipo_uti END unid_tipo_uti ,'                  
 --set @sql = @sql + ' u.unid_taxa_cesaria,'                
 set @sql = @sql + ' CASE WHEN puf.unid_taxa_cesaria is null THEN u.unid_taxa_cesaria else puf.unid_taxa_cesaria END unid_taxa_cesaria ,'                  
 --set @sql = @sql + ' u.unid_critica_aih_gravacao,'
 set @sql = @sql + ' CASE WHEN puf.unid_critica_aih_gravacao is null THEN u.unid_critica_aih_gravacao else puf.unid_critica_aih_gravacao END unid_critica_aih_gravacao ,'                
 --set @sql = @sql + ' U.UNID_COMPETENCIA_ANTERIOR, '  
 set @sql = @sql + ' CASE WHEN puf.UNID_COMPETENCIA_ANTERIOR is null THEN U.UNID_COMPETENCIA_ANTERIOR else puf.UNID_COMPETENCIA_ANTERIOR END UNID_COMPETENCIA_ANTERIOR ,'                                
 --set @sql = @sql + ' U.UNID_COMPETENCIA_ATUAL,'                
 set @sql = @sql + ' CASE WHEN puf.UNID_COMPETENCIA_ATUAL is null THEN U.UNID_COMPETENCIA_ATUAL else puf.UNID_COMPETENCIA_ATUAL END UNID_COMPETENCIA_ATUAL ,'                                
 --set @sql = @sql + ' U.UNID_TETO_COMPETENCIA,'                
 set @sql = @sql + ' CASE WHEN puf.UNID_TETO_COMPETENCIA is null THEN U.UNID_TETO_COMPETENCIA else puf.UNID_TETO_COMPETENCIA END UNID_TETO_COMPETENCIA ,'                                
 --set @sql = @sql + ' u.unid_cgc_faturamento,'
 set @sql = @sql + ' CASE WHEN puf.unid_cgc IS NULL THEN u.unid_cgc_faturamento ELSE Puf.unid_cgc END AS UNID_CGC_FATURAMENTO,'
 set @sql = @sql + ' m.mun_codigo,'                
 set @sql = @sql + ' b.bai_codigo, u.unid_path_xml,'                
 set @sql = @sql + ' u.unid_UsaCentral,'                
 set @sql = @sql + ' u.idt_UsaDemandaReprimida,'                
 set @sql = @sql + ' u.unid_param_movpront_amb,'                
 set @sql = @sql + ' u.unid_param_movpront_int,'                
 set @sql = @sql + ' u.unid_param_movpront_adm,'                
 set @sql = @sql + ' u.unid_param_guarda_movpront,'                
 set @sql = @sql + ' u.unid_UsaInfMilitar,'                
 set @sql = @sql + ' u.unid_UsaNumObito,' + '''' + ISNULL(@UltCodigo,'')  + ''', u.unid_PrefixoRN, '                
 --set @sql = @sql + ' u.unid_Razao_Social_Cartorio,'                
 set @sql = @sql + ' CASE WHEN puf.unid_Razao_Social_Cartorio is null THEN u.unid_Razao_Social_Cartorio ELSE puf.unid_Razao_Social_Cartorio END AS unid_Razao_Social_Cartorio,'                
 set @sql = @sql + ' u.unid_usa_meses,'                
 set @sql = @sql + ' u.Man_CNPJ,u.unid_Codigo_Exp,'                
 set @sql = @sql + ' u.TipSitUni_codigo,'                
 set @sql = @sql + ' ts.TipSitUni_descricao,'                
 set @sql = @sql + ' u.unid_CPF,'                
 set @sql = @sql + ' u.unid_CodigoCNES,'                
 set @sql = @sql + ' u.unid_codigo_SIASUS,'                
 set @sql = @sql + ' u.unid_codigo_Outros_SIASUS,'                
 set @sql = @sql + ' u.unid_nome_fantasia,'                
 set @sql = @sql + ' u.RegSau_codigo,'                
 set @sql = @sql + ' u.MicReg_codigo,'                
 set @sql = @sql + ' u.ModAss_codigo,'                
 set @sql = @sql + ' u.RetTri_codigo,'                
 set @sql = @sql + ' u.NatOrg_codigo,'                
 set @sql = @sql + ' u.RetTri_codigo,'                
 set @sql = @sql + ' u.AtiEns_codigo,'                
 set @sql = @sql + ' u.NivHie_codigo,'                
 set @sql = @sql + ' u.FluCli_codigo,'                
 set @sql = @sql + ' u.EsfAdm_codigo,'                
 set @sql = @sql + ' rs.RegSau_descricao,'                
 set @sql = @sql + ' mr.MicReg_descricao,'                
 set @sql = @sql + ' ma.ModAss_descricao,'                
 set @sql = @sql + ' u.Unid_fax,'                
 set @sql = @sql + ' u.unid_registro_conselho,'                
 set @sql = @sql + ' ea.EsfAdm_descricao,'                
 set @sql = @sql + ' no.NatOrg_descricao,'                
 set @sql = @sql + ' rt.RetTri_descricao,'                
 set @sql = @sql + ' ae.AtiEns_descricao,'                
 set @sql = @sql + ' nv.NivHie_descricao,'                
 set @sql = @sql + ' fc.FluCli_descricao,'                
 set @sql = @sql + ' u.unid_ind_vinculoSUS,'                
 set @sql = @sql + ' u.unid_numero_alvara,'                
 set @sql = @sql + ' u.Unid_DDD,'                
 set @sql = @sql + ' u.unid_data_expedicao,'                
 set @sql = @sql + ' u.unid_orgao_exp_alvara,'                
 set @sql = @sql + ' u.unid_ind_avaliacao_PNASS,'                
 set @sql = @sql + ' u.unid_data_avaliacao_PNASS,'                
 set @sql = @sql + ' u.unid_ind_acreditacao,'                
 set @sql = @sql + ' u.Unid_Fax,'                
 set @sql = @sql + ' u.unid_data_acreditacao,'                
 set @sql = @sql + ' U.AcrAva_CODIGO,'                
 set @sql = @sql + ' aa.AcrAva_descricao,'                
 set @sql = @sql + ' u.unid_ind_executado_terceiro,'                
 set @sql = @sql + ' ta.TipAtn_descricao,'                
 set @sql = @sql + ' u.NivGes_codigo,'                
 set @sql = @sql + ' ng.NivGes_descricao,'                
 set @sql = @sql + ' m.cod_ibge AS CodigoIBGE,'                
 set @sql = @sql + ' u.unid_integra_organograma AS Unid_Integra_Organograma,'                
 --set @sql = @sql + ' u.unid_limite_apresentacao_aih,'    
 set @sql = @sql + ' CASE WHEN puf.unid_limite_apresentacao_aih is null THEN u.unid_limite_apresentacao_aih ELSE puf.unid_limite_apresentacao_aih END AS unid_limite_apresentacao_aih,'
 set @sql = @sql + ' u.subtipo_codigo,'                
 --set @sql = @sql + ' u.atendimento_encerrado,'  
 set @sql = @sql + ' CASE WHEN puf.atendimento_encerrado is null THEN u.atendimento_encerrado ELSE puf.atendimento_encerrado END AS atendimento_encerrado,'
 SET @sql = @sql + ' u.unid_integracao_bombeiro,'                
 SET @sql = @sql + ' u.unid_usa_acolhimento,'            
 SET @sql = @sql + ' u.unid_encaminhamento_ambulatorial,'  
 SET @sql = @sql + ' u.unid_ind_programa_reestruturacao, '     
 SET @sql = @sql +  'u.unid_param_IMPRIME_DECLARACOES_A5, '               
 SET @sql = @sql + ' u.RECIDIVA, '      
 SET @sql = @sql + ' u.unid_param_Unificacao_de_Boletim, '                   
 SET @sql = @sql + ' u.unid_Usa_Encaminhamento, '    
 SET @sql = @sql + ' u.cor_Encainhamento, '     
 SET @sql = @sql + ' unid_Radiologia_Entrega_Protocolo, '     
 SET @sql = @sql + ' u.unid_Usa_SISPRENATAL, '
 SET @sql = @sql + ' u.unid_Usa_Orientacao, '
 SET @sql = @sql + ' u.Usa_BaixaBoletimSimplificado, '
 SET @sql = @sql + ' CBO_Medico_Radiologia, '
 SET @sql = @sql + ' u.nao_usa_vinculo_internacao,'
 SET @sql = @sql + ' u.unid_LocalImpressoraIdentificacao,'  
 SET @sql = @sql + ' u.No_Imp_Pulseira_Identificacao, '
 SET @sql = @sql + ' u.UsaProtocoloDengue, u.EnvioSMS_Dias,'
 SET @sql = @sql + ' u.filaDeEspera,'
 SET @sql = @sql + ' u.SinalAlertaFilaEspera,'
 --SET @sql = @sql + ' u.Usa_Cid_Secundario_Novo'
 set @sql = @sql + ' CASE WHEN puf.Usa_Cid_Secundario_Novo is null THEN u.Usa_Cid_Secundario_Novo ELSE puf.Usa_Cid_Secundario_Novo END AS Usa_Cid_Secundario_Novo,'
 set @sql = @sql + ' puf.Intervalo_Internacao_Consolidada,  '
 set @sql = @sql + ' puf.Usa_Cep_Automatico,  '
 set @sql = @sql + ' u.Usa_PriorizacaoIdosoFilaEspera, '
 set @sql = @sql + ' UNID_CNSObrigatorio, '
 set @sql = @sql + ' UNID_CPFObrigatorio,'
 set @sql = @sql + ' u.Usa_PrescricaoEletronica,'
 set @sql = @sql + ' puf.FaturarExamesPartirPedidoRadiologia, '   
 set @sql = @sql + ' isnull(u.ProtocoloCovid, 0) as ProtocoloCovid '   
 
 SET @sql = @sql + ' FROM  unidade u '
 SET @sql = @sql + ' LEFT JOIN natureza_unidade n ON u.nat_codigo = n.nat_codigo  '
 SET @sql = @sql + ' LEFT JOIN tipo_unidade tu ON u.tpunid_codigo = tu.tpunid_codigo '
 SET @sql = @sql + ' LEFT JOIN tipo_prestador tp ON  u.tipprest_codigo = tp.tipprest_codigo '
 SET @sql = @sql + ' LEFT JOIN turno t ON u.tur_codigo = t.tur_codigo  '
 SET @sql = @sql + ' LEFT JOIN fluxo f ON u.flu_codigo = f.flu_codigo '
 SET @sql = @sql + ' LEFT JOIN nivel_hierarquia  nh ON u.niv_codigo = nh.niv_codigo '
 SET @sql = @sql + ' LEFT JOIN cep c ON u.cep_sequencial= c.cep_sequencial '
 SET @sql = @sql + ' LEFT JOIN municipio m ON m.mun_codigo = c.mun_codigo  '
 SET @sql = @sql + ' LEFT JOIN bairro b ON b.bai_codigo = c.bai_codigo  '
 SET @sql = @sql + ' AND  b.mun_codigo = m.mun_codigo '
 SET @sql = @sql + ' LEFT JOIN  CNES_Tipo_Situacao_Unidade ts ON  u.TipSitUni_codigo = ts.TipSitUni_codigo '
 SET @sql = @sql + ' LEFT JOIN  CNES_Regiao_Saude rs ON  u.TipSitUni_codigo = ts.TipSitUni_codigo '
 SET @sql = @sql + ' AND  u.RegSau_codigo = rs.RegSau_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Micro_Regiao mr ON u.MicReg_codigo=mr.MicReg_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Modulo_Assistencial ma ON  u.ModAss_codigo=ma.ModAss_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Esfera_Adm ea ON u.EsfAdm_codigo = ea.EsfAdm_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Natureza_Organizacao no  ON u.NatOrg_codigo = no.NatOrg_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Retencao_Tributaria rt ON  u.RetTri_codigo = rt.RetTri_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Ativ_Ensino ae ON u.AtiEns_codigo = ae.AtiEns_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Nivel_hierarquia nv ON u.NivHie_codigo = nv.NivHie_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Fluxo_Clientela fc ON u.FluCli_codigo = fc.FluCli_codigo  '
 SET @sql = @sql + ' LEFT JOIN CNES_Acreditacao_Avaliacao aa ON  u.AcrAva_codigo = aa.AcrAva_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Tipo_Atendimento ta ON u.TipAtn_codigo = ta.TipAtn_codigo '
 SET @sql = @sql + ' LEFT JOIN CNES_Nivel_Gestao ng ON u.NivGes_codigo = ng.NivGes_codigo  '
 SET @sql = @sql + ' LEFT JOIN CNES_SubTipo_Unidade stu ON u.subTipo_codigo = stu.subTipo_codigo '
 SET @sql = @sql + ' LEFT JOIN PARAMETRO_UNIDADE_FATURAMENTO puf ON u.unid_codigo = puf.unid_codigo '
           
 set @sql = @sql + ' WHERE 1 = 1 AND '   
            
 set @par = ''    
 if @codigo is not null                
    begin                
     Set @var1 = convert(varchar,@codigo)                
     Exec ksp_ParametroPesquisa @var1,' u.unid_codigo',@tp_pesq, 't', @par output                
            --Exec ksp_ParametroPesquisa @var1,'u.unid_codigo',@tp_pesq, 't', @par output                
     set @Erro = @Erro + @@error                
       end                
 if @unid_descricao is not null                
    begin                
     Set @var1 = @unid_descricao                
     Exec ksp_ParametroPesquisa @var1,'u.unid_descricao',@tp_pesq, 't', @par output                
     set @Erro = @Erro + @@error                
    end                
if @Unid_CODIGOCNES is not null            
    begin            
     Set @var1 = @Unid_CODIGOCNES            
     Exec ksp_ParametroPesquisa @var1,'u.unid_CodigoCNES',@tp_pesq, 't', @par output            
     set @Erro = @Erro + @@error            
    end  

-- Caso nenhum parâmetro seja fornecido, evita com que a cláusula where dê erro por não ter
-- nada após o AND...
if @par = ''
	begin
		set @par = '1 = 1'
	end
                
 Set @Sql = @Sql + @par                
  
  --print (@SQL)                
   exec(@Sql)                
   end                
----------------------------Insere Unidade------------------------------                     
if(@opcao = 1)                
 begin                
                
  EXEC ksp_controle_sequencial '0000', 'unidade', '01/01/1900', 1, 4, null, @Codigo output                
  --print @codigo                
                
  INSERT INTO unidade (                 
   unid_descricao,                
   unid_codigo,                
   niv_codigo,                
   flu_codigo,                
   tur_codigo,                
   cep_sequencial,                
   tipprest_codigo,               
   nat_codigo,                
   tpunid_codigo,                
   unid_sigla,                
   unid_cgc,                
   unid_diretor_clinico,                
   unid_diretor_cpf,                
   unid_orgao_recebedor_aih,                
   unid_endereco_num,                
   unid_endereco_compl,                
   unid_telefone,                
   unid_email,                
   unid_fideps,                
   unid_distrito_sanitario,                
   unid_regiao,                
   unid_banco,               
   unid_agencia,                
   unid_contacorrente,                
   unid_contrato,                
   unid_publicacao,                
   unid_preenchimento,                
   unid_quant_consultorio,                
   unid_quant_odonto,                
   unid_quant_gesso,                
   unid_quant_peqcirurgia,                
   unid_quant_cirurgiaamb,                
   unid_pessoa,                
   unid_ir,                
   unid_codigoUPS,                
   unid_codigoCNES,                
   --unid_orgao_local,                
   --unid_tipo_uti,                
   --unid_taxa_cesaria,                
   --unid_critica_aih_gravacao,                
   --unid_competencia_anterior,                
   --unid_competencia_atual,                
   --unid_teto_competencia,                
   --unid_cgc_faturamento,                
   unid_diretor_cns,                
   unid_path_xml,                
   unid_imagem,                
   unid_UsaCentral,            
   idt_UsaDemandaReprimida,                
   unid_param_movpront_amb,                
   unid_param_movpront_int,                
   unid_param_movpront_adm,                
   unid_param_guarda_movpront,                
   Unid_UsaPacto,                
   unid_UsaInfMilitar,                
   unid_UsaNumObito,                
   unid_PrefixoRN,                
   --unid_Razao_Social_Cartorio,                
   unid_usa_meses,                
   Man_CNPJ,                
   Unid_Codigo_Exp,                
   TipSitUni_codigo,                
   Unid_cpf,                
   Unid_codigo_SIASUS,                
   Unid_codigo_Outros_SIASUS,                
   Unid_nome_fantasia,                
   RegSau_codigo,                
   MicReg_codigo,                
   ModAss_codigo,                
   Unid_fax,                
   Unid_registro_conselho,                
   EsfAdm_codigo,                
   NatOrg_codigo,                
   RetTri_codigo,                
   AtiEns_codigo,                
   NivHie_codigo,                
   FluCli_codigo,                
   Unid_ind_vinculoSUS,                
   Unid_numero_alvara,                
   Unid_data_expedicao,                
   Unid_Orgao_Exp_Alvara,                
   Unid_ind_avaliacao_PNASS,                
   Unid_data_avaliacao_PNASS,                
   Unid_ind_acreditacao,                
   Unid_data_acreditacao,                
   AcrAva_codigo,         
   unid_ind_programa_reestruturacao,         
   Unid_ind_executado_terceiro,                
   TipAtn_codigo,                
   NivGes_codigo,                
   Unid_DDD,                
   Unid_Integra_Organograma,                
   unid_limite_apresentacao_aih,                
   subtipo_codigo,                
   atendimento_encerrado,                
   unid_integracao_bombeiro,        
   unid_encaminhamento_ambulatorial,    
   unid_Usa_Encaminhamento,    
   cor_Encainhamento,
   unid_Radiologia_Entrega_Protocolo,
   unid_Usa_SISPRENATAL,
   unid_Usa_Orientacao,
   Usa_BaixaBoletimSimplificado,
   unid_param_IMPRIME_Paciente,
   CBO_Medico_Radiologia,
   nao_usa_vinculo_internacao,
   unid_data,
   UsaProtocoloDengue,
   EnvioSMS_Dias,
   filaDeEspera,
   SinalAlertaFilaEspera,
   Cnes_Unidade_Faturamento,
   Usa_Cid_Secundario_Novo,
   Usa_PriorizacaoIdosoFilaEspera,
   Usa_PrescricaoEletronica
   )                   
   VALUES                
   (                
   @unid_descricao,                
   @codigo,                
   @niv_codigo,                
   @flu_codigo,                
   @tur_codigo,                
   @cep_sequencial,                
   @tipprest_codigo,                
   @nat_codigo,                
   @tpunid_codigo,                
   @unid_sigla,                
   @unid_cgc,                
   @unid_diretor_clinico,                
   @unid_diretor_cpf,                
   @unid_orgao_recebedor_aih,                
   @unid_endereco_num,                
   @unid_endereco_compl,                
   @unid_telefone,                
   @unid_email,                
   @unid_fideps,                
   @unid_distrito_sanitario,                
   @unid_regiao,                
   @unid_banco,                
   @unid_agencia,                
   @unid_contacorrente,                
   @unid_contrato,                
   @unid_DtPublicacao,                
   @unid_DtPreenchimento,                
   @unid_quant_consultorio,                
   @unid_quant_odonto,                
   @unid_quant_gesso,                
   @unid_quant_peqcirurgia,                
   @unid_quant_cirurgiaamb,                
   @unid_pessoa,                
   @unid_ir,                
   @unid_codigoUPS,                
   @unid_codigoCNES,                
   @unid_diretor_cns,                
   @unid_path_xml,                
   @unid_imagem,                
   @unid_UsaCentral,                
   @idt_UsaDemandaReprimida,                
   @unid_param_movpront_amb,                
   @unid_param_movpront_int,                
   @unid_param_movpront_adm,                
   @unid_param_guarda_movpront,                
   @Unid_UsaPacto,                
   @unid_UsaInfMilitar,                
   @unid_UsaNumObito,                
   @unid_PrefixoRN,                
   @unid_usa_meses,                
   @Man_CNPJ,                
   @Unid_Codigo_Exp,                
   @TipSitUni_codigo,                
   @Unid_cpf,                
   @Unid_codigo_SIASUS,                
   @Unid_codigo_Outros_SIASUS,                
   @Unid_nome_fantasia,                
   @RegSau_codigo,                
   @MicReg_codigo,                
   @ModAss_codigo,                
   @Unid_fax,                
   @Unid_registro_conselho,                
   @EsfAdm_codigo,                
   @NatOrg_codigo,                
   @RetTri_codigo,                
   @AtiEns_codigo,                
   @NivHie_codigo,                
   @FluCli_codigo,                
   @Unid_ind_vinculoSUS,                
   @Unid_numero_alvara,                
   @Unid_data_expedicao,                
   @Unid_Orgao_Exp_Alvara,                
   @Unid_ind_avaliacao_PNASS,                
   @Unid_data_avaliacao_PNASS,                
   @Unid_ind_acreditacao,                
   @Unid_data_acreditacao,                
   @AcrAva_codigo,                
   @unid_ind_programa_reestruturacao,  
   @Unid_ind_executado_terceiro,           
   @TipAtn_codigo,                
   @NivGes_codigo,                
   @Unid_DDD,                
   @Unid_Integracao_Organograma,                
   @unid_limite_apresentacao_aih,                
   @subTipoUnidade_codigo,                
   @atendimento_encerrado,                
   @unid_integracao_bombeiro,            
   @unid_encaminhamento_ambulatorial,       
   @unid_Usa_Encaminhamento,    
   @cor_Encainhamento ,
   @unid_Radiologia_Entrega_Protocolo,   
   @unid_Usa_SISPRENATAL,
   @unid_Usa_Orientacao,
   @Usa_BaixaBoletimSimplificado,
   @unid_param_IMPRIME_Paciente,
   @CBO_Medico_Radiologia,
   @nao_usa_vinculo_internacao,
   GETDATE(),
   @UsaProtocoloDengue,
   @EnvioSMS_Dias,
   @filaDeEspera,
   @SinalAlertaFilaEspera,
   @Cnes_Unidade_Faturamento,
   @Usa_Cid_Secundario_Novo,
   @Usa_PriorizacaoIdosoFilaEspera,
   @Usa_PrescricaoEletronica
  )                
                
  -- Obtem Local                
  declare @local char(4)                
  EXEC ksp_controle_sequencial '0000', 'local_atendimento', null, 1, 4, null, @local output                
      set @Erro = @Erro + @@error                
                
  -- Insere na tabela Local_Atendimento                
   INSERT INTO Local_Atendimento                 
    (Locatend_codigo,unid_codigo)                
   VALUES                          
    (@local ,@Codigo)                
                 
   declare @usuario as char(4)                
                   
   select @usuario = usu_codigo                
   from usuario                
   where usu_login = 'ADMINECO'                
   set @Erro = @Erro + @@error                
                  
  -- Insere na tabela Local_Atendimento               
   INSERT INTO usuario_Local_Atendimento                 
    (usu_codigo, Locatend_codigo, unid_codigo)                
   VALUES                          
    (@usuario, @local ,@Codigo)                
   set @Erro = @Erro + @@error                

  -- Insere/Altera parÃ¢metros de RelatÃ³rio - PARAMETRO_RELATORIO_PARAMSET - unidade_parametro_relatorio - parametro_boletim e parametro_unidade_rede
  execute ksp_Unidade_Dados_Fundamentais @Codigo

                  
  -- Insere parâmetros de Relatório                
  /*
   insert into parametro_relatorio (unid_codigo, relatorio_codigo, relatorio_path, relatorio_destino_impressao,                 
      relatorio_confirmacao, relatorio_descricao)                
   select  @codigo, relatorio_codigo, relatorio_path, relatorio_destino_impressao, relatorio_confirmacao, relatorio_descricao                
   from parametro_relatorio                
   where unid_codigo = '0020'                
   set @Erro = @Erro + @@error                */
                
  -- Insere Parâmetros da Prescrição                
--   INSERT INTO PARAMETRO_PRESCRICAO (PARPRESC_VALOR, PARPRESC_DESCRICAO, UNID_CODIGO)                
   --SELECT PARPRESC_VALOR, PARPRESC_DESCRICAO, @Codigo                
   --FROM PARAMETRO_PRESCRICAO                
   --WHERE UNID_CODIGO = '0020'                
   --set @Erro = @Erro + @@error                
    
  -- Insere Controle sequencial                
          insert into controle_sequencial                 
              (unid_codigo, CtrlSeq_Chave, CtrlSeq_Data, CtrlSeq_Proximo)                
          values                
              (@Codigo, 'Obito_Numero', '19000101', @Proximo)                
   select @Codigo                
   set @Erro = @Erro + @@error                
                
  -- Insere na Tabela Instalacao Fisica Unidade                
   insert into CNES_Instalacao_Fisica_Unidade
   (
		Unid_codigo,
		InsFis_codigo,
		InsFisAss_qtde,
		InsFisAss_num_leitos,
		InsFisAss_datAtu  
   )                
   select 
		@codigo,
		InsFis_codigo,
		0,
		0,
		getDate()                
   from CNES_Instalacao_Fisica;                
   set @Erro = @Erro + @@error                
                
  -- Atualiza a Tabela Instalacao Fisica Unidade                
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Atend_Pediatrico,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '01'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Atend_Masculino,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '02'               
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Atend_Feminino,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '03'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Atend_Indiferenciado,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '04'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Obs_Pediatrico,                
       InsFisAss_num_leitos = @Urg_Obs_Pediatrico_Leitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '05'                
   set @Erro = @Erro + @@error                
                   
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Obs_Masculino,                
       InsFisAss_num_leitos = @Urg_Obs_Masculino_Leitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '06'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Obs_Feminino,                
       InsFisAss_num_leitos = @Urg_Obs_Feminino_Leitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '07'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Obs_Indif,                
       InsFisAss_num_leitos = @Urg_Obs_Indif_Leitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '08'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Odont,                
       InsFisAss_num_leitos = @Urg_Odont_Equipos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '09'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Higiene,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '10'           
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Gesso,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '11'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Curativo,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '12'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Peq_Cirurgia,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '13'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Urg_Cons_Medicos,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '14'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Amb_ClinBasicas,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '15'                
   set @Erro = @Erro + @@error                
           
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Amb_ClinEspecializada,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '16'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Amb_ClinIndiferenciado,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '17'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_OutrosConsultorios,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '18'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_RepFeminino,                
       InsFisAss_num_leitos = @Amb_RepFemininoLeitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '19'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_RepMasculino,                
       InsFisAss_num_leitos = @Amb_RepMasculinoLeitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '20'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_RepPediatrico,                
       InsFisAss_num_leitos = @Amb_RepPediatricoLeitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '21'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_RepIndiferenciado,                
       InsFisAss_num_leitos = @Amb_RepIndiferenciadoLeitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '22'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_OdontoConsultorios,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '23'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_PequenaCirurgia,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '24'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_Enfermagem,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '25'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_Imunizacao,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '26'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_Nebulizacao,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '27'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_SalaGesso,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '28'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_SalaCurativo,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '29'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Amb_CirurgiaAmbulatorial,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '30'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_CirSalaCirurgia,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '31'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_CirRecuperacao,                
       InsFisAss_num_leitos = @Hos_CirRecuperacaoLeitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '32'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_CirSalaCirurgiaAmb,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '33'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde = @Hos_ObsPreParto,                
       InsFisAss_num_leitos = @Hos_ObsPrePartoLeitos                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '34'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_ObsPartoNormal,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '35'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_ObsSalaCuretagem,                
       InsFisAss_num_leitos = 0     
   WHERE unid_codigo = @Codigo and InsFis_codigo = '36'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_ObsSalaCirurgia,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '37'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_NeoRNNormal,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '38'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_NeoRNpatologico,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '39'                
   set @Erro = @Erro + @@error                
                  
   UPDATE CNES_Instalacao_Fisica_Unidade                
       SET InsFisAss_qtde       = @Hos_NeoLeitos,                
       InsFisAss_num_leitos = 0                
   WHERE unid_codigo = @Codigo and InsFis_codigo = '40'                
   set @Erro = @Erro + @@error                
                
  -- Insere na Tabela Atividade Unidade                
   SET @S1=NULL                
   SET @S2=NULL                
   SET @S3=NULL                
                
   SELECT @ARRAY1 = @TipAteAti_codigo                
   SELECT @ARRAY2 = @TipAte_codigo                
   SELECT @ARRAY3 = @Nivel_codigo                
   SELECT @DELIMITADOR = '^'                
                   
   IF OBJECT_ID('#ARRAY49') > 0 DROP TABLE #ARRAY49;                
   CREATE TABLE #ARRAY49(UNID char(4),ITEM_ARRAY1 VARCHAR(100),ITEM_ARRAY2 VARCHAR(100),ITEM_ARRAY3 VARCHAR(100),DATA DATETIME,ITEM_ARRAY4 VARCHAR(100))       
                   
   DELETE FROM CNES_Atividade_Unidade                
   WHERE  unid_codigo  = @codigo                
                   
   WHILE LEN(@ARRAY1) > 0                
   BEGIN                
      SELECT @S1 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
      SELECT @S2 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
      SELECT @S3 = LTRIM(SUBSTRING(@ARRAY3, 1, CHARINDEX(@DELIMITADOR, @ARRAY3) - 1))                
                   
      INSERT INTO #ARRAY49 (UNID,ITEM_ARRAY1,ITEM_ARRAY2,ITEM_ARRAY3,DATA,ITEM_ARRAY4) VALUES (@codigo,@S1,@S2,@S3,getDate(),NULL)                
                   
      SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
      SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
      SELECT @ARRAY3 = SUBSTRING(@ARRAY3, CHARINDEX(@DELIMITADOR, @ARRAY3) + 1, LEN(@ARRAY3))                
   END                
                   
   INSERT INTO CNES_Atividade_Unidade   
   (
		Unid_codigo,
		TipAteAti_codigo,
		TipAte_codigo,
		NivGes_codigo,
		AtiUni_datAtu,
		tpatend_codigo               
   )
   SELECT DISTINCT  
		UNID,
		ITEM_ARRAY1,
		ITEM_ARRAY2,
		ITEM_ARRAY3,
		DATA,
		ITEM_ARRAY4
   FROM #ARRAY49                
   set @Erro = @Erro + @@error                
                
   DROP TABLE #ARRAY49                
                
  -- Insere na Tabela Atendimento Unidade                
   SET @S1=NULL                
   SET @S4=NULL                
                 
   SELECT @ARRAY1 = @tipatnpre_codigo                
   SELECT @ARRAY2 = @TipCon_codigo                
   SELECT @DELIMITADOR = '^'                
                   
   IF OBJECT_ID('#ARRAY51') > 0 DROP TABLE #ARRAY51;                
   CREATE TABLE #ARRAY51(UNID char(4),ITEM_ARRAY1 VARCHAR(100),ITEM_ARRAY2 VARCHAR(100),ITEM_ARRAY3 VARCHAR(100))                
                   
   DELETE FROM CNES_Atendimento_Unidade                
   WHERE  unid_codigo  = @codigo                
                   
   WHILE LEN(@ARRAY1) > 0                
   BEGIN                
      SELECT @S1 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
      SELECT @S4 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
                   
      INSERT INTO #ARRAY51 (UNID,ITEM_ARRAY1,ITEM_ARRAY2,ITEM_ARRAY3) VALUES (@codigo,@S1,@S4,NULL)                
                   
      SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
      SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
   END                
                   
   INSERT INTO CNES_Atendimento_Unidade     
   (
   		Unid_codigo,
		TipAtnPre_codigo,
		TipCon_codigo,
		tpatend_codigo
   )    
   SELECT DISTINCT  
		UNID,
		ITEM_ARRAY1,
		ITEM_ARRAY2,
		ITEM_ARRAY3   
   FROM #ARRAY51                
   set @Erro = @Erro + @@error                
                   
   DROP TABLE #ARRAY51                
                
  -- Insere na Tabela Vinculo Unidade                
   INSERT INTO CNES_Unidade_Vinc_SUS                 
   (                 
    Unid_codigo,                
    UniVinSus_contrato_Municipal,                
    UniVinSus_datPublicacao_Municipal,                
    UniVinSus_contrato_Estadual,                
    UniVinSus_datPublicacao_Estadual,                
    Ban_codigo,                
    AgeBan_codigo,                
    UniVinSus_conta_corrente,                
    UniVinSus_alvara,                
    UniVinSus_datExpedicao,                
    UniVinSUS_OrgExpAlvara,                 
    UniVinSus_datAtu                
   )                
   VALUES                 
   (                
    @codigo,                
        @VincContratoMunicipal,                    
        @VincDataPubMunicipal,                    
    @VincContratoEstadual,                    
        @VincDataPubEstadual,                    
        @VincBanco,                     
    @VincAgencia,                     
        @VincConta,                     
    @VincAlvara,                     
        @VincExpedicao,                     
        @VincOrgao,                     
    getDate()                
   )                
   set @Erro = @Erro + @@error                
                
  -- Insere na Tabela Comissao Unidade                
   SET @S1=NULL          
                
   SELECT @ARRAY1 = @Comissao_codigo                
   SELECT @DELIMITADOR = '^'                
                   
   IF OBJECT_ID('#ARRAY53') > 0 DROP TABLE #ARRAY53;                
   CREATE TABLE #ARRAY53(UNID char(4),ITEM_ARRAY1 VARCHAR(100),DATA DATETIME)                
                   
   DELETE FROM CNES_Comissao_Unidade                
   WHERE  unid_codigo  = @codigo                
                   
   WHILE LEN(@ARRAY1) > 0                
   BEGIN                
      SELECT @S1 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
                   
      INSERT INTO #ARRAY53 (UNID,ITEM_ARRAY1,DATA) VALUES (@codigo,@S1,getDate())                
                   
      SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
   END                
                   
   INSERT INTO CNES_Comissao_Unidade
   (
   		Unid_codigo,
		Com_codigo,
		ComUni_datAtu
   )                 
   SELECT DISTINCT  
		UNID,
		ITEM_ARRAY1,
		DATA
   FROM #ARRAY53                
   set @Erro = @Erro + @@error                
                   
   DROP TABLE #ARRAY53                
                 
   -- Insere na Tabela Serviços Infra Unidade                
                 
   INSERT INTO CNES_Servico_Infra_Unidade                 
   (                 
    Unid_codigo,                
    SerRef_rad_salas_simulacao,                
    SerRef_rad_salas_planejamento,               
    SerRef_rad_salas_armaz_fontes,                
    SerRef_rad_salas_confec_masc,                
    SerRef_rad_salas_confec_molde,                
    SerRef_rad_salas_bloco_pers,                
    SerRef_qui_salas_armazenagem,                
    SerRef_qui_salas_preparo,                
    SerRef_qui_salas_curta_duracao,                
    SerRef_qui_salas_longa_duracao,                
    SerRef_qui_salas_fluxo_laminar,                
    SerRef_rad_eqp_simulador,                
    SerRef_rad_eqp_ate_6mev,                
    SerRef_rad_eqp_maior_6mev_sem,                
    SerRef_rad_eqp_maior_6mev_com,      SerRef_rad_eqp_orto_1050kv,                
    SerRef_rad_eqp_orto_50150kv,                
    SerRef_rad_eqp_orto_150500kv,                
    SerRef_rad_eqp_cobalto,                
    SerRef_rad_eqp_braqui_baixa,                
    SerRef_rad_eqp_braqui_media,                
    SerRef_rad_eqp_braqui_alta,                
    SerRef_rad_eqp_monitor_area,                
    SerRef_rad_eqp_monitor_individual,                
    SerRef_rad_eqp_sist_comp,                
    SerRef_rad_eqp_dosimetro,                
    SerRef_rad_eqp_fonte_selada                
  )                
   VALUES                
   (                
    @codigo,                
    @QuiRadSalaSimulacao,                
    @QuiRadSalaPlanejamento,                
    @QuiRadSalaArmFontes,                
    @QuiRadSalaConfMascara,                
    @QuiRadSalaMolde,                
    @QuiRadSalaBlocoPers,                
    @QuiQuiSalaArmazenamento,                
    @QuiQuiSalaPreparo,                
    @QuiQuiSalaCurtaDuracao,                
    @QuiQuiSalaLongaDuracao,                
    @QuiQuiSalaCapela,                
    @QuiRadEqpSimulacao,                
    @QuiRadEqpAte6MeV,                
    @QuiRadEqpMaior6MeVSem,                
    @QuiRadEqpMaior6MeVCom,                
    @QuiRadEqpOrto_10_50,                
    @QuiRadEqpOrto_50_150,                
    @QuiRadEqpOrto_150_500,                
    @QuiRadEqpCobalto,                
    @QuiRadEqpBraquiBaixa,                
    @QuiRadEqpBraquiMedia,                
    @QuiRadEqpBraquiAlta,                
    @QuiRadEqpMonitorArea,                
    @QuiRadEqpMonitorIndividual,                
    @QuiRadEqpSistema,                
    @QuiRadEqpDosimetro,                
    @QuiRadEqpFonteSelada                
   )                
   set @Erro = @Erro + @@error                
                
  -- Insere na Tabela Serviços Refer Unidade                
   SET @S4=NULL                
                 
   SELECT @ARRAY1 = @SerRef_codigo                
   SELECT @ARRAY2 = @QuiSercpf                
   SELECT @ARRAY3 = @QuiSercnpj                
   SELECT @ARRAY4 = @QuiSernome                
   SELECT @ARRAY5 = @QuiSerMunicipio                
   SELECT @DELIMITADOR = '^'                
                   
   IF OBJECT_ID('#ARRAY55') > 0 DROP TABLE #ARRAY55;                
   CREATE TABLE #ARRAY55                
   (                
    UNID char(4),                
    ITEM_ARRAY1 VARCHAR(100),                
    DATA DATETIME,                
ITEM_ARRAY2 VARCHAR(100),                
    ITEM_ARRAY3 VARCHAR(100),                
    ITEM_ARRAY4 VARCHAR(3000),                
    ITEM_ARRAY5 VARCHAR(100),                
    SERVICO CHAR(2),                
    ITEM_ARRAY6 VARCHAR(100),                
   )                
                   
   DELETE FROM CNES_Servico_Refer_Unidade                
   WHERE  unid_codigo  = @codigo and TipSerRef_codigo ='02'                
                   
   WHILE LEN(@ARRAY1) > 0                
   BEGIN                
      SELECT @S4 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
      SELECT @S11 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
      SELECT @S14 = LTRIM(SUBSTRING(@ARRAY3, 1, CHARINDEX(@DELIMITADOR, @ARRAY3) - 1))                
      SELECT @S60 = LTRIM(SUBSTRING(@ARRAY4, 1, CHARINDEX(@DELIMITADOR, @ARRAY4) - 1))                
      SELECT @S7 = LTRIM(SUBSTRING(@ARRAY5, 1, CHARINDEX(@DELIMITADOR, @ARRAY5) - 1))                
                   
      INSERT INTO #ARRAY55                 
      (                
    Unid,                
   ITEM_ARRAY1,                
    DATA,                
    ITEM_ARRAY2,                
    ITEM_ARRAY3,                
    ITEM_ARRAY4,                
    ITEM_ARRAY5,                
    SERVICO,           
    ITEM_ARRAY6                
     )                
            VALUES                 
     (                
      @codigo,                
    @S4,                
    getDate(),                
    @S11,                
    @S14,                
    @S60,                
    @S7,                
    '02',                
    NULL                
     )                
                   
     SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
     SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
     SELECT @ARRAY3 = SUBSTRING(@ARRAY3, CHARINDEX(@DELIMITADOR, @ARRAY3) + 1, LEN(@ARRAY3))                
     SELECT @ARRAY4 = SUBSTRING(@ARRAY4, CHARINDEX(@DELIMITADOR, @ARRAY4) + 1, LEN(@ARRAY4))                
     SELECT @ARRAY5 = SUBSTRING(@ARRAY5, CHARINDEX(@DELIMITADOR, @ARRAY5) + 1, LEN(@ARRAY5))                
   END                
                   
   INSERT INTO CNES_Servico_Refer_Unidade           
   (
   	Unid_codigo,
	SerRef_codigo,
	SerRef_datAtu,
	SerRef_cpf_resp,
	SerRef_cnpj_resp,
	SerRef_nome_resp,
	Mun_codigo,
	TipSerRef_codigo,
	SerRef_CodigoCNES
   )      
   SELECT DISTINCT  
        UNID,
		ITEM_ARRAY1,
		DATA,
		ITEM_ARRAY2,
	    ITEM_ARRAY3,
		ITEM_ARRAY4,
		ITEM_ARRAY5,
		SERVICO,
		ITEM_ARRAY6
   FROM #ARRAY55                
   set @Erro = @Erro + @@error                
           
   DROP TABLE #ARRAY55                
                
  -- Insere na Tabela Formalizacao Unidade                
                 
   SET @S4=NULL                
   SET @S11=NULL                
   SET @S60=NULL                
                 
   SELECT @ARRAY1 = @QuiFormalizacao_codigo                
   SELECT @ARRAY2 = @QuiFormalizacaoCPF                
   SELECT @ARRAY3 = @QuiFormalizacaoNome                
   SELECT @DELIMITADOR = '^'                
                   
   IF OBJECT_ID('#ARRAY57') > 0 DROP TABLE #ARRAY57;                
   CREATE TABLE #ARRAY57(UNID char(4),ITEM_ARRAY1 VARCHAR(100),ITEM_ARRAY2 VARCHAR(100),ITEM_ARRAY3 VARCHAR(100),DATA DATETIME, SERVICO CHAR(2))                
                   
   DELETE FROM CNES_Formalizacao_Unidade                
   WHERE  unid_codigo  = @codigo and TipSerRef_codigo ='02'                
                   
   WHILE LEN(@ARRAY1) > 0                
   BEGIN                
      SELECT @S4  = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
      SELECT @S11 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
      SELECT @S60 = LTRIM(SUBSTRING(@ARRAY3, 1, CHARINDEX(@DELIMITADOR, @ARRAY3) - 1))                
                   
      IF OBJECT_ID('#ARRAY57') > 0 DROP TABLE #ARRAY57;                
      INSERT INTO #ARRAY57 (UNID,ITEM_ARRAY1,ITEM_ARRAY2,ITEM_ARRAY3,DATA,SERVICO) VALUES (@codigo,@S4,@S11,@S60,getDate(),'02')                
                   
      SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
      SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
      SELECT @ARRAY3 = SUBSTRING(@ARRAY3, CHARINDEX(@DELIMITADOR, @ARRAY3) + 1, LEN(@ARRAY3))                
   END                
                   
   INSERT INTO CNES_Formalizacao_Unidade 
   (
   		Unid_codigo,
		CarFor_codigo,
		ForUni_CPF,
		ForUni_nome,
		ForUni_datAtu,
		TipSerRef_codigo
   )        
   SELECT DISTINCT 
		UNID,
		ITEM_ARRAY1,
		ITEM_ARRAY2,
		ITEM_ARRAY3,
		DATA, 
		SERVICO
   FROM #ARRAY57                
   set @Erro = @Erro + @@error                
                   
   DROP TABLE #ARRAY57                
 end                
                
                
---------------------------Alteração----------------------------------------------                
if(@opcao = 2)                
 begin                
                
 -- Atualiza a Tabela Unidade                
  UPDATE UNIDADE                 
  SET                  
  unid_descricao   = @unid_descricao,                
  unid_codigo   = @codigo,                
  niv_codigo   = @niv_codigo,                
  flu_codigo   = @flu_codigo,                
  tur_codigo   = @tur_codigo,                
  tipprest_codigo   = @tipprest_codigo,                
  nat_codigo   = @nat_codigo,                
  tpunid_codigo   = @tpunid_codigo,                
  unid_sigla   = @unid_sigla,             
  unid_cgc   = @unid_cgc,                
  unid_diretor_clinico  = @unid_diretor_clinico,                
  unid_diretor_cpf  = @unid_diretor_cpf,                
  unid_orgao_recebedor_aih = @unid_orgao_recebedor_aih,                
  unid_endereco_num  = @unid_endereco_num,                
  unid_endereco_compl  = @unid_endereco_compl,                
  unid_telefone   = @unid_telefone,                
  unid_email   = @unid_email,                
  unid_fideps   = @unid_fideps,                
  unid_distrito_sanitario  = @unid_distrito_sanitario,                
  unid_regiao   = @unid_regiao,                
  unid_banco   = @unid_banco,                
  unid_agencia   = @unid_agencia,                
  unid_contacorrente  = @unid_contacorrente,                
  unid_contrato   = @unid_contrato,                
  unid_publicacao   = @unid_DtPublicacao,                
  unid_preenchimento  = @unid_DtPreenchimento,                
  unid_quant_consultorio  = @unid_quant_consultorio,                
  unid_quant_odonto  = @unid_quant_odonto,                
  unid_quant_gesso  = @unid_quant_gesso,                
  unid_quant_peqcirurgia  = @unid_quant_peqcirurgia,                
  unid_quant_cirurgiaamb  = @unid_quant_cirurgiaamb,                
  unid_pessoa   = @unid_pessoa,                
  unid_ir    = @unid_ir,                
  unid_codigoUPS   = @unid_codigoUPS,                
  unid_codigoCNES   = @unid_codigoCNES,                
  unid_diretor_cns  = @unid_diretor_cns,                
  unid_path_xml   = @unid_path_xml,                
  unid_imagem   = @unid_imagem,                
  unid_UsaCentral   = @unid_UsaCentral,                
  idt_UsaDemandaReprimida  = @idt_UsaDemandaReprimida, 
  unid_param_movpront_amb  = @unid_param_movpront_amb,            
  unid_param_movpront_int  = @unid_param_movpront_int,            
  unid_param_movpront_adm  = @unid_param_movpront_adm,            
  unid_param_guarda_movpront = @unid_param_guarda_movpront,                
  Unid_UsaPacto   = @Unid_UsaPacto,   
  unid_UsaInfMilitar  = @unid_UsaInfMilitar,            
  unid_UsaNumObito  = @unid_UsaNumObito,            
  unid_PrefixoRN   = @unid_PrefixoRN,            
  --unid_Razao_Social_Cartorio = @unid_Razao_Social_Cartorio,            
  unid_usa_meses   = @unid_usa_meses,            
             
  Man_CNPJ   = @Man_CNPJ,                
  Unid_Codigo_Exp   = @Unid_Codigo_Exp,                
  TipSitUni_codigo  = @TipSitUni_codigo,                
  Unid_cpf   = @Unid_cpf,                
  Unid_codigo_SIASUS  = @Unid_codigo_SIASUS,                
  Unid_codigo_Outros_SIASUS = @Unid_codigo_Outros_SIASUS,                
  Unid_nome_fantasia  = @Unid_nome_fantasia,          RegSau_codigo   = @RegSau_codigo,                
  MicReg_codigo   = @MicReg_codigo,                
  ModAss_codigo   = @ModAss_codigo,                
  Unid_fax   = @Unid_fax,                
  Unid_registro_conselho  = @Unid_registro_conselho,                
  EsfAdm_codigo   = @EsfAdm_codigo,                
  NatOrg_codigo   = @NatOrg_codigo,                
  RetTri_codigo   = @RetTri_codigo,                
  AtiEns_codigo   = @AtiEns_codigo,                
  NivHie_codigo   = @NivHie_codigo,                
  FluCli_codigo   = @FluCli_codigo,                
  Unid_ind_vinculoSUS  = @Unid_ind_vinculoSUS,                
  Unid_numero_alvara  = @Unid_numero_alvara,                
  Unid_data_expedicao  = @Unid_data_expedicao,                
  Unid_Orgao_Exp_Alvara  = @Unid_Orgao_Exp_Alvara,                
  Unid_ind_avaliacao_PNASS = @Unid_ind_avaliacao_PNASS,                
  Unid_data_avaliacao_PNASS = @Unid_data_avaliacao_PNASS,                
  Unid_ind_acreditacao  = @Unid_ind_acreditacao,                
  Unid_data_acreditacao  = @Unid_data_acreditacao,                
  AcrAva_codigo   = @AcrAva_codigo,                
 unid_ind_programa_reestruturacao = @unid_ind_programa_reestruturacao,  
  Unid_ind_executado_terceiro = @Unid_ind_executado_terceiro,                
  TipAtn_codigo   = @TipAtn_codigo,                
  NivGes_codigo   = @NivGes_codigo,                
  Unid_DDD    = @Unid_DDD,                
  Unid_Integra_Organograma =  @Unid_Integracao_Organograma,            
  unid_limite_apresentacao_aih    =       @unid_limite_apresentacao_aih,            
  subtipo_codigo =  @subTipoUnidade_codigo,            
  atendimento_encerrado = @atendimento_encerrado,            
  unid_integracao_bombeiro = @unid_integracao_bombeiro,        
  unid_usa_acolhimento = @unid_usa_acolhimento,             
  unid_Usa_Encaminhamento = @unid_Usa_Encaminhamento,      
  cor_Encainhamento = @cor_Encainhamento,  
  unid_Radiologia_Entrega_Protocolo = @unid_Radiologia_Entrega_Protocolo,
  nao_usa_vinculo_internacao = @nao_usa_vinculo_internacao,
  UsaProtocoloDengue  = @UsaProtocoloDengue,
  EnvioSMS_Dias = @EnvioSMS_Dias,
  Cnes_Unidade_Faturamento = @Cnes_Unidade_Faturamento,
  Usa_Cid_Secundario_Novo = @Usa_Cid_Secundario_Novo,
  Usa_PriorizacaoIdosoFilaEspera = @Usa_PriorizacaoIdosoFilaEspera,
  Usa_PrescricaoEletronica = @Usa_PrescricaoEletronica

	WHERE UNID_CODIGO = @CODIGO                
                
  set @Erro = @Erro + @@error                
                
  IF @cep_sequencial IS NOT NULL                 
  begin                
   UPDATE UNIDADE                
   SET cep_sequencial = @cep_sequencial                
          WHERE UNID_CODIGO = @CODIGO                
         end                
  set @Erro = @Erro + @@error                
                
 -- Atualiza a Tabela Controle Sequencial                
         declare @CtrlSeq_Proximo numeric(9)                
                 
         select @CtrlSeq_Proximo = CtrlSeq_Proximo                 
         from controle_sequencial                
         where unid_codigo = @CODIGO               
          and CtrlSeq_Chave = 'Obito_Numero'                
          and CtrlSeq_Data = '19000101'                 
                     
         if @CtrlSeq_Proximo IS NULL                
           begin                
      insert into controle_sequencial                 
                 (unid_codigo, CtrlSeq_Chave, CtrlSeq_Data, CtrlSeq_Proximo)                
             values                
                 (@Codigo, 'Obito_Numero', '19000101', @Proximo)                
      set @Erro = @Erro + @@error                
           end                
  else                
    begin                
             update controle_sequencial                 
             set CtrlSeq_Proximo = @Proximo                
             where unid_codigo = @CODIGO                
   and CtrlSeq_Chave = 'Obito_Numero'                
              and CtrlSeq_Data = '19000101' AND  @Proximo IS NOT NULL                
       set @Erro = @Erro + @@error                
    end                

-- Insere/Altera parÃ¢metros de RelatÃ³rio - PARAMETRO_RELATORIO_PARAMSET - unidade_parametro_relatorio - parametro_boletim e parametro_unidade_rede
execute ksp_Unidade_Dados_Fundamentais @Codigo

                
 -- Atualiza a Tabela Instalacao Fisica Unidade                
  declare @ctrl numeric(9)                
                
         select @ctrl=count(*)                 
         from CNES_Instalacao_Fisica_Unidade                
         where unid_codigo = @CODIGO                
                
  -- Insere na Tabela Instalacao Fisica Unidade                
         if @Ctrl = 0                
  begin                
   insert into CNES_Instalacao_Fisica_Unidade  
   (
		Unid_codigo,
		InsFis_codigo,
		InsFisAss_qtde,
		InsFisAss_num_leitos,
		InsFisAss_datAtu 
   )              
   select 
		@CODIGO,
		InsFis_codigo,
		0,
		0,
		getDate()                
   from CNES_Instalacao_Fisica;                
   set @Erro = @Erro + @@error                
  end                
                
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Atend_Pediatrico,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '01'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Atend_Masculino,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '02'                
  set @Erro = @Erro + @@error            
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Atend_Feminino,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '03'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Atend_Indiferenciado,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '04'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Obs_Pediatrico,                
      InsFisAss_num_leitos = @Urg_Obs_Pediatrico_Leitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '05'                
  set @Erro = @Erro + @@error                
                  
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Obs_Masculino,                
      InsFisAss_num_leitos = @Urg_Obs_Masculino_Leitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '06'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Obs_Feminino,                
      InsFisAss_num_leitos = @Urg_Obs_Feminino_Leitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '07'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Obs_Indif,                
      InsFisAss_num_leitos = @Urg_Obs_Indif_Leitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '08'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Odont,                
      InsFisAss_num_leitos = @Urg_Odont_Equipos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '09'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Higiene,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '10'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Gesso,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '11'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Curativo,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '12'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Peq_Cirurgia,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '13'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Urg_Cons_Medicos,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '14'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Amb_ClinBasicas,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '15'           
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Amb_ClinEspecializada,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '16'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Amb_ClinIndiferenciado,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '17'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_OutrosConsultorios,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '18'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_RepFeminino,                
      InsFisAss_num_leitos = @Amb_RepFemininoLeitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '19'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_RepMasculino,                
      InsFisAss_num_leitos = @Amb_RepMasculinoLeitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '20'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_RepPediatrico,                
      InsFisAss_num_leitos = @Amb_RepPediatricoLeitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '21'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_RepIndiferenciado,                
      InsFisAss_num_leitos = @Amb_RepIndiferenciadoLeitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '22'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_OdontoConsultorios,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '23'                
  set @Erro = @Erro + @@error                
         
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_PequenaCirurgia,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '24'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_Enfermagem,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '25'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_Imunizacao,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '26'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_Nebulizacao,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '27'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_SalaGesso,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '28'       
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_SalaCurativo,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '29'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Amb_CirurgiaAmbulatorial,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '30'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_CirSalaCirurgia,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '31'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_CirRecuperacao,                
      InsFisAss_num_leitos = @Hos_CirRecuperacaoLeitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '32'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_CirSalaCirurgiaAmb,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '33'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde = @Hos_ObsPreParto,                
      InsFisAss_num_leitos = @Hos_ObsPrePartoLeitos                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '34'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_ObsPartoNormal,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '35'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_ObsSalaCuretagem,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '36'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_ObsSalaCirurgia,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '37'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_NeoRNNormal,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '38'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_NeoRNpatologico,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '39'                
  set @Erro = @Erro + @@error                
                 
  UPDATE CNES_Instalacao_Fisica_Unidade                
      SET InsFisAss_qtde       = @Hos_NeoLeitos,                
      InsFisAss_num_leitos = 0                
  WHERE unid_codigo = @Codigo and InsFis_codigo = '40'                
  set @Erro = @Erro + @@error                
                
 -- Atualiza a Tabela Atividade Unidade                
                
  SET @S1=NULL                
  SET @S2=NULL                
  SET @S3=NULL                
                
  SELECT @ARRAY1 = @TipAteAti_codigo                
  SELECT @ARRAY2 = @TipAte_codigo           
  SELECT @ARRAY3 = @Nivel_codigo                
  SELECT @DELIMITADOR = '^'                
                  
  IF OBJECT_ID('#ARRAY50') > 0 DROP TABLE #ARRAY50;                
  CREATE TABLE #ARRAY50(UNID char(4),ITEM_ARRAY1 VARCHAR(100),ITEM_ARRAY2 VARCHAR(100),ITEM_ARRAY3 VARCHAR(100),DATA DATETIME,ITEM_ARRAY4 VARCHAR(100))                
                  
  DELETE FROM CNES_Atividade_Unidade                
  WHERE  unid_codigo  = @codigo                
                  
  WHILE LEN(@ARRAY1) > 0                
  BEGIN                
     SELECT @S1 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
     SELECT @S2 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
     SELECT @S3 = LTRIM(SUBSTRING(@ARRAY3, 1, CHARINDEX(@DELIMITADOR, @ARRAY3) - 1))                
                  
     IF OBJECT_ID('#ARRAY50') > 0 DROP TABLE #ARRAY50;                
     INSERT INTO #ARRAY50 (UNID,ITEM_ARRAY1,ITEM_ARRAY2,ITEM_ARRAY3,DATA,ITEM_ARRAY4) VALUES (@codigo,@S1,@S2,@S3,getDate(),NULL)                
                  
     SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
     SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
     SELECT @ARRAY3 = SUBSTRING(@ARRAY3, CHARINDEX(@DELIMITADOR, @ARRAY3) + 1, LEN(@ARRAY3))                
  END                
                  
  INSERT INTO CNES_Atividade_Unidade   
  (
		Unid_codigo,
		TipAteAti_codigo,
		TipAte_codigo,
		NivGes_codigo,
		AtiUni_datAtu,
		tpatend_codigo
  )              
  SELECT DISTINCT  
		UNID,
		ITEM_ARRAY1,
		ITEM_ARRAY2,
		ITEM_ARRAY3,
		DATA,
		ITEM_ARRAY4   
  FROM #ARRAY50                
  set @Erro = @Erro + @@error                
                  
  DROP TABLE #ARRAY50                
                
 -- Atualiza a Tabela Atendimento Unidade                
                
  SET @S1=NULL                
  SET @S4=NULL                
                
  SELECT @ARRAY1 = @tipatnpre_codigo                
  SELECT @ARRAY2 = @TipCon_codigo                
  SELECT @DELIMITADOR = '^'                
                  
  --PRINT @ARRAY1                
  --PRINT @ARRAY2                
                
  IF OBJECT_ID('#ARRAY52') > 0 DROP TABLE #ARRAY52;                
  CREATE TABLE #ARRAY52(UNID char(4),ITEM_ARRAY1 VARCHAR(100),ITEM_ARRAY2 VARCHAR(100),ITEM_ARRAY3 VARCHAR(100))                
                  
  DELETE FROM CNES_Atendimento_Unidade                
  WHERE  unid_codigo  = @codigo                
                  
  WHILE LEN(@ARRAY1) > 0                
  BEGIN                
     SELECT @S1 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
     SELECT @S4 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
                  
     INSERT INTO #ARRAY52 (UNID,ITEM_ARRAY1,ITEM_ARRAY2,ITEM_ARRAY3) VALUES (@codigo,@S1,@S4,NULL)                
                  
     SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
     SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
  END                
                  
  INSERT INTO CNES_Atendimento_Unidade   
  (
		Unid_codigo,
		TipAtnPre_codigo,
		TipCon_codigo,
		tpatend_codigo
  )              
  SELECT DISTINCT  
  		Unid_codigo,
		TipAtnPre_codigo,
		TipCon_codigo,
		tpatend_codigo
  FROM #ARRAY52                
  set @Erro = @Erro + @@error                
                  
  DROP TABLE #ARRAY52                
                
 -- Atualiza a Tabela Vinculo Unidade                
  declare @ctrl2 numeric(9)                
                
         select @ctrl2=count(*)                 
         from CNES_Unidade_Vinc_SUS                
         where unid_codigo = @CODIGO                
                
  -- Insere na Tabela Instalacao Fisica Unidade                
        if @Ctrl2 = 0                
  begin                
   INSERT INTO CNES_Unidade_Vinc_SUS                 
   (                 
    Unid_codigo,                
    UniVinSus_contrato_Municipal,                
    UniVinSus_datPublicacao_Municipal,                
    UniVinSus_contrato_Estadual,                
    UniVinSus_datPublicacao_Estadual,         
    Ban_codigo,                
    AgeBan_codigo,                
    UniVinSus_conta_corrente,                
    UniVinSus_alvara,                
    UniVinSus_datExpedicao,                
    UniVinSUS_OrgExpAlvara,                 
    UniVinSus_datAtu                
   )                
   VALUES                 
   (                
    @codigo,                
        @VincContratoMunicipal,                    
        @VincDataPubMunicipal,                    
    @VincContratoEstadual,                    
        @VincDataPubEstadual,                    
        @VincBanco,                     
    @VincAgencia,                     
        @VincConta,                     
    @VincAlvara,                     
        @VincExpedicao,                     
        @VincOrgao,                     
    getDate()                
   )                
   set @Erro = @Erro + @@error                
  end                
  else                
   begin                
    UPDATE CNES_Unidade_Vinc_SUS SET                
     UniVinSus_contrato_Municipal=@VincContratoMunicipal,                
     UniVinSus_datPublicacao_Municipal = @VincDataPubMunicipal,                
     UniVinSus_contrato_Estadual = @VincContratoEstadual,                
     UniVinSus_datPublicacao_Estadual = @VincDataPubEstadual,                    
     Ban_codigo = @VincBanco,                
     AgeBan_codigo = @VincAgencia,                
     UniVinSus_conta_corrente = @VincConta,                
     UniVinSus_alvara = @VincAlvara,                
     UniVinSus_datExpedicao = @VincExpedicao,                
     UniVinSUS_OrgExpAlvara = @VincOrgao                
    WHERE Unid_codigo = @codigo                
    set @Erro = @Erro + @@error                
   end                
 -- Atualiza a Tabela Comissao Unidade                
  SET @S1= NULL                
                
  SELECT @ARRAY1 = @Comissao_codigo                
  SELECT @DELIMITADOR = '^'                
                  
  IF OBJECT_ID('#ARRAY54') > 0 DROP TABLE #ARRAY54;                
  CREATE TABLE #ARRAY54(UNID char(4),ITEM_ARRAY1 VARCHAR(100),DATA DATETIME)                
                  
  DELETE FROM CNES_Comissao_Unidade                
  WHERE  unid_codigo  = @codigo                
                  
  WHILE LEN(@ARRAY1) > 0                
  BEGIN                
     SELECT @S1 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
                  
     INSERT INTO #ARRAY54 (UNID,ITEM_ARRAY1,DATA) VALUES (@codigo,@S1,getDate())                
                  
     SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
  END                
                  
  INSERT INTO CNES_Comissao_Unidade                 
  (
		Unid_codigo,
		Com_codigo,
		ComUni_datAtu
  )
  SELECT DISTINCT  
		UNID,
		ITEM_ARRAY1,
		DATA
  FROM #ARRAY54                
  set @Erro = @Erro + @@error                
                  
  DROP TABLE #ARRAY54                
                
 -- Atualiza a Tabela Servicos Infra Unidade                 
                  
  -- Verifica se j? existe CNES_Servico_Infra_Unidade  
 DECLARE @CountServInfraUnid int  
 SET @CountServInfraUnid = 0  
   
 SELECT @CountServInfraUnid = count(*) FROM CNES_Servico_Infra_Unidade WHERE UNID_CODIGO = @codigo  
  
-- Se n?o tiver um Servicos Infra Unidade, INCLUI!!  
IF ( @CountServInfraUnid = 0 )  
 BEGIN  
   INSERT INTO CNES_Servico_Infra_Unidade  
   (  
    Unid_codigo,      SerRef_rad_salas_simulacao,  
    SerRef_rad_salas_planejamento,  SerRef_rad_salas_armaz_fontes,  
    SerRef_rad_salas_confec_masc,  SerRef_rad_salas_confec_molde,  
    SerRef_rad_salas_bloco_pers,  SerRef_qui_salas_armazenagem,  
    SerRef_qui_salas_preparo,   SerRef_qui_salas_curta_duracao,  
    SerRef_qui_salas_longa_duracao,  SerRef_qui_salas_fluxo_laminar,  
    SerRef_rad_eqp_simulador,   SerRef_rad_eqp_ate_6mev,  
    SerRef_rad_eqp_maior_6mev_sem,  SerRef_rad_eqp_maior_6mev_com,  
    SerRef_rad_eqp_orto_1050kv,   SerRef_rad_eqp_orto_50150kv,  
    SerRef_rad_eqp_orto_150500kv,  SerRef_rad_eqp_cobalto,  
    SerRef_rad_eqp_braqui_baixa,  SerRef_rad_eqp_braqui_media,  
    SerRef_rad_eqp_braqui_alta,   SerRef_rad_eqp_monitor_area,  
    SerRef_rad_eqp_monitor_individual, SerRef_rad_eqp_sist_comp,  
    SerRef_rad_eqp_dosimetro,   SerRef_rad_eqp_fonte_selada  
   )  
   VALUES  
   (  
    @codigo,       @QuiRadSalaSimulacao,  
    @QuiRadSalaPlanejamento,   @QuiRadSalaArmFontes,  
    @QuiRadSalaConfMascara,    @QuiRadSalaMolde,  
    @QuiRadSalaBlocoPers,    @QuiQuiSalaArmazenamento,  
    @QuiQuiSalaPreparo,     @QuiQuiSalaCurtaDuracao,  
    @QuiQuiSalaLongaDuracao,   @QuiQuiSalaCapela,  
    @QuiRadEqpSimulacao,    @QuiRadEqpAte6MeV,  
    @QuiRadEqpMaior6MeVSem,    @QuiRadEqpMaior6MeVCom,  
    @QuiRadEqpOrto_10_50,    @QuiRadEqpOrto_50_150,  
    @QuiRadEqpOrto_150_500,    @QuiRadEqpCobalto,  
    @QuiRadEqpBraquiBaixa,    @QuiRadEqpBraquiMedia,  
    @QuiRadEqpBraquiAlta,    @QuiRadEqpMonitorArea,  
    @QuiRadEqpMonitorIndividual,  @QuiRadEqpSistema,  
    @QuiRadEqpDosimetro,    @QuiRadEqpFonteSelada  
   )  
   set @Erro = @Erro + @@error  
 END  
-- Se j? tiver um Servicos Infra Unidade, ATUALIZA!!  
ELSE  
BEGIN  
  UPDATE CNES_Servico_Infra_Unidade                 
  SET                 
  SerRef_rad_salas_simulacao        = @QuiRadSalaSimulacao,                
  SerRef_rad_salas_planejamento     = @QuiRadSalaPlanejamento,                
  SerRef_rad_salas_armaz_fontes     = @QuiRadSalaArmFontes,                
  SerRef_rad_salas_confec_masc      = @QuiRadSalaConfMascara,                
  SerRef_rad_salas_confec_molde     = @QuiRadSalaMolde,                
  SerRef_rad_salas_bloco_pers       = @QuiRadSalaBlocoPers,                
  SerRef_qui_salas_armazenagem      = @QuiQuiSalaArmazenamento,                
  SerRef_qui_salas_preparo   = @QuiQuiSalaPreparo,      
  SerRef_qui_salas_curta_duracao    = @QuiQuiSalaCurtaDuracao,                
  SerRef_qui_salas_longa_duracao    = @QuiQuiSalaLongaDuracao,                
  SerRef_qui_salas_fluxo_laminar    = @QuiQuiSalaCapela,                
  SerRef_rad_eqp_simulador          = @QuiRadEqpSimulacao,                
  SerRef_rad_eqp_ate_6mev         = @QuiRadEqpAte6MeV,                
  SerRef_rad_eqp_maior_6mev_sem     = @QuiRadEqpMaior6MeVSem,                
  SerRef_rad_eqp_maior_6mev_com     = @QuiRadEqpMaior6MeVCom,                
  SerRef_rad_eqp_orto_1050kv        = @QuiRadEqpOrto_10_50,                
  SerRef_rad_eqp_orto_50150kv       = @QuiRadEqpOrto_50_150,                
  SerRef_rad_eqp_orto_150500kv      = @QuiRadEqpOrto_150_500,                
  SerRef_rad_eqp_cobalto            = @QuiRadEqpCobalto,                
  SerRef_rad_eqp_braqui_baixa       = @QuiRadEqpBraquiBaixa,                
  SerRef_rad_eqp_braqui_media       = @QuiRadEqpBraquiMedia,                
  SerRef_rad_eqp_braqui_alta        = @QuiRadEqpBraquiAlta,                
  SerRef_rad_eqp_monitor_area       = @QuiRadEqpMonitorArea,                
  SerRef_rad_eqp_monitor_individual = @QuiRadEqpMonitorIndividual,                
  SerRef_rad_eqp_sist_comp   = @QuiRadEqpSistema,                
  SerRef_rad_eqp_dosimetro          = @QuiRadEqpDosimetro,                
  SerRef_rad_eqp_fonte_selada       = @QuiRadEqpFonteSelada                
  WHERE Unid_codigo = @codigo                
  set @Erro = @Erro + @@error                
END                  
                
 -- Atualiza a Tabela Servicos Ref Unidade                 
                
  SET @S4=NULL                
                
  SELECT @ARRAY1 = @SerRef_codigo                
  SELECT @ARRAY2 = @QuiSercpf                
  SELECT @ARRAY3 = @QuiSercnpj                
  SELECT @ARRAY4 = @QuiSernome                
  SELECT @ARRAY5 = @QuiSerMunicipio                
  SELECT @DELIMITADOR = '^'                
                  
  IF OBJECT_ID('#ARRAY56') > 0 DROP TABLE #ARRAY56;                
  CREATE TABLE #ARRAY56                
  (                
   UNID char(4),                
   ITEM_ARRAY1 VARCHAR(100),                
   DATA DATETIME,                
   ITEM_ARRAY2 VARCHAR(100),                
   ITEM_ARRAY3 VARCHAR(100),                
   ITEM_ARRAY4 VARCHAR(3000),                
   ITEM_ARRAY5 VARCHAR(100),                
   SERVICO CHAR(2),                
   ITEM_ARRAY6 VARCHAR(100)                
  )                
                  
  DELETE FROM CNES_Servico_Refer_Unidade                
  WHERE  unid_codigo  = @codigo and TipSerRef_codigo ='02'                
                  
  WHILE LEN(@ARRAY1) > 0                
  BEGIN                
     SELECT @S4 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
     SELECT @S11 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
     SELECT @S14 = LTRIM(SUBSTRING(@ARRAY3, 1, CHARINDEX(@DELIMITADOR, @ARRAY3) - 1))                
     SELECT @S60 = LTRIM(SUBSTRING(@ARRAY4, 1, CHARINDEX(@DELIMITADOR, @ARRAY4) - 1))                
     SELECT @S7 = LTRIM(SUBSTRING(@ARRAY5, 1, CHARINDEX(@DELIMITADOR, @ARRAY5) - 1))                
                  
     INSERT INTO #ARRAY56                 
     (                
   Unid,                
   ITEM_ARRAY1,                
   DATA,                
   ITEM_ARRAY2,                
   ITEM_ARRAY3,                
   ITEM_ARRAY4,                
   ITEM_ARRAY5,                
   SERVICO,                
   ITEM_ARRAY6                
    )                
           VALUES                 
    (                
     @codigo,                
   @S4,                
   getDate(),                
   @S11,                
   @S14,                
   @S60,                
   @S7,                
   '02',                
   NULL                
    )                    
    SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
    SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
    SELECT @ARRAY3 = SUBSTRING(@ARRAY3, CHARINDEX(@DELIMITADOR, @ARRAY3) + 1, LEN(@ARRAY3))                
    SELECT @ARRAY4 = SUBSTRING(@ARRAY4, CHARINDEX(@DELIMITADOR, @ARRAY4) + 1, LEN(@ARRAY4))                
    SELECT @ARRAY5 = SUBSTRING(@ARRAY5, CHARINDEX(@DELIMITADOR, @ARRAY5) + 1, LEN(@ARRAY5))                
  END                
                  
  INSERT INTO CNES_Servico_Refer_Unidade   
  (
		Unid_codigo,
		SerRef_codigo,
		SerRef_datAtu,
		SerRef_cpf_resp,
		SerRef_cnpj_resp,
		SerRef_nome_resp,
		Mun_codigo,
		TipSerRef_codigo,
		SerRef_CodigoCNES
  )              
  SELECT DISTINCT  
	   Unid,                
	   ITEM_ARRAY1,                
	   DATA,                
	   ITEM_ARRAY2,                
	   ITEM_ARRAY3,                
	   ITEM_ARRAY4,                
	   ITEM_ARRAY5,                
	   SERVICO,                
	   ITEM_ARRAY6 
  FROM #ARRAY56                
  set @Erro = @Erro + @@error                
                 
  DROP TABLE #ARRAY56                
                 
                
 -- Atualiza a Tabela Formalizacao Unidade                
                
  SET @S4=NULL                
  SET @S11=NULL                
  SET @S60=NULL                
                
  SELECT @ARRAY1 = @QuiFormalizacao_codigo                
  SELECT @ARRAY2 = @QuiFormalizacaoCPF                
  SELECT @ARRAY3 = @QuiFormalizacaoNome                
  SELECT @DELIMITADOR = '^'                
                  
  IF OBJECT_ID('#ARRAY58') > 0 DROP TABLE #ARRAY58;                
  CREATE TABLE #ARRAY58(UNID char(4),ITEM_ARRAY1 VARCHAR(100),ITEM_ARRAY2 VARCHAR(100),ITEM_ARRAY3 VARCHAR(100),DATA DATETIME, SERVICO CHAR(2))                
                  
  DELETE FROM CNES_Formalizacao_Unidade                
  WHERE  unid_codigo  = @codigo and TipSerRef_codigo ='02'                
                  
  WHILE LEN(@ARRAY1) > 0                
  BEGIN                
     SELECT @S4  = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
     SELECT @S11 = LTRIM(SUBSTRING(@ARRAY2, 1, CHARINDEX(@DELIMITADOR, @ARRAY2) - 1))                
     SELECT @S60 = LTRIM(SUBSTRING(@ARRAY3, 1, CHARINDEX(@DELIMITADOR, @ARRAY3) - 1))                
                  
     IF OBJECT_ID('#ARRAY58') > 0 DROP TABLE #ARRAY58;                
     INSERT INTO #ARRAY58 (UNID,ITEM_ARRAY1,ITEM_ARRAY2,ITEM_ARRAY3,DATA,SERVICO) VALUES (@codigo,@S4,@S11,@S60,getDate(),'02')                
                  
     SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
     SELECT @ARRAY2 = SUBSTRING(@ARRAY2, CHARINDEX(@DELIMITADOR, @ARRAY2) + 1, LEN(@ARRAY2))                
     SELECT @ARRAY3 = SUBSTRING(@ARRAY3, CHARINDEX(@DELIMITADOR, @ARRAY3) + 1, LEN(@ARRAY3))                
  END                
                  
  INSERT INTO CNES_Formalizacao_Unidade     
  (
		Unid_codigo,
		CarFor_codigo,
		ForUni_CPF,
		ForUni_nome,
		ForUni_datAtu,
		TipSerRef_codigo
  )            
  SELECT DISTINCT
		UNID,
		ITEM_ARRAY1,
		ITEM_ARRAY2,
		ITEM_ARRAY3,
		DATA,SERVICO  
  FROM #ARRAY58                
  set @Erro = @Erro + @@error                
                  
  DROP TABLE #ARRAY58                
                
 end                                  
---------------------------Exclusão----------------------------------------------                
                
if(@opcao = 3)                
 begin                
                
  declare @Quantos  int                
         SELECT @Quantos = count(local_atendimento.unid_codigo)                
                  
      FROM LOCAL_ATENDIMENTO                
                
      WHERE UNID_CODIGO = @CODIGO                
         AND  div_codigo is not null                
                
         IF( @Quantos = 0)                
                
           BEGIN                 
                   
   DELETE FROM CNES_PROFISSIONAL_EQUIPE_UNIDADE                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_LEITO_UNIDADE                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Profissional_Residencia_Unidade                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Regra_Contratual_Unidade                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Habilitacao_Unidade                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Servico_Apoio_Unidade                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
DELETE FROM CNES_Servico_Classif_Unidade                
   WHERE unid_codigo = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Cooperativa_Unidade                
   WHERE  unid_codigo  = @codigo                
   set @Erro = @Erro + @@error                
                  
   DELETE FROM CNES_Equipamento_Unidade                
   WHERE  unid_codigo  = @codigo                
   set @Erro = @Erro + @@error                
                  
   DELETE FROM CNES_Equipe_Unidade                
   WHERE  unid_codigo  = @codigo                
   set @Erro = @Erro + @@error                
                  
   DELETE FROM CNES_Residencia_Unidade                
   WHERE  unid_codigo  = @codigo                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Formalizacao_Unidade                
 WHERE  unid_codigo  = @codigo and TipSerRef_codigo ='02'                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Servico_Refer_Unidade                 
             WHERE   UNID_CODIGO = @CODIGO and TipSerRef_codigo ='02'                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Comissao_Unidade                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Unidade_Vinc_SUS                 
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE FROM CNES_Atendimento_Unidade                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Atividade_Unidade                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Instalacao_Fisica_Unidade                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Servico_Infra_Unidade                 
             WHERE   UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Vinculo_Prof_Unidade                 
             WHERE   UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
   DELETE  CNES_Rejeitos_Unidade                 
             WHERE   UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
             DELETE FROM PARAMETRO_RELATORIO                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
             DELETE FROM USUARIO_LOCAL_ATENDIMENTO                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
             DELETE FROM LOCAL_ATENDIMENTO                
             WHERE        UNID_CODIGO = @CODIGO                
   set @Erro = @Erro + @@error                
                
             DELETE FROM CAPACIDADE_PROFISSIONAL                
             WHERE        UNID_CODIGO = @CODIGO                     
   set @Erro = @Erro + @@error                
                
          DELETE FROM ESPECIFICACAO_SERVICO                
             WHERE        UNID_CODIGO = @CODIGO                 
   set @Erro = @Erro + @@error                
                
          delete from Feriado                
             WHERE        UNID_CODIGO = @CODIGO                 
   set @Erro = @Erro + @@error                
                
          delete from unidade_historico                
             WHERE        UNID_CODIGO = @CODIGO                 
   set @Erro = @Erro + @@error                
                
--           delete from Unidade_Horario                
--             WHERE        UNID_CODIGO = @CODIGO                 
                
          delete from unidade_referencia                
             WHERE        UNID_CODIGO = @CODIGO                 
   set @Erro = @Erro + @@error         
                
            delete from Unidade_SIPAC                
             WHERE        UNID_CODIGO = @CODIGO                 
   set @Erro = @Erro + @@error                
                
--           delete from UnidadeSaude_Unidade                
--             WHERE        UNID_CODIGO = @CODIGO                 
                
          delete from PARAMETRO_PRESCRICAO                
             WHERE        UNID_CODIGO = @CODIGO                  
   set @Erro = @Erro + @@error                
                
          delete from PARAMETROS_LABORATORIO                
             WHERE        UNID_CODIGO = @CODIGO                  
   set @Erro = @Erro + @@error                
                
             DELETE FROM UNIDADE                 
             WHERE        UNID_CODIGO = @CODIGO                  
   set @Erro = @Erro + @@error                
                          
         END                
                
                
 end                
                     
                
                
----------------------------Proximo Sequencial------------------------------                 
/*if(@opcao = 4)                
 begin                
 end                
*/                
---------------------------Proximo Seq Local Atendimento---------------------           
/*if(@opcao = 5)                
 begin                
 end                       
*/                
------------------------------ valida relacao hierarquia tipoUnidade -------                
/*                
if(@opcao = 6)                
 begin           
  Select   tpunid_codigo,niv_codigo                 
  from   HIerarquia_TipoUnidade                
  where   tpunid_codigo = @TipoUnidade_cod                
  and         niv_codigo = @Nivelcod                
  order by  tpUnid_codigo                
 end                
*/                
                
                
                
-- ALTERAR ORGÃO LOCAL E TIPO DE UTI --------------------------------------------------------------------------------------------------------------------                
if @opcao = 7                
begin                
 update unidade                
 set  unid_orgao_local         = @unid_orgao_local,                
         unid_tipo_uti          = @unid_tipo_uti,                
                unid_taxa_cesaria         = @unid_taxa_cesaria,                
  unid_critica_aih_gravacao  = @unid_critica_aih_gravacao,                
  unid_competencia_anterior  = @unid_competencia_anterior,                
  unid_competencia_atual     = @unid_competencia_atual,                
  unid_teto_competencia      = @unid_teto_competencia,                
  unid_cgc_faturamento    = @unid_cgc_faturamento,                
         unid_razao_social_cartorio = @unid_razao_social_cartorio,                
  unid_limite_apresentacao_aih    = @unid_limite_apresentacao_aih,                
  atendimento_encerrado  = @atendimento_encerrado,                  
  unid_integracao_bombeiro    = @unid_integracao_bombeiro,
  Cnes_Unidade_Faturamento = @Cnes_Unidade_Faturamento ,
  Usa_Cid_Secundario_Novo =@Usa_Cid_Secundario_Novo                        
 where  unid_codigo = @codigo                
end                
                
                
---------------------Consulta dos Dados em CNES_Instalacao_Fisica_Unidade-------------                
IF @opcao = 9                
   BEGIN                
 SELECT TOP 1 unid_codigo FROM CNES_Instalacao_Fisica_Unidade                
 WHERE UNID_CODIGO = @CODIGO                
   END                
----------------------------- Selecao para Carga dos Dados ------------------------------------                
if @opcao = 10                
 begin                
  SELECT                 
   A.InsFis_codigo,                 
   A.InsFisAss_qtde,                 
   A.InsFisAss_num_leitos,                
   B.SubIns_codigo,                 
   B.InsFis_descricao,                 
   B.TipIns_codigo,                
   C.SubIns_descricao                
  FROM                   
   CNES_Instalacao_Fisica_Unidade A,                 
   CNES_Instalacao_Fisica B,                
   CNES_SubTipo_Instalacao C,                
   CNES_tipo_Instalacao D,                
   Unidade U                
  WHERE                  
       A.InsFis_codigo = B.InsFis_codigo and                
  B.SubIns_codigo = C.SubIns_codigo and                
       B.TipIns_codigo = D.TipIns_codigo and                
       A.Unid_codigo   = U.Unid_codigo and                
   U.Unid_codigo   = @codigo                
 end                
----------------------------- Selecao para Carga dos Dados ------------------------------------                
if @opcao = 11                
 begin                
  SELECT TA.TIPATNPRE_DESCRICAO AS Atendimento,TC.TIPCON_DESCRICAO AS Convênio,AU.TIPATNPRE_CODIGO,TC.TIPCON_CODIGO                
  FROM   UNIDADE                  UN,                
         CNES_Tipo_Atend_Prestado TA,                 
         CNES_Atendimento_Unidade AU,                
         CNES_TIPO_CONVENIO       TC                 
  WHERE  UN.UNID_CODIGO      = @codigo                
  AND    AU.UNID_CODIGO      = UN.UNID_CODIGO                
  AND    TA.TIPATNPRE_CODIGO = AU.TIPATNPRE_CODIGO                
  AND    TC.TIPCON_CODIGO    = AU.TIPCON_CODIGO                
 end                
----------------------------- Selecao para Carga dos Dados ------------------------------------                
if @opcao = 12                
 begin                
  SELECT V.UNIVINSUS_CONTRATO_MUNICIPAL,                
                       V.UNIVINSUS_DATPUBLICACAO_MUNICIPAL,                
         V.UNIVINSUS_CONTRATO_ESTADUAL,                
         V.UNIVINSUS_DATPUBLICACAO_ESTADUAL,                
         V.BAN_CODIGO,                
                       V.AGEBAN_CODIGO,                
                       V.UNIVINSUS_CONTA_CORRENTE,                
                       V.UNIVINSUS_DATEXPEDICAO,                
                       V.UNIVINSUS_ALVARA,                
                       V.UNIVINSUS_ORGEXPALVARA                
  FROM   CNES_UNIDADE_VINC_SUS  V,                
         UNIDADE                U                
  WHERE  U.UNID_CODIGO     = @codigo                
  AND    V.UNID_CODIGO     = U.UNID_CODIGO                
 end                
----------------------------- Selecao para Carga dos Dados ------------------------------------                
if @opcao = 13                
 begin                
      select  S.SerRef_rad_salas_simulacao,                
   S.SerRef_rad_salas_planejamento,                
   S.SerRef_rad_salas_armaz_fontes,                
   S.SerRef_rad_salas_confec_masc,                
   S.SerRef_rad_salas_confec_molde,                
   S.SerRef_rad_salas_bloco_pers,                
   S.SerRef_qui_salas_armazenagem,                
   S.SerRef_qui_salas_preparo,                
   S.SerRef_qui_salas_curta_duracao,                
   S.SerRef_qui_salas_longa_duracao,                
   S.SerRef_qui_salas_fluxo_laminar,                
   S.SerRef_rad_eqp_simulador,                
   S.SerRef_rad_eqp_ate_6mev,                
   S.SerRef_rad_eqp_maior_6mev_sem,                
   S.SerRef_rad_eqp_maior_6mev_com,                
   S.SerRef_rad_eqp_orto_1050kv,                
   S.SerRef_rad_eqp_orto_50150kv,                
   S.SerRef_rad_eqp_orto_150500kv,                
   S.SerRef_rad_eqp_cobalto,                
   S.SerRef_rad_eqp_braqui_baixa,                
   S.SerRef_rad_eqp_braqui_media,                
   S.SerRef_rad_eqp_braqui_alta,                
   S.SerRef_rad_eqp_monitor_area,                
   S.SerRef_rad_eqp_monitor_individual,                
   S.SerRef_rad_eqp_sist_comp,                
   S.SerRef_rad_eqp_dosimetro,                
   S.SerRef_rad_eqp_fonte_selada                
  from CNES_Servico_Infra_Unidade  S,                
       Unidade U                
  where S.Unid_codigo  = U.Unid_codigo    and                
               S.Unid_codigo  = @codigo                
 end                
----------------------------- Atualiza Dados ------------------------------------                
if @opcao = 14                
 begin                
                 
  -- Atualiza na Tabela Unidade                
  UPDATE UNIDADE                
  SET                
   unid_param_movpront_amb  = @unid_param_movpront_amb,                
   unid_param_movpront_int  = @unid_param_movpront_int,                   
   unid_param_movpront_adm  = @unid_param_movpront_adm,                   
   unid_param_guarda_movpront = @unid_param_guarda_movpront,                
   unid_UsaInfMilitar      = @unid_UsaInfMilitar,                
   unid_UsaNumObito      = @unid_UsaNumObito,                
   unid_PrefixoRN       = @unid_PrefixoRN,                    
   unid_usa_meses       = @unid_usa_meses,                
   unid_DiasRetroSolic      = @DiasRetroSolic,                
   unid_SMS_envio    = @Diasconsulta,                
   Unid_Integra_Organograma = @Unid_Integracao_Organograma,              
   unid_integracao_bombeiro = @unid_integracao_bombeiro,                
   unid_integracao_rh       = @Unid_Integracao_rh,                  
   unid_usa_acolhimento = @unid_usa_acolhimento,            
   unid_modelo_risco = @unid_modelo_risco,        
   unid_etapa_classificacao = @unid_etapa_classificacao,        
   unid_encaminhamento_ambulatorial = @unid_encaminhamento_ambulatorial,        
   unid_gera_prontuario = @unid_gera_prontuario,        
   fluxo_atendimento = @fluxo_atendimento,       
   unid_param_IMPRIME_DECLARACOES_A5 = @unid_param_IMPRIME_DECLARACOES_A5,      
   recidiva    = @recidiva,      
   unid_param_Unificacao_de_Boletim = @unid_param_Unificacao_de_Boletim,       
   unid_Usa_Encaminhamento = @unid_Usa_Encaminhamento,    
   cor_Encainhamento = @cor_Encainhamento,
   unid_Radiologia_Entrega_Protocolo = @unid_Radiologia_Entrega_Protocolo,
   unid_usa_ambulancia  = @unid_usa_ambulancia,
   unid_Usa_SISPRENATAL = @unid_Usa_SISPRENATAL,
   unid_Usa_Orientacao = @unid_Usa_Orientacao, 
   Usa_BaixaBoletimSimplificado = @Usa_BaixaBoletimSimplificado,        
   unid_param_IMPRIME_Paciente = @unid_param_IMPRIME_Paciente,
   CBO_Medico_Radiologia = @CBO_Medico_Radiologia ,           
   nao_usa_vinculo_internacao = @nao_usa_vinculo_internacao,
   unid_LocalImpressoraIdentificacao = @unid_LocalImpressoraIdentificacao,
   No_Imp_Pulseira_Identificacao = @No_Imp_Pulseira_Identificacao,
   UsaProtocoloDengue = @UsaProtocoloDengue,
   EnvioSMS_Dias = @EnvioSMS_Dias,
   filaDeEspera = @filaDeEspera,
   SinalAlertaFilaEspera = @SinalAlertaFilaEspera,
   Usa_PriorizacaoIdosoFilaEspera = @Usa_PriorizacaoIdosoFilaEspera,
   Usa_PrescricaoEletronica = @Usa_PrescricaoEletronica,
   UNID_CNSObrigatorio = @ParbolCheckCNS,
   UNID_CPFObrigatorio = @ParbolCheckCPF,
   ProtocoloCovid = @ProtocoloCovid
  
  WHERE unid_codigo = @codigo 
                
  SET @S8=NULL                
                 
  SELECT @ARRAY1 = @lista_eventos_unidade                
  SELECT @DELIMITADOR = '^'                
                  
  IF OBJECT_ID('#ARRAY59') > 0 DROP TABLE #ARRAY59;                
  CREATE TABLE #ARRAY59(ITEM_ARRAY1 VARCHAR(4),UNID char(4),DBZ VARCHAR(25))                
                  
  DELETE FROM Unidade_TipoEvento                
  WHERE  unid_codigo  = @codigo                
                  
  WHILE LEN(@ARRAY1) > 0                
  BEGIN                
     SELECT @S8 = LTRIM(SUBSTRING(@ARRAY1, 1, CHARINDEX(@DELIMITADOR, @ARRAY1) - 1))                
                  
     INSERT INTO #ARRAY59 (ITEM_ARRAY1,UNID,DBZ) VALUES (@S8,@codigo,NULL)                
                  
     SELECT @ARRAY1 = SUBSTRING(@ARRAY1, CHARINDEX(@DELIMITADOR, @ARRAY1) + 1, LEN(@ARRAY1))                
  END                
                  
  INSERT INTO Unidade_TipoEvento (IdTipoEvento,unid_codigo,DBNAME)                
  SELECT DISTINCT ITEM_ARRAY1,UNID,DBZ FROM #ARRAY59                
                 
  DROP TABLE #ARRAY59                
                
  -- Altera a Tabela controle_sequencial    
 IF @Proximo is not null               
 Begin              
   IF (NOT EXISTS (SELECT 1 FROM CONTROLE_SEQUENCIAL WHERE unid_codigo = @CODIGO and CtrlSeq_Chave = 'Obito_Numero' and CtrlSeq_Data = '19000101'))    
   begin    
    insert into controle_sequencial               
     (unid_codigo, CtrlSeq_Chave, CtrlSeq_Data, CtrlSeq_Proximo)              
    values              
     (@Codigo, 'Obito_Numero', '19000101', @Proximo)              
   end    
   else              
   begin    
    update controle_sequencial               
    set CtrlSeq_Proximo = @Proximo              
    where unid_codigo = @CODIGO              
    and CtrlSeq_Chave = 'Obito_Numero'              
    and CtrlSeq_Data = '19000101'              
  end      
 End     
 end                
----------------------------- Selecao para Carga dos Dados ------------------------------------                
if @opcao = 15                
 begin                
                
  DECLARE @listaEventos VARCHAR(100)                 
  set @listaEventos= null                
  SELECT                 
      @listaEventos = COALESCE(@listaEventos + '^', '') + convert(VARCHAR,IdTipoEvento)                
  FROM                 
      Unidade_TipoEvento                 
  WHERE unid_codigo = @codigo                
                
  Execute ksp_controle_sequencial @codigo, 'Obito_Numero', '19000101', 1, 10, 1, @NovoCodigo = @UltCodigo OUTPUT                
                
  Select  UNID_CODIGO,                 
   unid_param_movpront_amb,                  
   unid_param_movpront_int,                  
   unid_param_movpront_adm,                  
   unid_param_guarda_movpront,                 
   unid_UsaInfMilitar,                  
   unid_UsaNumObito,                  
   unid_PrefixoRN,                  
   cast(unid_usa_meses as varchar) as unid_usa_meses,                
   cast(unid_DiasRetroSolic as varchar) as unid_DiasRetroSolic,                 
   cast(unid_SMS_envio as varchar) as unid_SMS_envio,                
   Unid_Integra_Organograma,                
   @listaEventos AS ListaEventos,                
   unid_integracao_bombeiro,              
   unid_integracao_rh,                  
   convert(varchar,@UltCodigo) as numObito,            
   unid_usa_acolhimento,        
   unid_etapa_classificacao,        
   unid_modelo_risco,        
   unid_encaminhamento_ambulatorial,        
   unid_gera_prontuario,       
   fluxo_atendimento,      
   unid_param_IMPRIME_DECLARACOES_A5,      
   recidiva,      
   unid_param_Unificacao_de_Boletim,    
   unid_Usa_Encaminhamento,    
   cor_Encainhamento,
   unid_Radiologia_Entrega_Protocolo,
   unid_usa_ambulancia,
   unid_Usa_SISPRENATAL,
   unid_Usa_Orientacao,
   Usa_BaixaBoletimSimplificado,
   unid_param_IMPRIME_Paciente,
   CBO_Medico_Radiologia,
   nao_usa_vinculo_internacao,
   unid_LocalImpressoraIdentificacao,
   No_Imp_Pulseira_Identificacao,
   UsaProtocoloDengue, 
   EnvioSMS_Dias,
   filaDeEspera,
   SinalAlertaFilaEspera,
   Usa_PriorizacaoIdosoFilaEspera,
   Usa_PrescricaoEletronica,
   UNID_CNSObrigatorio,
   UNID_CPFObrigatorio,
   isnull(ProtocoloCovid, 0) as ProtocoloCovid

  from  UNIDADE                
  where  unid_codigo = @CODIGO                
 end           

---------------------------------------------------------------------------------
if @opcao = 16                
 begin      
  set @Sql = 'SELECT '                
  set @sql = @sql + ' u.unid_codigo,'                 
  set @sql = @sql + ' u.unid_descricao,'                
  set @sql = @sql + ' u.unid_sigla,'                
  set @sql = @sql + ' u.unid_CodigoCNES'                    
                 
  set @sql = @sql + ' FROM '                
  set @sql = @sql + ' unidade u '                
  set @sql = @sql + ' LEFT JOIN natureza_unidade n ON u.nat_codigo = n.nat_codigo'                
  set @sql = @sql + ' LEFT JOIN tipo_unidade tu ON u.tpunid_codigo = tu.tpunid_codigo'                
  set @sql = @sql + ' LEFT JOIN tipo_prestador tp ON u.tipprest_codigo = tp.tipprest_codigo'                
  set @sql = @sql + ' LEFT JOIN turno t ON u.tur_codigo = t.tur_codigo'                
  set @sql = @sql + ' LEFT JOIN fluxo f ON u.flu_codigo = f.flu_codigo'                
  set @sql = @sql + ' LEFT JOIN nivel_hierarquia  nh ON u.niv_codigo = nh.niv_codigo'                
  set @sql = @sql + ' LEFT JOIN cep c ON u.cep_sequencial= c.cep_sequencial'                
  set @sql = @sql + ' LEFT JOIN municipio m ON m.mun_codigo = c.mun_codigo'                
  set @sql = @sql + ' LEFT JOIN bairro b ON b.bai_codigo = c.bai_codigo AND b.mun_codigo = m.mun_codigo'                
  set @sql = @sql + ' LEFT JOIN CNES_Tipo_Situacao_Unidade ts ON u.TipSitUni_codigo = ts.TipSitUni_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Regiao_Saude rs ON u.RegSau_codigo = rs.RegSau_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Micro_Regiao mr ON u.MicReg_codigo = mr.MicReg_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Modulo_Assistencial ma ON u.ModAss_codigo = ma.ModAss_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Esfera_Adm ea ON u.EsfAdm_codigo = ea.EsfAdm_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Natureza_Organizacao no ON u.NatOrg_codigo = no.NatOrg_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Retencao_Tributaria rt ON u.RetTri_codigo = rt.RetTri_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Ativ_Ensino ae ON u.AtiEns_codigo = ae.AtiEns_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Nivel_hierarquia nv ON u.NivHie_codigo = nv.NivHie_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Fluxo_Clientela fc ON u.FluCli_codigo = fc.FluCli_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Acreditacao_Avaliacao aa ON u.AcrAva_codigo = aa.AcrAva_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Tipo_Atendimento ta ON u.TipAtn_codigo = ta.TipAtn_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_Nivel_Gestao ng ON u.NivGes_codigo = ng.NivGes_codigo'
  set @sql = @sql + ' LEFT JOIN CNES_SubTipo_Unidade stu ON u.subTipo_codigo = stu.subTipo_codigo'                
               
  set @sql = @sql + ' WHERE 1=1 AND ('                
                 
  if @Unid_CODIGOCNES is not null                
  begin                
   Set @var1 = @Unid_CODIGOCNES      
   Exec ksp_ParametroPesquisa @var1,'u.unid_CodigoCNES',@tp_pesq, 't', @par output                
   set @Erro = @Erro + @@error                
   Set @Sql = @Sql + @par      
   
  end                
        
  IF @Unid_CODIGOCNES is not null AND @unid_descricao is not null
  BEGIN
	Set @Sql = @Sql + ' OR '
  END
        
  if @unid_descricao is not null                
  begin                
   Set @var1 = @unid_descricao                
   Exec ksp_ParametroPesquisa @var1,'u.unid_descricao',@tp_pesq, 't', @par output                
   set @Erro = @Erro + @@error                
   Set @Sql = @Sql + @par      
  end                
        
  set @sql = @sql + ')'      
        
  print @Sql      
                 
  exec(@Sql)      
 end      
           
----------------------------- Atualiza Identificacao Basica ------------------------------------                  
if @opcao = 17      
            
 begin                  
                   
  -- Atualiza na Tabela Unidade    
                
  UPDATE UNIDADE                  
  SET       
   unid_codigo          = @CODIGO,      
   UNID_DESCRICAO		= @UNID_DESCRICAO,  
   TPUNID_CODIGO        = @TPUNID_CODIGO,     
   UNID_SIGLA			= @UNID_SIGLA,                  
   UNID_CGC				= @UNID_CGC,    
   UNID_ENDERECO_NUM	= @UNID_ENDERECO_NUM,   
   UNID_ENDERECO_COMPL  = @UNID_ENDERECO_COMPL,   
   UNID_TELEFONE		= @UNID_TELEFONE,   
   UNID_EMAIL			= @UNID_EMAIL,    
   UNID_FIDEPS			= @UNID_FIDEPS,           
   UNID_PESSOA			= @UNID_PESSOA,   
   UNID_CODIGOUPS		= @UNID_CODIGOUPS,   
   UNID_CODIGOCNES		= @UNID_CODIGOCNES,                  
   UNID_ORGAO_LOCAL     = @UNID_ORGAO_LOCAL,  
   unid_cpf				= @unid_cpf,   
   UNID_NOME_FANTASIA   = @UNID_NOME_FANTASIA,      
   UNID_FAX				= @UNID_FAX,                  
   UNID_DDD				= @UNID_DDD,        
   subtipo_codigo       = @subTipoUnidade_codigo,  
   UNID_DIRETOR_CLINICO = @UNID_DIRETOR_CLINICO,   
   UNID_DIRETOR_CPF		= @UNID_DIRETOR_CPF,  
   CEP_SEQUENCIAL		= @CEP_SEQUENCIAL    
             
  WHERE unid_codigo = @codigo    

  -- Insere/Altera parÃ¢metros de RelatÃ³rio - PARAMETRO_RELATORIO_PARAMSET - unidade_parametro_relatorio - parametro_boletim e parametro_unidade_rede
  execute ksp_Unidade_Dados_Fundamentais @Codigo

  
END  
            
----------------------------- CARREGA TIPO PRESTADOR A PARTIR DA ESF_ADM E RET_TRI ------------------------------------            
if @opcao = 18  
 begin      
  select tipprest_descricao, tipprest_codigo  
  from tipo_prestador  
  where EsfAdm_codigo = @ESFADM_CODIGO  
   and  RetTri_codigo = @RETTRI_CODIGO  
 end  


---------------------------------- Update na tabela que guarda os parametros da unidade exclusivos de faturamento --------------------------------------------------
if @opcao = 19
	begin
		update parametro_unidade_faturamento set 
			unid_codigo = @codigo,
			UNID_ORGAO_LOCAL  = @Unid_Orgao_Local,
			UNID_TIPO_UTI = @Unid_Tipo_UTI,
			UNID_CGC = @UNID_CGC_FATURAMENTO,
			UNID_RAZAO_SOCIAL_CARTORIO = @unid_Razao_Social_Cartorio,
			UNID_CRITICA_AIH_GRAVACAO = @Unid_critica_Aih_Gravacao,
			UNID_COMPETENCIA_ANTERIOR = @Unid_Competencia_Anterior,
			atendimento_encerrado = @atendimento_encerrado,
			UNID_TETO_COMPETENCIA = @Unid_Teto_Competencia,
			UNID_COMPETENCIA_ATUAL = @Unid_Competencia_Atual,
			UNID_TAXA_CESARIA = @Unid_taxa_cesaria,
			UNID_LIMITE_APRESENTACAO_AIH = @unid_limite_apresentacao_aih,
			Cnes_Unidade_Faturamento = @Cnes_Unidade_Faturamento,
			Usa_Cid_Secundario_Novo = @Usa_Cid_Secundario_Novo,
			Intervalo_Internacao_Consolidada   = @Intervalo_Internacao_Consolidada,
			Usa_Cep_Automatico =  @Cep_Automatico,
			FaturarExamesPartirPedidoRadiologia = @FaturarExamesPartirPedidoRadiologia
		where
			unid_codigo = @codigo
	end



------------------------------------- insert na tabela parametro_unidade_faturamento ----------------------------------------------------
if @opcao = 20
	begin
		insert parametro_unidade_faturamento
		(unid_codigo,UNID_ORGAO_LOCAL,UNID_TIPO_UTI,UNID_CGC,UNID_RAZAO_SOCIAL_CARTORIO,
		UNID_CRITICA_AIH_GRAVACAO,UNID_COMPETENCIA_ANTERIOR,atendimento_encerrado,
		UNID_TETO_COMPETENCIA,UNID_COMPETENCIA_ATUAL,UNID_TAXA_CESARIA,UNID_LIMITE_APRESENTACAO_AIH,Cnes_Unidade_Faturamento,
		Usa_Cid_Secundario_Novo,Intervalo_Internacao_Consolidada,Usa_Cep_Automatico, FaturarExamesPartirPedidoRadiologia)
		values
		(@codigo,@Unid_Orgao_Local,@Unid_Tipo_UTI,@UNID_CGC_FATURAMENTO,@unid_Razao_Social_Cartorio,@Unid_critica_Aih_Gravacao,
		@Unid_Competencia_Anterior,@atendimento_encerrado,@Unid_Teto_Competencia,@Unid_Competencia_Atual,
		@Unid_taxa_cesaria,@unid_limite_apresentacao_aih,@Cnes_Unidade_Faturamento,@Usa_Cid_Secundario_Novo,
		@Intervalo_Internacao_Consolidada,@Cep_Automatico, @FaturarExamesPartirPedidoRadiologia)
	end


----------------------------------------- select na tabela parametro_unidade_faturamento -----------------------------------------------------------------
if @opcao = 21
	begin
		select	
			unid_codigo,UNID_ORGAO_LOCAL,UNID_TIPO_UTI,UNID_CGC as 'UNID_CGC_FATURAMENTO',UNID_RAZAO_SOCIAL_CARTORIO,
			UNID_CRITICA_AIH_GRAVACAO,UNID_COMPETENCIA_ANTERIOR,atendimento_encerrado,
			UNID_TETO_COMPETENCIA,UNID_COMPETENCIA_ATUAL,UNID_TAXA_CESARIA,UNID_LIMITE_APRESENTACAO_AIH,
			Cnes_Unidade_Faturamento,Usa_Cid_Secundario_Novo,Intervalo_Internacao_Consolidada,Usa_Cep_Automatico
		from 
			parametro_unidade_faturamento
		where 
			unid_codigo = @codigo
	end

--------------------------------------------------------------------------------------------------------------------------------------------------------       
If (@Erro <> 0)                
     BEGIN                
	  Select @sql = 'ERRO - Tabela de Unidade . Opção : ' + convert(varchar,@opcao)                
          RAISERROR(@sql,1,1)                
       END
GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_checkin_Profissional]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_checkin_Profissional]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Agenda_Ambulatorial_Aberta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Agenda_Ambulatorial_Aberta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_Agenda_Eventos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_Agenda_Eventos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_Agenda_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_Agenda_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Agenda_Historico_Paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Agenda_Historico_Paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_anatomiapatologica_VerificaAgenda]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_anatomiapatologica_VerificaAgenda]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Apagar_Pedido]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Apagar_Pedido]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_ATENDIMENTO_AMBULATORIAL]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_ATENDIMENTO_AMBULATORIAL]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Atualiza_Falta_Agenda]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Atualiza_Falta_Agenda]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atualizacao_estatistica_ambulatorio_central]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atualizacao_estatistica_ambulatorio_central]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atualizacao_estatistica_diaria_internacao_central]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atualizacao_estatistica_diaria_internacao_central]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_importacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_importacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_importacao_OP1]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_importacao_OP1]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_carga_producao_externo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_carga_producao_externo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Checkin]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Checkin]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_Dados_Paciente_Agendado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_Dados_Paciente_Agendado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_EnvioSMSConsulta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_EnvioSMSConsulta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Fila_Espera]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Fila_Espera]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Fila_Usa_Classificacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Fila_Usa_Classificacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_paciente_historico_assistencial]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_paciente_historico_assistencial]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_PEP_Boletim_Atendimento_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_PEP_Boletim_Atendimento_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_PEP_Sumario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_PEP_Sumario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_portal_medico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_portal_medico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_profissional_lotacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_profissional_lotacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Reagenda_Consulta_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Reagenda_Consulta_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_registro_prontuario_historico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_registro_prontuario_historico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Agenda_Consulta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Agenda_Consulta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Agenda_Medica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Agenda_Medica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_AGENDA_PRODUCAO_CLINICA_SALDO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_AGENDA_PRODUCAO_CLINICA_SALDO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_agenda_producao_usuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_agenda_producao_usuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_AGENDAS_MARCADAS_APOS_FECHAMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_AGENDAS_MARCADAS_APOS_FECHAMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Ambulatorio_Marcacao_Consulta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Ambulatorio_Marcacao_Consulta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ambulatorio_marcacao_consulta_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ambulatorio_marcacao_consulta_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Ambulatorio_Pendente_Realizado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Ambulatorio_Pendente_Realizado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_atendimento_ambulatorial]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_atendimento_ambulatorial]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Posicao_Agenda]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Posicao_Agenda]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Producao_Data_Turno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Producao_Data_Turno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Marcacao_Mesmo_Paciente_Dia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Marcacao_Mesmo_Paciente_Dia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_prontuario_em_ordem]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_prontuario_em_ordem]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_RESUMO_DIARIO_CONSULTAS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_RESUMO_DIARIO_CONSULTAS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_RESUMO_DIARIO_CONSULTAS_WEB]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_RESUMO_DIARIO_CONSULTAS_WEB]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSP_RESUMO_DIARIO_CONSULTAS_LINK_WEB]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSP_RESUMO_DIARIO_CONSULTAS_LINK_WEB]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_resumo_diario_consultas_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_resumo_diario_consultas_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Atendimento_Historico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Atendimento_Historico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_UPA_EvolucaoAtendimento_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_UPA_EvolucaoAtendimento_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Medicamentos_PrescritosPorAgendamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Medicamentos_PrescritosPorAgendamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Todos_Itens_PrescritosPorAgendamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Todos_Itens_PrescritosPorAgendamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_verifica_agenda]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_verifica_agenda]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_individualizado_importacao_OP1]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_individualizado_importacao_OP1]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Agenda_Marcacao_Consulta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Agenda_Marcacao_Consulta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_agenda_producao_medico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_agenda_producao_medico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Ambulatorio_Marcacao_Consulta_Modulo2]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Ambulatorio_Marcacao_Consulta_Modulo2]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Geo_AgendaPedido]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Geo_AgendaPedido]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Marcacao_Exame_Grupo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Marcacao_Exame_Grupo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Producao_Clinica_Medico_Turno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Producao_Clinica_Medico_Turno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Producao_Clinica_Turno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Producao_Clinica_Turno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Pacientes_Ausentes_Atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Pacientes_Ausentes_Atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_FILA_11]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_FILA_11]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pacientes_Observacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pacientes_Observacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_EVOLUCAO_CTI_DIURNA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_EVOLUCAO_CTI_DIURNA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Evolucao_Uti_Noturna]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Evolucao_Uti_Noturna]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Internacao_Pep_Alta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Internacao_Pep_Alta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_evolucao_impresso_cabecalho]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_evolucao_impresso_cabecalho]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_opme_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_opme_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_parecer_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_parecer_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_prontuario_internacao_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_prontuario_internacao_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Laboratorio_Laudo_Exame_Multi]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Laboratorio_Laudo_Exame_Multi]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_amostras_excluidas]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_amostras_excluidas]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_sumario_alta_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_sumario_alta_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_mapa_cirurgico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_mapa_cirurgico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Painel_Central]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Painel_Central]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Ficha_Atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Ficha_Atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_IDENTIFICACAO_PACIENTE_LEITO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_IDENTIFICACAO_PACIENTE_LEITO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KPS_UPA_EXTRACAO_ATENDIMENTO_CARTOES_TEMPOMEDIO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KPS_UPA_EXTRACAO_ATENDIMENTO_CARTOES_TEMPOMEDIO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Ambulancia_Entrada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Ambulancia_Entrada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Ambulancia_Saida]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Ambulancia_Saida]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_anatomiapatologica_OrigemPaciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_anatomiapatologica_OrigemPaciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Anotacao_Cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Anotacao_Cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Aprazamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Aprazamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atendimento_clinico_notificacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atendimento_clinico_notificacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Atualiza_Cadastro_Paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Atualiza_Cadastro_Paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Atualiza_Cadastro_Paciente_job_homonimo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Atualiza_Cadastro_Paciente_job_homonimo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_boletim]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_boletim]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_BoletimAtendimentoMedico_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_BoletimAtendimentoMedico_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_BoletimClassificacaoRiscoLog_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_BoletimClassificacaoRiscoLog_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_individualizado_importacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_individualizado_importacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_CADECO_SELECIONA_PACIENTE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_CADECO_SELECIONA_PACIENTE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_CARREGA_KLINIKOS_BOLETINS_DW]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_CARREGA_KLINIKOS_BOLETINS_DW]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CartaoIdentificacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CartaoIdentificacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CartaoVacina]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CartaoVacina]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_cirurgico_cirurgia_realizada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_cirurgico_cirurgia_realizada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_cirurgico_material_cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_cirurgico_material_cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_cirurgico_obtem_dados_cirurgico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_cirurgico_obtem_dados_cirurgico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_cirurgico_pac_procedencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_cirurgico_pac_procedencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_cirurgico_solicitacao_cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_cirurgico_solicitacao_cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_consulta_pedido_exame_anatomiapatologica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_consulta_pedido_exame_anatomiapatologica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_declaracao_paciente_internado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_declaracao_paciente_internado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_disco_aih]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_disco_aih]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_EmbaralhaNomes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_EmbaralhaNomes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_Encaminhamento_Externo_Ser2]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_Encaminhamento_Externo_Ser2]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_espelho_aih]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_espelho_aih]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_extracao_quantidade_atendimento_remocao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_extracao_quantidade_atendimento_remocao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_faturamento_carga]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_faturamento_carga]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_ficha_notificacao_compulsoria_dengue]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_ficha_notificacao_compulsoria_dengue]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_ficha_notificacao_compulsoria_geral]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_ficha_notificacao_compulsoria_geral]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Historico_Paciente_Atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Historico_Paciente_Atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_homonimo_processamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_homonimo_processamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_INTEGRACAO_INTERNACAO_SER]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_INTEGRACAO_INTERNACAO_SER]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_integracao_laboratorio_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_integracao_laboratorio_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_internacao_dados_parto]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_internacao_dados_parto]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Item_Prescricao_Medicamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Item_Prescricao_Medicamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Laboratorio_Comprovante_Coleta40]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Laboratorio_Comprovante_Coleta40]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Controle_Mapa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Controle_Mapa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Laboratorio_Folha_Rosto]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Laboratorio_Folha_Rosto]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_interface_Elemento_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_interface_Elemento_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Interfaceamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Interfaceamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Interfaceamento_6]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Interfaceamento_6]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Interfaceamento_pacientes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Interfaceamento_pacientes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Mapa_Trabalho]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Mapa_Trabalho]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Monitoracao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Monitoracao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_novo_Interfaceamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_novo_Interfaceamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_ResultadoGrade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_ResultadoGrade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_ResultadoLista]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_ResultadoLista]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_LayOut_Saida_Aih]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_LayOut_Saida_Aih]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_lista_prescricao_internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_lista_prescricao_internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_ListaAlerta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_ListaAlerta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_listagem_prontuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_listagem_prontuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Migra_Paciente_Central]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Migra_Paciente_Central]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Migra_Paciente_Central_Treinamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Migra_Paciente_Central_Treinamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Movimentacao_Laboratorio_Requisicao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Movimentacao_Laboratorio_Requisicao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_Movimentacao_Paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_Movimentacao_Paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_obito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_obito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_obito_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_obito_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_ocupacao_leito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_ocupacao_leito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_OrigemDoPaciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_OrigemDoPaciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Paciente_Aih]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Paciente_Aih]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_paciente_andamento_nome]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_paciente_andamento_nome]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_paciente_observacao_nome]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_paciente_observacao_nome]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Paciente_Plano]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Paciente_Plano]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_PacienteExterno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_PacienteExterno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pacientes_Homonimos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pacientes_Homonimos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pacientes_Permanente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pacientes_Permanente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_Pedido_Agenda]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_Pedido_Agenda]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_pedido_cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_pedido_cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_pedido_internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_pedido_internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_PEP_ENCAMINHAMENTO_PACIENTE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_PEP_ENCAMINHAMENTO_PACIENTE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_PEP_FILA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_PEP_FILA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_PEP_Receituario_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_PEP_Receituario_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pep_Relatorio_Boletim_Atendimento_Clinico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pep_Relatorio_Boletim_Atendimento_Clinico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pesquisa_Paciente_Web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pesquisa_Paciente_Web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pesquisa_Paciente_Web_Nome_Prontuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pesquisa_Paciente_Web_Nome_Prontuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Prescricao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Prescricao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Prescricao_Contingencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Prescricao_Contingencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_producao_ambulatorial_individualizado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_producao_ambulatorial_individualizado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_pronto_atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_pronto_atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Protocolo_Dengue]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Protocolo_Dengue]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Protocolo_Dengue_Relatorio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Protocolo_Dengue_Relatorio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_Carrega_Grid_Agenda_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_Carrega_Grid_Agenda_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_Enche_Grid]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_Enche_Grid]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_laudo_entrega]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_laudo_entrega]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_Laudo_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_Laudo_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_Pedido_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_Pedido_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_REGISTRO_OBITO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_REGISTRO_OBITO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_centro_cirurgico_estatistica_mensal_municipios]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_centro_cirurgico_estatistica_mensal_municipios]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_diario_Internacao_Adoslescente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_diario_Internacao_Adoslescente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_REL_HISTORICOPACIENTE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_REL_HISTORICOPACIENTE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_inter_desp_hosp_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_inter_desp_hosp_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_REL_MOV_MEDICAMENTOFARMACIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_REL_MOV_MEDICAMENTOFARMACIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_mov_medicamentofarmacia_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_mov_medicamentofarmacia_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_REL_NAOMOV_MEDICAMENTOFARMACIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_REL_NAOMOV_MEDICAMENTOFARMACIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_REL_NAOMOV_MEDICAMENTOFARMACIA_NEW]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_REL_NAOMOV_MEDICAMENTOFARMACIA_NEW]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_naomov_medicamentofarmacia_new_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_naomov_medicamentofarmacia_new_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_Procedimento_sintetico_Municipio_Bairro]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_Procedimento_sintetico_Municipio_Bairro]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_REL_SERVICO_FARMACIA_NERJ]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_REL_SERVICO_FARMACIA_NERJ]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_agenda_profissional_cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_agenda_profissional_cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_atendimento_faixa_etaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_atendimento_faixa_etaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_bpai_valor_clinica_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_bpai_valor_clinica_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_bpai_valor_origem_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_bpai_valor_origem_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_cadastro_usuario_estabelecimento_saude]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_cadastro_usuario_estabelecimento_saude]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_cartao_visita]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_cartao_visita]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_censo_emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_censo_emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_censo_hospitalar]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_censo_hospitalar]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_censo_hospitalar_paciente_internado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_censo_hospitalar_paciente_internado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_Cadastro_Novos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_Cadastro_Novos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Central_ComprEntrega_GuiaRef]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Central_ComprEntrega_GuiaRef]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_central_ficha_notificacao_compulsoria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_central_ficha_notificacao_compulsoria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_central_ficha_notificacao_compulsoria_Dengue]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_central_ficha_notificacao_compulsoria_Dengue]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_cep_invalido]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_cep_invalido]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_cirurgia_atendida_natendida]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_cirurgia_atendida_natendida]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_cirurgia_realizada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_cirurgia_realizada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Consolidado_Classificacao_Risco]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Consolidado_Classificacao_Risco]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Consolidado_Classificacao_Risco_Totalizacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Consolidado_Classificacao_Risco_Totalizacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_conta_paciente_exames]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_conta_paciente_exames]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnostico_prescricao_admitir_leito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnostico_prescricao_admitir_leito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnosticos_por_frequencia_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnosticos_por_frequencia_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnosticos_por_Municipio_e_Bairro]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnosticos_por_Municipio_e_Bairro]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_emergencia_estatistica_censo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_emergencia_estatistica_censo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Emergencia_Pendente_Realizado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Emergencia_Pendente_Realizado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Encaminhamento_Externo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Encaminhamento_Externo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Encaminhamento_Interno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Encaminhamento_Interno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_anestesiologia_tipo_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_anestesiologia_tipo_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Estatistica_Atendimentos_Profissionais]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Estatistica_Atendimentos_Profissionais]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_checkin]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_checkin]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_OBITO_CID_SEXO_PERMANENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_OBITO_CID_SEXO_PERMANENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_resumo_anestesiologia_clinica_tipo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_resumo_anestesiologia_clinica_tipo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_visitante]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_visitante]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_etiqueta_visitante_acompanhante]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_etiqueta_visitante_acompanhante]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Etiquetas_Paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Etiquetas_Paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_EVOLUCAO_CTI_Noturno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_EVOLUCAO_CTI_Noturno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_evolucao_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_evolucao_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_exame_fisico_admitir_leito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_exame_fisico_admitir_leito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_FARMACIA_ANALITICO_MEDICAMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_FARMACIA_ANALITICO_MEDICAMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_admissao_admitir_leito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_admissao_admitir_leito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_identificacao_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_identificacao_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_internacao_hospital_dia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_internacao_hospital_dia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_internacao_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_internacao_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_notificacao_compulsoria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_notificacao_compulsoria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_notificacao_compulsoria_Dengue]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_notificacao_compulsoria_Dengue]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Fila_Espera]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Fila_Espera]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_checkin]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_checkin]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_internacao_mensal]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_internacao_mensal]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_spa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_spa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_spa_mun_bai_clin_psaude]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_spa_mun_bai_clin_psaude]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_spa_mun_bai_dia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_spa_mun_bai_dia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_spa_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_spa_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_GuiaRemessaLabExterno]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_GuiaRemessaLabExterno]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_alta_mesmo_dia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_alta_mesmo_dia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_compulsoria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_compulsoria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_despesas_hospitalares]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_despesas_hospitalares]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_despesas_hospitalares_HFM]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_despesas_hospitalares_HFM]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_diaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_diaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_diaria_Internacao_Alta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_diaria_Internacao_Alta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_diaria_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_diaria_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_fora_censo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_fora_censo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_municipio_bairro]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_municipio_bairro]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_municipio_cid]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_municipio_cid]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_observacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_observacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_ocorrencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_ocorrencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_paciente_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_paciente_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_INTERNACAO_PENDENCIA_OBSERVACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_INTERNACAO_PENDENCIA_OBSERVACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_plano]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_plano]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_tempo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_tempo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internacao_tempo_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internacao_tempo_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internados_faixa_etaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internados_faixa_etaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internados_faixa_etaria_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internados_faixa_etaria_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internados_municipio_bairro]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internados_municipio_bairro]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_internados_municipio_bairro_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_internados_municipio_bairro_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_amostras_em_andamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_amostras_em_andamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_ComprovanteColeta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_ComprovanteColeta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Entrega_Exames]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Entrega_Exames]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Entrega_Exames_Sintetico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Entrega_Exames_Sintetico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_entrega_exames_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_entrega_exames_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Estatistica_Municipio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Estatistica_Municipio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_ExamesPendentes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_ExamesPendentes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_examespendentes_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_examespendentes_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_laudo_Consolidado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_laudo_Consolidado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_laudo_Consolidado_Unificado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_laudo_Consolidado_Unificado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_mapa_individual]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_mapa_individual]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_mapa_trabalho]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_mapa_trabalho]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_laboratorio_Mapa_Trabalho_Interface]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_laboratorio_Mapa_Trabalho_Interface]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Movimentacao_Diaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Movimentacao_Diaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Notificacao_Compulsoria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Notificacao_Compulsoria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Operacional_Exames_Municipio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Operacional_Exames_Municipio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_laboratorio_Preparo_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_laboratorio_Preparo_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Unidade_Solicitante_Sintetico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Unidade_Solicitante_Sintetico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Laudo_Autorizado_Paciente_Aih]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Laudo_Autorizado_Paciente_Aih]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laudo_exame_diagnose]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laudo_exame_diagnose]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laudo_solicitacao_internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laudo_solicitacao_internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laudo_solicitacao_internacao_sem_vinculo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laudo_solicitacao_internacao_sem_vinculo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_liberacao_critica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_liberacao_critica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_lista_solicitacao_exame_laboratorio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_lista_solicitacao_exame_laboratorio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_mapa_cirurgico_generico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_mapa_cirurgico_generico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_mapa_diario_censo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_mapa_diario_censo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_movimentacao_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_movimentacao_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_movimentacao_paciente_int]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_movimentacao_paciente_int]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_movimentacao_prontuario_excedido]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_movimentacao_prontuario_excedido]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_movimentacao_prontuario_historico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_movimentacao_prontuario_historico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_NOMINAL_OCORRENCIA_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_NOMINAL_OCORRENCIA_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_NOMINAL_OCORRENCIA_SPA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_NOMINAL_OCORRENCIA_SPA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_nominal_prontuarios_inativos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_nominal_prontuarios_inativos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_obitos_diarios]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_obitos_diarios]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_obitos_diarios_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_obitos_diarios_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_obitos_por_municipio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_obitos_por_municipio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_origem_criacao_prontuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_origem_criacao_prontuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Pacientes_Homonimos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Pacientes_Homonimos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_internados]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_internados]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_internados_alfabetica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_internados_alfabetica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_internados_localizacao_fisica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_internados_localizacao_fisica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_internados_tempo_permanencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_internados_tempo_permanencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_internados_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_internados_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_militar]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_militar]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_prontuario_aberto]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_prontuario_aberto]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pacientes_sem_prontuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pacientes_sem_prontuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pedidos_pendentes_x_realizados]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pedidos_pendentes_x_realizados]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pos_anestesico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pos_anestesico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pre_anestesico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pre_anestesico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pre_operatorio_completo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pre_operatorio_completo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pre_operatorio_parcial]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pre_operatorio_parcial]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_prescricao_antimicrobiano]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_prescricao_antimicrobiano]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Relatorio_Prescricao_Completa_ITEM_APRAZAMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Relatorio_Prescricao_Completa_ITEM_APRAZAMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_procedimentos_por_frequencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_procedimentos_por_frequencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_procedimentos_por_frequencia_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_procedimentos_por_frequencia_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_checkin]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_checkin]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_checkout]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_checkout]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_prontuarios_repetidos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_prontuarios_repetidos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_protocolo_risco_queda_admitir_leito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_protocolo_risco_queda_admitir_leito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_agenda_central_sub3]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_agenda_central_sub3]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Agenda_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Agenda_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_comprovante_protocolo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_comprovante_protocolo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Laudo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Laudo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Laudo_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Laudo_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Pedido_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Pedido_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_reentradas]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_reentradas]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_registro_aberto]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_registro_aberto]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_REGISTRO_OBITO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_REGISTRO_OBITO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Reinternacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Reinternacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_restricoes_visita]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_restricoes_visita]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_resumo_alta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_resumo_alta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_saidas_diaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_saidas_diaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_saidas_diaria_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_saidas_diaria_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Sem_CertNascimento_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Sem_CertNascimento_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Solicitacao_TRS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Solicitacao_TRS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_spa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_spa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_unidade_destino_diario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_unidade_destino_diario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_UPA_DECLARACAO_ATESTADO_MEDICO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_UPA_DECLARACAO_ATESTADO_MEDICO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_urgencia_ficha_notificacao_compulsoria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_urgencia_ficha_notificacao_compulsoria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_urgencia_ficha_notificacao_compulsoria_dengue]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_urgencia_ficha_notificacao_compulsoria_dengue]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Urgencia_Pendente_Realizado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Urgencia_Pendente_Realizado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Valores_Nao_Faturados]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Valores_Nao_Faturados]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Valores_Nao_Faturados_Analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Valores_Nao_Faturados_Analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_visitante_por_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_visitante_por_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_restricoes_visita]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_restricoes_visita]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Solicitacao_Pedido_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Solicitacao_Pedido_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_SOS_Emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_SOS_Emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_SUB_Prescricao_Completa_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_SUB_Prescricao_Completa_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_SUB_RECEITAS_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_SUB_RECEITAS_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_UPA_Evolucao_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_UPA_Evolucao_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_FILA_12]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_FILA_12]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_FILA_31]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_FILA_31]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_FILA_8]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_FILA_8]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_upa_fila_internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_upa_fila_internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_upa_fila_pep]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_upa_fila_pep]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_FILA_Regulacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_FILA_Regulacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Relatorio_Coleta_Exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Relatorio_Coleta_Exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Requisicao_Externa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Requisicao_Externa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_visitante]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_visitante]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atos_profissionais]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atos_profissionais]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Item_Dispensado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Item_Dispensado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_integracao_laboratorio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_integracao_laboratorio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Obito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Obito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Pacientes_Observacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Pacientes_Observacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_SER2ParametroIntegracao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_SER2ParametroIntegracao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Agenda_Permissao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Agenda_Permissao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atualizacao_historico_organograma]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atualizacao_historico_organograma]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_enfermaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_enfermaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_procedimento_ambulatorial]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_procedimento_ambulatorial]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_procedimento_faturamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_procedimento_faturamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_procedimentos_faturamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_procedimentos_faturamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_boletim_movimento_hospitalar]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_boletim_movimento_hospitalar]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_boletim_movimento_hospitalar_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_boletim_movimento_hospitalar_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Cadastro_Obito_Geral_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Cadastro_Obito_Geral_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_anual_internacoes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_anual_internacoes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_anual_mortalidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_anual_mortalidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_anual_ocupacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_anual_ocupacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_mensal_internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_mensal_internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_identificacao_prontuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_identificacao_prontuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_oferta_leitos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_oferta_leitos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ORGANOGRAMA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ORGANOGRAMA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_upa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_upa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Setor_Stok]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Setor_Stok]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Usuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Usuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Clinicas]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Clinicas]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_emergencia_hora_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_emergencia_hora_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_emergencia_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_emergencia_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_procedimentos_realizados]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_procedimentos_realizados]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnosticos_diarios]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnosticos_diarios]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnosticos_diarios_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnosticos_diarios_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_leitos_apoio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_leitos_apoio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_LEITOS_APOIO_WEB]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_LEITOS_APOIO_WEB]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_mensal_diagnostico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_mensal_diagnostico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_mensal_diagnostico_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_mensal_diagnostico_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Resumo_Alta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Resumo_Alta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Atendimentos_Andamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Atendimentos_Andamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Fila_Atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Fila_Atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_CONSOLIDACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_CONSOLIDACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_ConsultaProfissionalEspecialidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_ConsultaProfissionalEspecialidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_centro_cirurgico_anestesia_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_centro_cirurgico_anestesia_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_centro_cirurgico_estatistica_mensal]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_centro_cirurgico_estatistica_mensal]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_centro_cirurgico_motivos_suspensao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_centro_cirurgico_motivos_suspensao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Estoque]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Estoque]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Profissional_Lotacao_Posto_Enfermagem]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Profissional_Lotacao_Posto_Enfermagem]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_enche_combo_opcao_126]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_enche_combo_opcao_126]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_HospitalDia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_HospitalDia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Leitos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Leitos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Posto_Enfermagem]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Posto_Enfermagem]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_AnatomiaPatologica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_AnatomiaPatologica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_aprazamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_aprazamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_FARMACIA_PACIENTES_NAO_CADASTRADOS]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_FARMACIA_PACIENTES_NAO_CADASTRADOS]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_grade_ocupacao_leito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_grade_ocupacao_leito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_leitos_operacionais]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_leitos_operacionais]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_prescricao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_prescricao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_UPA_CONSOLIDACAO_PACIENTE_OBSERVACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_UPA_CONSOLIDACAO_PACIENTE_OBSERVACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_WEBSERVICE]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_WEBSERVICE]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_AIH_exportacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_AIH_exportacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_conta_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_conta_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_acesso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_acesso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Administracao_meta_procedimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Administracao_meta_procedimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_anatomiapatologica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_anatomiapatologica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_anatomiapatologica_Pedido]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_anatomiapatologica_Pedido]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_baa_Medicamentos_Prescritos_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_baa_Medicamentos_Prescritos_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_baa_parecer_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_baa_parecer_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_consulta_pedido_exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_consulta_pedido_exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_evolucaobase_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_evolucaobase_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_internacao_procedimento_cid ]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_internacao_procedimento_cid ]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_Enche_Combo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_Enche_Combo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_radiologia_Executa_Filtros]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_radiologia_Executa_Filtros]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_AnatomiaPatologica_Pedido]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_AnatomiaPatologica_Pedido]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Boletim_Emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Boletim_Emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Cancelamento_fila]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Cancelamento_fila]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Estatistica_Analitica_Unidade_Referenciada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Estatistica_Analitica_Unidade_Referenciada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_emergencia_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_emergencia_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_material]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_material]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_PRODUCAO_PROFISSIONAL]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_PRODUCAO_PROFISSIONAL]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_sala]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_sala]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_bpa_hosp]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_bpa_hosp]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Medicamento_Saldo_Grupo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Medicamento_Saldo_Grupo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_profissional]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_profissional]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_profissional_acolhimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_profissional_acolhimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_profissional_risco]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_profissional_risco]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Estatistica_ClinicaExame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Estatistica_ClinicaExame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Estatistica_ExameUnidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Estatistica_ExameUnidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Estatistica_Pedido_Por_Dia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Estatistica_Pedido_Por_Dia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Estatistica_Pedido_Por_Hora]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Estatistica_Pedido_Por_Hora]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_sub_estClinicaSala]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_sub_estClinicaSala]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_sub_estMaterialClinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_sub_estMaterialClinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Resumo_Atendimentos_Impressso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Resumo_Atendimentos_Impressso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Acolhimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Acolhimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Medicamentos_Prescritos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Medicamentos_Prescritos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_RemocoesPorUnidadeDetalhado]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_RemocoesPorUnidadeDetalhado]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_AcessoSeguranca]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_AcessoSeguranca]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atendimento_emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atendimento_emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Atendimento_Reavaliacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Atendimento_Reavaliacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atualizacao_estatistica_diaria_internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atualizacao_estatistica_diaria_internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_baa_todos_itens_prescritos_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_baa_todos_itens_prescritos_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_cirurgico_pre_anestesia_avaliacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_cirurgico_pre_anestesia_avaliacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_consulta_pedido_exame_laboratorio]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_consulta_pedido_exame_laboratorio]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_estatistica_upa_diagnostico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_estatistica_upa_diagnostico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_evolucao_impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_evolucao_impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_historico_atendimento_clinico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_historico_atendimento_clinico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Internacao_Clinica_Atual]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Internacao_Clinica_Atual]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_MOVIMENTACAO_PRONTUARIO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_MOVIMENTACAO_PRONTUARIO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_ordem_meta_procedimento_ambulatorial]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_ordem_meta_procedimento_ambulatorial]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_Questionario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_Questionario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_pext_atendimento_clinica_sexo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_pext_atendimento_clinica_sexo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_pext_marcacao_clinica_idade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_pext_marcacao_clinica_idade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_pext_marcacao_clinica_idade_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_pext_marcacao_clinica_idade_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_pext_municipio_bairro]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_pext_municipio_bairro]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_pext_paciente_externo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_pext_paciente_externo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_rel_pext_paciente_externo_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_rel_pext_paciente_externo_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_apac_valor_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_apac_valor_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_bpai_valor_origem_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_bpai_valor_origem_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_central_bloqueio_agenda]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_central_bloqueio_agenda]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnosticos_por_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnosticos_por_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_diagnosticos_por_frequencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_diagnosticos_por_frequencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_classificacao_risco_emer_spa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_classificacao_risco_emer_spa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_CID]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_CID]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_CID_SEXO_FAIXA_ETARIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_CID_SEXO_FAIXA_ETARIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_OBITO_CID_SEXO_FAIXA_ETARIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_OBITO_CID_SEXO_FAIXA_ETARIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_TEMPO_PERMANENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_TEMPO_PERMANENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_TIPO_SAIDA_SEXO_FAIXA_ETARIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_EMERGENCIA_TIPO_SAIDA_SEXO_FAIXA_ETARIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_indicadores_hospitalares]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_indicadores_hospitalares]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_mensal_procedimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_mensal_procedimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_mensal_procedimento_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_mensal_procedimento_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_OCORRENCIA_EMERGENCIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_OCORRENCIA_EMERGENCIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_OCORRENCIA_SPA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_OCORRENCIA_SPA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_ESTATISTICA_SPA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_ESTATISTICA_SPA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_spa_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_spa_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Estatistica_upa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Estatistica_upa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_aih_pendente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_aih_pendente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_diagnosticos_maior_valor]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_diagnosticos_maior_valor]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_mensal_CLASSIFICACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_mensal_CLASSIFICACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_mensal_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_mensal_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_mensal_diagnostico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_mensal_diagnostico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_mensal_procedimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_mensal_procedimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_procedimentos_maior_valor]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_procedimentos_maior_valor]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_producao_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_producao_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_producao_sintetico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_producao_sintetico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_especialidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_especialidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_motivo_cobranca]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_motivo_cobranca]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_paciente_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_paciente_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_sadt]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_sadt]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_sintetico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_sintetico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_internacao_paciente_evolucao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_internacao_paciente_evolucao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_emergencia_novo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_emergencia_novo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_geoestatistico_emergencia_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_geoestatistico_emergencia_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Estatistica_Secao_Origem]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Estatistica_Secao_Origem]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_EstatisticaClinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_EstatisticaClinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_morbidade_hospitalar]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_morbidade_hospitalar]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Pacientes_Atendidos_Dia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Pacientes_Atendidos_Dia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Procedimentos_Alterados_AIH]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Procedimentos_Alterados_AIH]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_procedimentos_diarios]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_procedimentos_diarios]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_procedimentos_diarios_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_procedimentos_diarios_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_procedimentos_por_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_procedimentos_por_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_emergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_emergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_emergencia_hora]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_emergencia_hora]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_profissional_cirurgia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_profissional_cirurgia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_spa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_spa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_spa_origem_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_spa_origem_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_spa_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_spa_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_quantidade_obitos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_quantidade_obitos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_quantidade_obitos_clinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_quantidade_obitos_clinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Estatistica_GrupoExame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Estatistica_GrupoExame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_sistema]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_sistema]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RESUMO_MUNICIPIO_SPA_CLINICA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RESUMO_MUNICIPIO_SPA_CLINICA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Setor_Clinica_CID]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Setor_Clinica_CID]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Setor_Clinica_PROCEDIMENTO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Setor_Clinica_PROCEDIMENTO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_SetorClinica_CID]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_SetorClinica_CID]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Atendimento_Medicamentos_Prescritos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Atendimento_Medicamentos_Prescritos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_AtendimentosPorClinica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_AtendimentosPorClinica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_UPA_Evolucao_Historico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_UPA_Evolucao_Historico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_UPA_Evolucao_Historico_Diagnostico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_UPA_Evolucao_Historico_Diagnostico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_UPA_Evolucao_Parecer]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_UPA_Evolucao_Parecer]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_UPA_FILA_JOB]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_UPA_FILA_JOB]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Todos_Itens_Prescritos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Todos_Itens_Prescritos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_estatistica_mensal_internacao_mes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_estatistica_mensal_internacao_mes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[kSp_Agenda_Chamada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[kSp_Agenda_Chamada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_apac_exportacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_apac_exportacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_apac_procedimentos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_apac_procedimentos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_exportacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_exportacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_exportacao_OP2]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_exportacao_OP2]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_bpa_individualizado_exportacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_bpa_individualizado_exportacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Capacidade_Profissional]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Capacidade_Profissional]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Carrega_Indicadores]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Carrega_Indicadores]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Carrega_Indicadores_Especialidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Carrega_Indicadores_Especialidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Carrega_Top20]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Carrega_Top20]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Carrega_Top20FAT]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Carrega_Top20FAT]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Atendimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Atendimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Atendimento_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Atendimento_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Ativ_Profissional]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Ativ_Profissional]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_CNES_Atividade_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_CNES_Atividade_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Cargo_Formalizacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Cargo_Formalizacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_ChDiferenciada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_ChDiferenciada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Comissao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Comissao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Comissao_unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Comissao_unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Formalizacao_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Formalizacao_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Infra_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Infra_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Instalacao_Fisica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Instalacao_Fisica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_CNES_Instalacao_Fisica_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_CNES_Instalacao_Fisica_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_NivelAtencao_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_NivelAtencao_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Servico_Ref_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Servico_Ref_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_CNES_Tipo_Situacao_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_CNES_Tipo_Situacao_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_TipoAtencao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_TipoAtencao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_TipoEquipamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_TipoEquipamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_TipoEquipe]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_TipoEquipe]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_UnidadeII]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_UnidadeII]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_UnidadeIII]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_UnidadeIII]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Vinculo_Prof_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Vinculo_Prof_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_CNES_Vinculo_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_CNES_Vinculo_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Declaracao_Emitida]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Declaracao_Emitida]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Especificacao_Servico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Especificacao_Servico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Faturamento_Inconsistencias_DCIH]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Faturamento_Inconsistencias_DCIH]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Parametro_Boletim]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Parametro_Boletim]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Protocolo_Acolhimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Protocolo_Acolhimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_regra]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_regra]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Regulacao_Autorizacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Regulacao_Autorizacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_RELATORIO_ACESSO_HIERARQUIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_RELATORIO_ACESSO_HIERARQUIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Administracao_profissional_lotacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Administracao_profissional_lotacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Administracao_Usuario_Grupo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Administracao_Usuario_Grupo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Administracao_Usuario_Sistema]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Administracao_Usuario_Sistema]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Admissao_ambulancia_Externa]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Admissao_ambulancia_Externa]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Admissao_ambulancia_Interna]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Admissao_ambulancia_Interna]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_apac_alta]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_apac_alta]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_apac_conta_paciente]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_apac_conta_paciente]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_apac_expirada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_apac_expirada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_atendimento_faixa_etaria_unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_atendimento_faixa_etaria_unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_comoChegou_recepcaoPortaria]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_comoChegou_recepcaoPortaria]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_comoChegou_urgenciaEmergencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_comoChegou_urgenciaEmergencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_RELATORIO_CONSOLIDADO_CLASSIFICACAO_RISCO_FAIXA_ETARIA]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_RELATORIO_CONSOLIDADO_CLASSIFICACAO_RISCO_FAIXA_ETARIA]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Declaracao_Emitida]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Declaracao_Emitida]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_devolucao_descarte]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_devolucao_descarte]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Encaminhamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Encaminhamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_EncaminhamentoCidadao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_EncaminhamentoCidadao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_bpa_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_bpa_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_bpa_mensal]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_bpa_mensal]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_bpa_mensal_grupo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_bpa_mensal_grupo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_consolidado_fpo]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_consolidado_fpo]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Faturamento_Controle_Parto]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Faturamento_Controle_Parto]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Faturamento_Exames]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Faturamento_Exames]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_homonimos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_homonimos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_mensal_especialidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_mensal_especialidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_faturamento_valores_registro_nascimento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_faturamento_valores_registro_nascimento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_ficha_obito]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_ficha_obito]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Inconsistencias_Importacao_CNES]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Inconsistencias_Importacao_CNES]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_Indicadores_Web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_Indicadores_Web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Estatistica_Destino]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Estatistica_Destino]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Estatistica_Producao_Operador]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Estatistica_Producao_Operador]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_Estatistica_Secao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_Estatistica_Secao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_estatistica_secao_origem_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_estatistica_secao_origem_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_laboratorio_ListagemGeral]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_laboratorio_ListagemGeral]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_motivo_chegada_diario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_motivo_chegada_diario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Movimento_Ambulancia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Movimento_Ambulancia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_obito_unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_obito_unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Odonto_Procedimento_Diario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Odonto_Procedimento_Diario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_Odonto_Procedimento_Mensal]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_Odonto_Procedimento_Mensal]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Relatorio_OrientacaoCidadao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Relatorio_OrientacaoCidadao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_permissao_usuario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_permissao_usuario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_amostra]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_amostra]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_baixa_impressao_analitico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_baixa_impressao_analitico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_baixa_impressao_sintetico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_baixa_impressao_sintetico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_caso_especial]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_caso_especial]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_devolucao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_devolucao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_envelope_chegada]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_envelope_chegada]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_exame]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_exame]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_tipo_unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_tipo_unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_pezinho_unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_pezinho_unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_bpa_sintetico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_bpa_sintetico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_producao_bpa_sintetico_web]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_producao_bpa_sintetico_web]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_quantitativo_paciente_internado_mes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_quantitativo_paciente_internado_mes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_agenda_central_sub2]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_agenda_central_sub2]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Consumo_Filmes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Consumo_Filmes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_radiologia_Estatistica_TecnicoFilme]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_radiologia_Estatistica_TecnicoFilme]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_tipo_viatura_diario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_tipo_viatura_diario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_total_paciente_internado_mes]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_total_paciente_internado_mes]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_relatorio_unidade_origem_diario]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_relatorio_unidade_origem_diario]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[KSP_SERVICO_LABORATORIO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[KSP_SERVICO_LABORATORIO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_StatusCenso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_StatusCenso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_tabelas_faturamento]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_tabelas_faturamento]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Unidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Unidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Unidade_Dados_Fundamentais]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Unidade_Dados_Fundamentais]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_unidade_hosp]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_unidade_hosp]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Unidade_Servico_Referencia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Unidade_Servico_Referencia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Unidade_sipac]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Unidade_sipac]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Classificacao_Risco]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Classificacao_Risco]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_RemocoesPorUnidade]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_RemocoesPorUnidade]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Anamnese_Clinica_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Anamnese_Clinica_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Controle_Sinais_Vitais_Balanco_Hidrico]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Controle_Sinais_Vitais_Balanco_Hidrico]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_Sub_Evolucao_Impresso]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_Sub_Evolucao_Impresso]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[Ksp_SUB_MENSURACAO]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[Ksp_SUB_MENSURACAO]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_UPA_Evolucao_Diagnosticos]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_UPA_Evolucao_Diagnosticos]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_atualizacao_censo_hospitalar]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_atualizacao_censo_hospitalar]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_laboratorio_Requisicao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_laboratorio_Requisicao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Pedido_Insumo_Farmacia]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Pedido_Insumo_Farmacia]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_evolucao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_evolucao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Internacao]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Internacao]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_item_prescricao_medica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_item_prescricao_medica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO
PRINT N'Refreshing [dbo].[ksp_Prescricao_Medica]...';


GO
--EXECUTE sp_refreshsqlmodule N'[dbo].[ksp_Prescricao_Medica]';


GO
IF @@ERROR <> 0
   AND @@TRANCOUNT > 0
    BEGIN
        ROLLBACK;
    END

IF @@TRANCOUNT = 0
    BEGIN
        INSERT  INTO #tmpErrors (Error)
        VALUES                 (1);
        BEGIN TRANSACTION;
    END


GO

IF EXISTS (SELECT * FROM #tmpErrors) ROLLBACK TRANSACTION
GO
IF @@TRANCOUNT>0 BEGIN
PRINT N'The transacted portion of the database update succeeded.'
COMMIT TRANSACTION
END
ELSE PRINT N'The transacted portion of the database update failed.'
GO
DROP TABLE #tmpErrors
GO
PRINT N'Checking existing data against newly created constraints';

GO
ALTER TABLE [dbo].[Atendimento_MultiProfissional] WITH CHECK CHECK CONSTRAINT [FK_Atendimento_MultiProfissional_agenda_consulta];

ALTER TABLE [dbo].[Atendimento_MultiProfissional] WITH CHECK CHECK CONSTRAINT [FK_Atendimento_MultiProfissional_PROFISSIONAL_REDE];

ALTER TABLE [dbo].[Atendimento_MultiProfissional] WITH CHECK CHECK CONSTRAINT [FK_Atendimento_MultiProfissional_Atendimento_MultiProfissional];

ALTER TABLE [dbo].[Atendimento_MultiProfissional_Procedimento] WITH CHECK CHECK CONSTRAINT [FK_Atendimento_MultiProfissional_Procedimento_Atendimento_MultiProfissional];

ALTER TABLE [dbo].[ConsultaEnfermagem_Medicamento] WITH CHECK CHECK CONSTRAINT [FK_ConsultaEnfermagem_Medicamento_Atendimento_Enfermagem];

ALTER TABLE [dbo].[Atendimento_Enfermagem] WITH CHECK CHECK CONSTRAINT [FK_Atendimento_Enfermagem_PROFISSIONAL_REDE];


GO
PRINT N'Update complete.';


GO
DECLARE @versao varchar(30)
SET @versao = 'K.2020.07.5' 

IF NOT EXISTS(SELECT Id FROM DATABASE_VERSION_CONTROL WHERE Versao = @versao)
BEGIN
    INSERT INTO [dbo].[DATABASE_VERSION_CONTROL]
           ([Id]
           ,[Versao]
           ,[DataAtualizacao]
           ,[Usuario])
     VALUES
           (NEWID()
           ,@versao
           ,GETDATE()
           ,'anderson.souza')
   END 
GO